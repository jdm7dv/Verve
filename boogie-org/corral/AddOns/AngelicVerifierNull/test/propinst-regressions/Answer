
-------------------- uaf0.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing uaf0_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_0(x_1) ==> validFree[x_1])
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Failing traces {Trace1 }
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Assertion failed in proc foo with expr validFree[p] || p == 0

-------------------- uaf1.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing uaf1_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_0(x_1) ==> validFree[x_1])

-------------------- df0.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing df0_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_0(x_1) ==> validFree[x_1])
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Failing traces {Trace1 }
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Assertion failed in proc foo with expr validFree[p] || p == 0

-------------------- uaf2.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing uaf2_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_3(x_1) ==> validFree[x_1])
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Failing traces {Trace1 }
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Assertion failed in proc foo with expr validFree[p] || p == 0
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_3(x_1) ==> validFree[x_1 + 1])
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_0(x_1) ==> validFree[x_1])
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_2: int :: unknownTrigger_1(x_2) ==> validFree[x_2])

-------------------- uaf3.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing uaf3_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_3(x_1) ==> validFree[x_1])
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Failing traces {Trace1 }
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Assertion failed in proc foo with expr validFree[p] || p == 0
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_3(x_1) ==> validFree[x_1 + 1])
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_2: int :: unknownTrigger_1(x_2) ==> validFree[x_2])

-------------------- irql0.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing irql0_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_0(x_1) ==> x_1 <= 2)

-------------------- irql1.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing irql1_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_0(x_1) ==> x_1 <= 1)

-------------------- irql2.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing irql2_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int, x_2: int :: unknownTrigger_0(x_1) && unknownTrigger_1(x_2) ==> x_1 <= x_2)

-------------------- null0.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing null0_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Failing traces {Trace0 }
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Assertion failed in proc foo with expr !(ax == NULL)

-------------------- rodrigo_refnull.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing rodrigo_refnull_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Failing traces {Trace0 }
[TAG: AV_OUTPUT] ANGELIC_VERIFIER_WARNING: Assertion failed in proc Foo with expr r != null

-------------------- probe0.bpl --------------------
[TAG: AV_OUTPUT] ----- Analyzing probe0_pinst_hinst.bpl ------
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_4(x_1) ==> !validProbe[x_1])
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_4(x_1) ==> validProbe[Mem_T.pSid__KS_CAMERA_STREAMING_CONSENT_INFO[pSid__KS_CAMERA_STREAMING_CONSENT_INFO(x_1)]])
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_1(x_1) ==> !validProbe[x_1])
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_1: int :: unknownTrigger_0(x_1) ==> validProbe[Mem_T.pSid__KS_CAMERA_STREAMING_CONSENT_INFO[pSid__KS_CAMERA_STREAMING_CONSENT_INFO(x_1)]])
