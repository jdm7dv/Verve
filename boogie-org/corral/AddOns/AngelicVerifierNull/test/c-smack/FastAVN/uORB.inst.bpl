type i1 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type ref = i64;

type float = i32;

var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]i8;

var $M.3: [ref]i8;

var $M.4: [ref]i8;

var $M.5: [ref]ref;

var $M.6: [ref]i32;

var $M.7: [ref]i32;

var $M.8: [ref]i8;

var $M.9: [ref]ref;

var $M.10: [ref]i32;

var $M.11: [ref]i32;

var $M.12: [ref]ref;

var $M.13: [ref]i32;

var $M.14: [ref]i32;

var $M.15: [ref]ref;

var $M.16: [ref]i32;

var $M.17: [ref]i32;

var $M.18: [ref]ref;

var $M.19: [ref]i32;

var $M.20: [ref]i32;

var $M.21: [ref]ref;

var $M.22: [ref]i32;

var $M.23: [ref]i32;

var $M.24: [ref]ref;

var $M.25: [ref]i32;

var $M.26: [ref]i32;

var $M.27: [ref]ref;

var $M.28: [ref]i32;

var $M.29: [ref]i32;

var $M.30: [ref]ref;

var $M.31: [ref]i32;

var $M.32: [ref]i32;

var $M.33: [ref]ref;

var $M.34: [ref]i32;

var $M.35: [ref]i32;

var $M.36: [ref]ref;

var $M.37: [ref]i32;

var $M.38: [ref]i32;

var $M.39: [ref]ref;

var $M.40: [ref]i32;

var $M.41: [ref]i32;

var $M.42: [ref]ref;

var $M.43: [ref]i32;

var $M.44: [ref]i32;

var $M.45: [ref]ref;

var $M.46: [ref]i32;

var $M.47: [ref]i32;

var $M.48: [ref]ref;

var $M.49: [ref]i32;

var $M.50: [ref]i32;

var $M.51: [ref]ref;

var $M.52: [ref]i32;

var $M.53: [ref]i32;

var $M.54: [ref]ref;

var $M.55: [ref]i32;

var $M.56: [ref]i32;

var $M.57: [ref]ref;

var $M.58: [ref]i32;

var $M.59: [ref]i32;

var $M.60: [ref]ref;

var $M.61: [ref]i32;

var $M.62: [ref]i32;

var $M.63: [ref]ref;

var $M.64: [ref]i32;

var $M.65: [ref]i32;

var $M.66: [ref]ref;

var $M.67: [ref]i32;

var $M.68: [ref]i32;

var $M.69: [ref]ref;

var $M.70: [ref]i32;

var $M.71: [ref]i32;

var $M.72: [ref]ref;

var $M.73: [ref]i32;

var $M.74: [ref]i32;

var $M.75: [ref]ref;

var $M.76: [ref]i32;

var $M.77: [ref]i32;

var $M.78: [ref]ref;

var $M.79: [ref]i32;

var $M.80: [ref]i32;

var $M.81: [ref]ref;

var $M.82: [ref]i32;

var $M.83: [ref]i32;

var $M.84: [ref]ref;

var $M.85: [ref]i32;

var $M.86: [ref]i32;

var $M.87: [ref]ref;

var $M.88: [ref]ref;

var $M.89: [ref]i32;

var $M.90: [ref]i32;

var $M.91: [ref]i32;

var $M.92: [ref]i32;

var $M.93: [ref]ref;

var $M.94: [ref]ref;

var $M.95: [ref]ref;

var $M.96: int;

var $M.97: int;

var $M.98: [ref]i32;

var $M.99: [ref]i32;

var $M.100: [ref]ref;

var $M.101: [ref]i32;

var $M.102: [ref]i32;

var $M.103: [ref]i32;

var $M.104: [ref]i32;

var $M.105: [ref]i32;

var $M.106: [ref]i32;

var $M.107: [ref]i32;

var $M.108: [ref]i32;

var $M.109: [ref]ref;

var $M.110: [ref]ref;

var $M.111: [ref]i32;

var $M.112: [ref]i32;

var $M.113: [ref]i8;

var $M.114: [ref]ref;

var $M.115: [ref]i8;

var $M.116: [ref]i8;

var $M.117: [ref]ref;

var $M.118: [ref]ref;

var $M.119: [ref]ref;

var $M.120: [ref]i8;

var $M.121: [ref]ref;

var $M.122: [ref]ref;

var $M.123: [ref]ref;

var $M.124: [ref]i8;

var $M.125: [ref]ref;

var $M.126: [ref]ref;

var $M.127: [ref]ref;

var $M.128: [ref]ref;

var $M.129: [ref]ref;

var $M.130: [ref]i8;

var $M.131: int;

var $M.132: [ref]ref;

var $M.133: [ref]i8;

var $M.134: [ref]ref;

var $M.135: [ref]ref;

var $M.136: [ref]ref;

var $M.137: [ref]ref;

var $M.138: [ref]ref;

var $M.139: [ref]ref;

var $M.140: [ref]ref;

var $M.141: [ref]ref;

var $M.142: [ref]ref;

var $M.143: [ref]ref;

var $M.144: [ref]i8;

var $M.145: [ref]ref;

var $M.146: [ref]i8;

var $M.147: [ref]i8;

var $M.148: [ref]ref;

var $M.149: [ref]ref;

var $M.150: [ref]ref;

var $M.151: [ref]ref;

var $M.152: [ref]ref;

var $M.153: [ref]i8;

var $M.154: [ref]ref;

var $M.155: [ref]ref;

var $M.156: [ref]ref;

axiom $GLOBALS_BOTTOM == NULL - 10664;

axiom $EXTERNS_BOTTOM == NULL - 32776;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : int;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: int) : bv64;

function {:inline} $p2i.ref.i8(p: int) : int
{
  p
}

function {:inline} $i2p.i8.ref(i: int) : int
{
  i
}

function {:inline} $p2i.ref.i16(p: int) : int
{
  p
}

function {:inline} $i2p.i16.ref(i: int) : int
{
  i
}

function {:inline} $p2i.ref.i32(p: int) : int
{
  p
}

function {:inline} $i2p.i32.ref(i: int) : int
{
  i
}

function {:inline} $p2i.ref.i64(p: int) : int
{
  p
}

function {:inline} $i2p.i64.ref(i: int) : int
{
  i
}

function {:inline} $eq.ref(p1: int, p2: int) : int
{
  (if p1 == p2 then 1 else NULL)
}

function {:inline} $eq.ref.bool(p1: int, p2: int) : bool
{
  p1 == p2
}

function {:inline} $ne.ref(p1: int, p2: int) : int
{
  (if p1 != p2 then 1 else NULL)
}

function {:inline} $ne.ref.bool(p1: int, p2: int) : bool
{
  p1 != p2
}

function {:inline} $ugt.ref(p1: int, p2: int) : int
{
  (if p1 > p2 then 1 else NULL)
}

function {:inline} $ugt.ref.bool(p1: int, p2: int) : bool
{
  p1 > p2
}

function {:inline} $uge.ref(p1: int, p2: int) : int
{
  (if p1 >= p2 then 1 else NULL)
}

function {:inline} $uge.ref.bool(p1: int, p2: int) : bool
{
  p1 >= p2
}

function {:inline} $ult.ref(p1: int, p2: int) : int
{
  (if p1 < p2 then 1 else NULL)
}

function {:inline} $ult.ref.bool(p1: int, p2: int) : bool
{
  p1 < p2
}

function {:inline} $ule.ref(p1: int, p2: int) : int
{
  (if p1 <= p2 then 1 else NULL)
}

function {:inline} $ule.ref.bool(p1: int, p2: int) : bool
{
  p1 <= p2
}

function {:inline} $sgt.ref(p1: int, p2: int) : int
{
  (if p1 > p2 then 1 else NULL)
}

function {:inline} $sgt.ref.bool(p1: int, p2: int) : bool
{
  p1 > p2
}

function {:inline} $sge.ref(p1: int, p2: int) : int
{
  (if p1 >= p2 then 1 else NULL)
}

function {:inline} $sge.ref.bool(p1: int, p2: int) : bool
{
  p1 >= p2
}

function {:inline} $slt.ref(p1: int, p2: int) : int
{
  (if p1 < p2 then 1 else NULL)
}

function {:inline} $slt.ref.bool(p1: int, p2: int) : bool
{
  p1 < p2
}

function {:inline} $sle.ref(p1: int, p2: int) : int
{
  (if p1 <= p2 then 1 else NULL)
}

function {:inline} $sle.ref.bool(p1: int, p2: int) : bool
{
  p1 <= p2
}

function {:inline} $add.ref(p1: int, p2: int) : int
{
  p1 + p2
}

function {:inline} $sub.ref(p1: int, p2: int) : int
{
  p1 - p2
}

function {:inline} $mul.ref(p1: int, p2: int) : int
{
  p1 * p2
}

const .str: int;

axiom .str == NULL - 16;

const .str1: int;

axiom .str1 == NULL - 32;

const .str2: int;

axiom .str2 == NULL - 46;

const .str1409: int;

axiom .str1409 == NULL - 107;

const .str1410: int;

axiom .str1410 == NULL - 170;

const .str1411: int;

axiom .str1411 == NULL - 273;

const {:count 9} _ZTVN4uORB11PublicationI18vehicle_attitude_sEE: int;

axiom _ZTVN4uORB11PublicationI18vehicle_attitude_sEE == NULL - 345;

const {:count 9} _ZTVN4uORB11PublicationI24vehicle_local_position_sEE: int;

axiom _ZTVN4uORB11PublicationI24vehicle_local_position_sEE == NULL - 417;

const {:count 9} _ZTVN4uORB11PublicationI25vehicle_global_position_sEE: int;

axiom _ZTVN4uORB11PublicationI25vehicle_global_position_sEE == NULL - 489;

const {:count 9} _ZTVN4uORB11PublicationI17debug_key_value_sEE: int;

axiom _ZTVN4uORB11PublicationI17debug_key_value_sEE == NULL - 561;

const {:count 9} _ZTVN4uORB11PublicationI19actuator_controls_sEE: int;

axiom _ZTVN4uORB11PublicationI19actuator_controls_sEE == NULL - 633;

const {:count 9} _ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE: int;

axiom _ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE == NULL - 705;

const {:count 9} _ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE: int;

axiom _ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE == NULL - 777;

const {:count 9} _ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE: int;

axiom _ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE == NULL - 849;

const {:count 9} _ZTVN4uORB11PublicationI18actuator_outputs_sEE: int;

axiom _ZTVN4uORB11PublicationI18actuator_outputs_sEE == NULL - 921;

const {:count 9} _ZTVN4uORB11PublicationI17actuator_direct_sEE: int;

axiom _ZTVN4uORB11PublicationI17actuator_direct_sEE == NULL - 993;

const {:count 9} _ZTVN4uORB11PublicationI10encoders_sEE: int;

axiom _ZTVN4uORB11PublicationI10encoders_sEE == NULL - 1065;

const {:count 9} _ZTVN4uORB11PublicationI13tecs_status_sEE: int;

axiom _ZTVN4uORB11PublicationI13tecs_status_sEE == NULL - 1137;

const {:count 9} _ZTVN4uORB11PublicationI13rc_channels_sEE: int;

axiom _ZTVN4uORB11PublicationI13rc_channels_sEE == NULL - 1209;

const {:count 9} _ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE: int;

axiom _ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE == NULL - 1281;

const {:count 4} _ZTVN4uORB15PublicationBaseE: int;

axiom _ZTVN4uORB15PublicationBaseE == NULL - 1313;

const {:count 9} _ZTVN4uORB12SubscriptionI18parameter_update_sEE: int;

axiom _ZTVN4uORB12SubscriptionI18parameter_update_sEE == NULL - 1385;

const {:count 9} _ZTVN4uORB12SubscriptionI19actuator_controls_sEE: int;

axiom _ZTVN4uORB12SubscriptionI19actuator_controls_sEE == NULL - 1457;

const {:count 9} _ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE: int;

axiom _ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE == NULL - 1529;

const {:count 9} _ZTVN4uORB12SubscriptionI16satellite_info_sEE: int;

axiom _ZTVN4uORB12SubscriptionI16satellite_info_sEE == NULL - 1601;

const {:count 9} _ZTVN4uORB12SubscriptionI17sensor_combined_sEE: int;

axiom _ZTVN4uORB12SubscriptionI17sensor_combined_sEE == NULL - 1673;

const {:count 9} _ZTVN4uORB12SubscriptionI12hil_sensor_sEE: int;

axiom _ZTVN4uORB12SubscriptionI12hil_sensor_sEE == NULL - 1745;

const {:count 9} _ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE: int;

axiom _ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE == NULL - 1817;

const {:count 9} _ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE: int;

axiom _ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE == NULL - 1889;

const {:count 9} _ZTVN4uORB12SubscriptionI10encoders_sEE: int;

axiom _ZTVN4uORB12SubscriptionI10encoders_sEE == NULL - 1961;

const {:count 9} _ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE: int;

axiom _ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE == NULL - 2033;

const {:count 9} _ZTVN4uORB12SubscriptionI16vehicle_status_sEE: int;

axiom _ZTVN4uORB12SubscriptionI16vehicle_status_sEE == NULL - 2105;

const {:count 9} _ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE: int;

axiom _ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE == NULL - 2177;

const {:count 9} _ZTVN4uORB12SubscriptionI13mavlink_log_sEE: int;

axiom _ZTVN4uORB12SubscriptionI13mavlink_log_sEE == NULL - 2249;

const {:count 9} _ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE: int;

axiom _ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE == NULL - 2321;

const {:count 9} _ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE: int;

axiom _ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE == NULL - 2393;

const {:count 9} _ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE: int;

axiom _ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE == NULL - 2465;

const {:count 9} _ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE: int;

axiom _ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE == NULL - 2537;

const {:count 9} _ZTVN4uORB12SubscriptionI13rc_channels_sEE: int;

axiom _ZTVN4uORB12SubscriptionI13rc_channels_sEE == NULL - 2609;

const {:count 9} _ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE: int;

axiom _ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE == NULL - 2681;

const {:count 9} _ZTVN4uORB12SubscriptionI16actuator_armed_sEE: int;

axiom _ZTVN4uORB12SubscriptionI16actuator_armed_sEE == NULL - 2753;

const {:count 9} _ZTVN4uORB12SubscriptionI16battery_status_sEE: int;

axiom _ZTVN4uORB12SubscriptionI16battery_status_sEE == NULL - 2825;

const {:count 9} _ZTVN4uORB12SubscriptionI15home_position_sEE: int;

axiom _ZTVN4uORB12SubscriptionI15home_position_sEE == NULL - 2897;

const {:count 9} _ZTVN4uORB12SubscriptionI14optical_flow_sEE: int;

axiom _ZTVN4uORB12SubscriptionI14optical_flow_sEE == NULL - 2969;

const {:count 9} _ZTVN4uORB12SubscriptionI17distance_sensor_sEE: int;

axiom _ZTVN4uORB12SubscriptionI17distance_sensor_sEE == NULL - 3041;

const {:count 9} _ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE: int;

axiom _ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE == NULL - 3113;

const {:count 9} _ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE: int;

axiom _ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE == NULL - 3185;

const {:count 9} _ZTVN4uORB12SubscriptionI15control_state_sEE: int;

axiom _ZTVN4uORB12SubscriptionI15control_state_sEE == NULL - 3257;

const {:count 4} _ZTVN4uORB16SubscriptionBaseE: int;

axiom _ZTVN4uORB16SubscriptionBaseE == NULL - 3289;

const _ZN4uORB12DeviceMaster9_node_mapE: int;

axiom _ZN4uORB12DeviceMaster9_node_mapE == NULL - 3337;

const __dso_handle: int;

axiom __dso_handle == NULL - 32776;

const {:count 22} _ZTVN4uORB10DeviceNodeE: int;

axiom _ZTVN4uORB10DeviceNodeE == NULL - 3513;

const {:count 22} _ZTVN4uORB12DeviceMasterE: int;

axiom _ZTVN4uORB12DeviceMasterE == NULL - 3689;

const llvm.global_ctors: int;

axiom llvm.global_ctors == NULL - 3713;

const _ZN4uORB7Manager9_InstanceE: int;

axiom _ZN4uORB7Manager9_InstanceE == NULL - 3721;

const {:count 5} _ZTVN4uORB7ManagerE: int;

axiom _ZTVN4uORB7ManagerE == NULL - 3761;

const {:count 9} _ZTVN4uORB15PublicationNodeE: int;

axiom _ZTVN4uORB15PublicationNodeE == NULL - 3833;

const .str1413: int;

axiom .str1413 == NULL - 3838;

const .str11414: int;

axiom .str11414 == NULL - 3851;

const .str21415: int;

axiom .str21415 == NULL - 3863;

const .str31416: int;

axiom .str31416 == NULL - 3868;

const .str341417: int;

axiom .str341417 == NULL - 3884;

const .str251418: int;

axiom .str251418 == NULL - 3901;

const .str161419: int;

axiom .str161419 == NULL - 3912;

const .str41420: int;

axiom .str41420 == NULL - 3935;

const .str271421: int;

axiom .str271421 == NULL - 3940;

const .str1281422: int;

axiom .str1281422 == NULL - 3966;

const .str2291423: int;

axiom .str2291423 == NULL - 4019;

const .str3301424: int;

axiom .str3301424 == NULL - 4100;

const .str4311425: int;

axiom .str4311425 == NULL - 4202;

const .str51426: int;

axiom .str51426 == NULL - 4213;

const .str61427: int;

axiom .str61427 == NULL - 4226;

const .str71428: int;

axiom .str71428 == NULL - 4237;

const .str81429: int;

axiom .str81429 == NULL - 4252;

const .str321430: int;

axiom .str321430 == NULL - 4258;

const _ZL5g_dev: int;

axiom _ZL5g_dev == NULL - 4266;

const .str1331431: int;

axiom .str1331431 == NULL - 4271;

const .str2341432: int;

axiom .str2341432 == NULL - 4286;

const .str3351433: int;

axiom .str3351433 == NULL - 4312;

const .str4361434: int;

axiom .str4361434 == NULL - 4332;

const .str5371435: int;

axiom .str5371435 == NULL - 4351;

const .str6381436: int;

axiom .str6381436 == NULL - 4358;

const .str7391437: int;

axiom .str7391437 == NULL - 4374;

const .str8401438: int;

axiom .str8401438 == NULL - 4394;

const .str751439: int;

axiom .str751439 == NULL - 4399;

const .str1761440: int;

axiom .str1761440 == NULL - 4431;

const .str2771441: int;

axiom .str2771441 == NULL - 4477;

const .str3781442: int;

axiom .str3781442 == NULL - 4522;

const .str4791443: int;

axiom .str4791443 == NULL - 4541;

const .str5801444: int;

axiom .str5801444 == NULL - 4550;

const .str6811445: int;

axiom .str6811445 == NULL - 4611;

const {:count 57} __PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj: int;

axiom __PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj == NULL - 4668;

const .str7821446: int;

axiom .str7821446 == NULL - 4679;

const .str8831447: int;

axiom .str8831447 == NULL - 4750;

const .str1881448: int;

axiom .str1881448 == NULL - 4754;

const .str2891449: int;

axiom .str2891449 == NULL - 4760;

const .str901450: int;

axiom .str901450 == NULL - 4769;

const _ZStL19piecewise_construct: int;

axiom _ZStL19piecewise_construct == NULL - 4770;

const {:count 4} _ZTV8ListNodeIPN4uORB16SubscriptionNodeEE: int;

axiom _ZTV8ListNodeIPN4uORB16SubscriptionNodeEE == NULL - 4802;

const {:count 5} _ZTVN16uORBCommunicator17IChannelRxHandlerE: int;

axiom _ZTVN16uORBCommunicator17IChannelRxHandlerE == NULL - 4842;

const .str91451: int;

axiom .str91451 == NULL - 4872;

const {:count 9} _ZTVN4uORB16SubscriptionNodeE: int;

axiom _ZTVN4uORB16SubscriptionNodeE == NULL - 4944;

const {:count 4} _ZTV8ListNodeIPN4uORB15PublicationNodeEE: int;

axiom _ZTV8ListNodeIPN4uORB15PublicationNodeEE == NULL - 4976;

const llvm.dbg.declare: int;

axiom llvm.dbg.declare == NULL - 4984;

procedure llvm.dbg.declare({:scalar} $p0: int, {:scalar} $p1: int, {:scalar} $p2: int);



const __SMACK_dummy: int;

axiom __SMACK_dummy == NULL - 4992;

procedure __SMACK_dummy({:scalar} v: int);



implementation __SMACK_dummy(v: int)
{

  $bb0:
    call {:cexpr "v"} boogie_si_record_i32(v);
    assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 97, 3} true;
    assume true;
    assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 98, 1} true;
    $exn := false;
    return;
}



const __SMACK_code: int;

axiom __SMACK_code == NULL - 5000;

procedure __SMACK_code.ref($p0: int);



const exit: int;

axiom exit == NULL - 5008;

procedure exit({:scalar} x: int);



implementation exit(x: int)
{

  $bb0:
    call {:cexpr "x"} boogie_si_record_i32(x);
    assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 45, 3} true;
    assume false;
    assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 46, 3} true;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 46, 3} true;
    goto $bb1;
}



const __SMACK_decls: int;

axiom __SMACK_decls == NULL - 5016;

function {:inline} $bitcast.ref.ref(i: int) : int
{
  i
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) : bv128;

function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) : bv96;

function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) : bv88;

function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) : bv64;

function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) : bv56;

function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) : bv48;

function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) : bv40;

function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) : bv32;

function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) : bv24;

function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) : bv16;

function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) : bv8;

function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) : bv1;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if i1 == i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if i1 != i2 then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $trunc.bv128.bv96(i: bv128) : bv96
{
  i[96:0]
}

function {:inline} $trunc.bv128.bv88(i: bv128) : bv88
{
  i[88:0]
}

function {:inline} $trunc.bv128.bv64(i: bv128) : bv64
{
  i[64:0]
}

function {:inline} $trunc.bv128.bv56(i: bv128) : bv56
{
  i[56:0]
}

function {:inline} $trunc.bv128.bv48(i: bv128) : bv48
{
  i[48:0]
}

function {:inline} $trunc.bv128.bv40(i: bv128) : bv40
{
  i[40:0]
}

function {:inline} $trunc.bv128.bv32(i: bv128) : bv32
{
  i[32:0]
}

function {:inline} $trunc.bv128.bv24(i: bv128) : bv24
{
  i[24:0]
}

function {:inline} $trunc.bv128.bv16(i: bv128) : bv16
{
  i[16:0]
}

function {:inline} $trunc.bv128.bv8(i: bv128) : bv8
{
  i[8:0]
}

function {:inline} $trunc.bv128.bv1(i: bv128) : bv1
{
  i[1:0]
}

function {:inline} $trunc.bv96.bv88(i: bv96) : bv88
{
  i[88:0]
}

function {:inline} $trunc.bv96.bv64(i: bv96) : bv64
{
  i[64:0]
}

function {:inline} $trunc.bv96.bv56(i: bv96) : bv56
{
  i[56:0]
}

function {:inline} $trunc.bv96.bv48(i: bv96) : bv48
{
  i[48:0]
}

function {:inline} $trunc.bv96.bv40(i: bv96) : bv40
{
  i[40:0]
}

function {:inline} $trunc.bv96.bv32(i: bv96) : bv32
{
  i[32:0]
}

function {:inline} $trunc.bv96.bv24(i: bv96) : bv24
{
  i[24:0]
}

function {:inline} $trunc.bv96.bv16(i: bv96) : bv16
{
  i[16:0]
}

function {:inline} $trunc.bv96.bv8(i: bv96) : bv8
{
  i[8:0]
}

function {:inline} $trunc.bv96.bv1(i: bv96) : bv1
{
  i[1:0]
}

function {:inline} $trunc.bv88.bv64(i: bv88) : bv64
{
  i[64:0]
}

function {:inline} $trunc.bv88.bv56(i: bv88) : bv56
{
  i[56:0]
}

function {:inline} $trunc.bv88.bv48(i: bv88) : bv48
{
  i[48:0]
}

function {:inline} $trunc.bv88.bv40(i: bv88) : bv40
{
  i[40:0]
}

function {:inline} $trunc.bv88.bv32(i: bv88) : bv32
{
  i[32:0]
}

function {:inline} $trunc.bv88.bv24(i: bv88) : bv24
{
  i[24:0]
}

function {:inline} $trunc.bv88.bv16(i: bv88) : bv16
{
  i[16:0]
}

function {:inline} $trunc.bv88.bv8(i: bv88) : bv8
{
  i[8:0]
}

function {:inline} $trunc.bv88.bv1(i: bv88) : bv1
{
  i[1:0]
}

function {:inline} $trunc.bv64.bv56(i: bv64) : bv56
{
  i[56:0]
}

function {:inline} $trunc.bv64.bv48(i: bv64) : bv48
{
  i[48:0]
}

function {:inline} $trunc.bv64.bv40(i: bv64) : bv40
{
  i[40:0]
}

function {:inline} $trunc.bv64.bv32(i: bv64) : bv32
{
  i[32:0]
}

function {:inline} $trunc.bv64.bv24(i: bv64) : bv24
{
  i[24:0]
}

function {:inline} $trunc.bv64.bv16(i: bv64) : bv16
{
  i[16:0]
}

function {:inline} $trunc.bv64.bv8(i: bv64) : bv8
{
  i[8:0]
}

function {:inline} $trunc.bv64.bv1(i: bv64) : bv1
{
  i[1:0]
}

function {:inline} $trunc.bv56.bv48(i: bv56) : bv48
{
  i[48:0]
}

function {:inline} $trunc.bv56.bv40(i: bv56) : bv40
{
  i[40:0]
}

function {:inline} $trunc.bv56.bv32(i: bv56) : bv32
{
  i[32:0]
}

function {:inline} $trunc.bv56.bv24(i: bv56) : bv24
{
  i[24:0]
}

function {:inline} $trunc.bv56.bv16(i: bv56) : bv16
{
  i[16:0]
}

function {:inline} $trunc.bv56.bv8(i: bv56) : bv8
{
  i[8:0]
}

function {:inline} $trunc.bv56.bv1(i: bv56) : bv1
{
  i[1:0]
}

function {:inline} $trunc.bv48.bv32(i: bv48) : bv32
{
  i[32:0]
}

function {:inline} $trunc.bv48.bv24(i: bv48) : bv24
{
  i[24:0]
}

function {:inline} $trunc.bv48.bv16(i: bv48) : bv16
{
  i[16:0]
}

function {:inline} $trunc.bv48.bv8(i: bv48) : bv8
{
  i[8:0]
}

function {:inline} $trunc.bv48.bv1(i: bv48) : bv1
{
  i[1:0]
}

function {:inline} $trunc.bv40.bv32(i: bv40) : bv32
{
  i[32:0]
}

function {:inline} $trunc.bv40.bv24(i: bv40) : bv24
{
  i[24:0]
}

function {:inline} $trunc.bv40.bv16(i: bv40) : bv16
{
  i[16:0]
}

function {:inline} $trunc.bv40.bv8(i: bv40) : bv8
{
  i[8:0]
}

function {:inline} $trunc.bv40.bv1(i: bv40) : bv1
{
  i[1:0]
}

function {:inline} $trunc.bv32.bv24(i: bv32) : bv24
{
  i[24:0]
}

function {:inline} $trunc.bv32.bv16(i: bv32) : bv16
{
  i[16:0]
}

function {:inline} $trunc.bv32.bv8(i: bv32) : bv8
{
  i[8:0]
}

function {:inline} $trunc.bv32.bv1(i: bv32) : bv1
{
  i[1:0]
}

function {:inline} $trunc.bv24.bv16(i: bv24) : bv16
{
  i[16:0]
}

function {:inline} $trunc.bv24.bv8(i: bv24) : bv8
{
  i[8:0]
}

function {:inline} $trunc.bv24.bv1(i: bv24) : bv1
{
  i[1:0]
}

function {:inline} $trunc.bv16.bv8(i: bv16) : bv8
{
  i[8:0]
}

function {:inline} $trunc.bv16.bv1(i: bv16) : bv1
{
  i[1:0]
}

function {:inline} $trunc.bv8.bv1(i: bv8) : bv1
{
  i[1:0]
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:inline} $add.i128(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i96(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i88(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i64(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i56(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i48(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i40(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i32(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i24(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i16(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i8(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $add.i1(i1: int, i2: int) : int
{
  i1 + i2
}

function {:inline} $sub.i128(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i96(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i88(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i64(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i56(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i48(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i40(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i32(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i24(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i16(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i8(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $sub.i1(i1: int, i2: int) : int
{
  i1 - i2
}

function {:inline} $mul.i128(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i96(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i88(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i64(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i56(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i48(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i40(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i32(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i24(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i16(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i8(i1: int, i2: int) : int
{
  i1 * i2
}

function {:inline} $mul.i1(i1: int, i2: int) : int
{
  i1 * i2
}

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:builtin "div"} $sdiv.i128(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i96(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i88(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i64(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i56(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i48(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i40(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i32(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i24(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i16(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i8(i1: int, i2: int) : int;

function {:builtin "div"} $sdiv.i1(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i128(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i96(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i88(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i64(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i56(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i48(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i40(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i32(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i24(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i16(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i8(i1: int, i2: int) : int;

function {:builtin "mod"} $smod.i1(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i128(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i96(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i88(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i64(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i56(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i48(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i40(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i32(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i24(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i16(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i8(i1: int, i2: int) : int;

function {:builtin "rem"} $srem.i1(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i128(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i96(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i88(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i64(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i56(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i48(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i40(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i32(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i24(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i16(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i8(i1: int, i2: int) : int;

function {:builtin "div"} $udiv.i1(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i128(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i96(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i88(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i64(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i56(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i48(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i40(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i32(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i24(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i16(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i8(i1: int, i2: int) : int;

function {:builtin "rem"} $urem.i1(i1: int, i2: int) : int;

function {:inline} $smin.i128(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i96(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i88(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i64(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i56(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i48(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i40(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i32(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i24(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i16(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i8(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smin.i1(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $smax.i128(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i96(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i88(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i64(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i56(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i48(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i40(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i32(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i24(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i16(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i8(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $smax.i1(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umin.i128(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i96(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i88(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i64(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i56(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i48(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i40(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i32(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i24(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i16(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i8(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umin.i1(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $umax.i128(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i96(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i88(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i64(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i56(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i48(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i40(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i32(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i24(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i16(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i8(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function {:inline} $umax.i1(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

function $shl.i128(i1: int, i2: int) : int;

function $shl.i96(i1: int, i2: int) : int;

function $shl.i88(i1: int, i2: int) : int;

function $shl.i64(i1: int, i2: int) : int;

function $shl.i56(i1: int, i2: int) : int;

function $shl.i48(i1: int, i2: int) : int;

function $shl.i40(i1: int, i2: int) : int;

function $shl.i32(i1: int, i2: int) : int;

function $shl.i24(i1: int, i2: int) : int;

function $shl.i16(i1: int, i2: int) : int;

function $shl.i8(i1: int, i2: int) : int;

function $shl.i1(i1: int, i2: int) : int;

function $lshr.i128(i1: int, i2: int) : int;

function $lshr.i96(i1: int, i2: int) : int;

function $lshr.i88(i1: int, i2: int) : int;

function $lshr.i64(i1: int, i2: int) : int;

function $lshr.i56(i1: int, i2: int) : int;

function $lshr.i48(i1: int, i2: int) : int;

function $lshr.i40(i1: int, i2: int) : int;

function $lshr.i32(i1: int, i2: int) : int;

function $lshr.i24(i1: int, i2: int) : int;

function $lshr.i16(i1: int, i2: int) : int;

function $lshr.i8(i1: int, i2: int) : int;

function $lshr.i1(i1: int, i2: int) : int;

function $ashr.i128(i1: int, i2: int) : int;

function $ashr.i96(i1: int, i2: int) : int;

function $ashr.i88(i1: int, i2: int) : int;

function $ashr.i64(i1: int, i2: int) : int;

function $ashr.i56(i1: int, i2: int) : int;

function $ashr.i48(i1: int, i2: int) : int;

function $ashr.i40(i1: int, i2: int) : int;

function $ashr.i32(i1: int, i2: int) : int;

function $ashr.i24(i1: int, i2: int) : int;

function $ashr.i16(i1: int, i2: int) : int;

function $ashr.i8(i1: int, i2: int) : int;

function $ashr.i1(i1: int, i2: int) : int;

function $not.i128(i: int) : int;

function $not.i96(i: int) : int;

function $not.i88(i: int) : int;

function $not.i64(i: int) : int;

function $not.i56(i: int) : int;

function $not.i48(i: int) : int;

function $not.i40(i: int) : int;

function $not.i32(i: int) : int;

function $not.i24(i: int) : int;

function $not.i16(i: int) : int;

function $not.i8(i: int) : int;

function $not.i1(i: int) : int;

function $and.i128(i1: int, i2: int) : int;

function $and.i96(i1: int, i2: int) : int;

function $and.i88(i1: int, i2: int) : int;

function $and.i64(i1: int, i2: int) : int;

function $and.i56(i1: int, i2: int) : int;

function $and.i48(i1: int, i2: int) : int;

function $and.i40(i1: int, i2: int) : int;

function $and.i32(i1: int, i2: int) : int;

function $and.i24(i1: int, i2: int) : int;

function $and.i16(i1: int, i2: int) : int;

function $and.i8(i1: int, i2: int) : int;

function $and.i1(i1: int, i2: int) : int;

function $or.i128(i1: int, i2: int) : int;

function $or.i96(i1: int, i2: int) : int;

function $or.i88(i1: int, i2: int) : int;

function $or.i64(i1: int, i2: int) : int;

function $or.i56(i1: int, i2: int) : int;

function $or.i48(i1: int, i2: int) : int;

function $or.i40(i1: int, i2: int) : int;

function $or.i32(i1: int, i2: int) : int;

function $or.i24(i1: int, i2: int) : int;

function $or.i16(i1: int, i2: int) : int;

function $or.i8(i1: int, i2: int) : int;

function $or.i1(i1: int, i2: int) : int;

function $xor.i128(i1: int, i2: int) : int;

function $xor.i96(i1: int, i2: int) : int;

function $xor.i88(i1: int, i2: int) : int;

function $xor.i64(i1: int, i2: int) : int;

function $xor.i56(i1: int, i2: int) : int;

function $xor.i48(i1: int, i2: int) : int;

function $xor.i40(i1: int, i2: int) : int;

function $xor.i32(i1: int, i2: int) : int;

function $xor.i24(i1: int, i2: int) : int;

function $xor.i16(i1: int, i2: int) : int;

function $xor.i8(i1: int, i2: int) : int;

function $xor.i1(i1: int, i2: int) : int;

function $nand.i128(i1: int, i2: int) : int;

function $nand.i96(i1: int, i2: int) : int;

function $nand.i88(i1: int, i2: int) : int;

function $nand.i64(i1: int, i2: int) : int;

function $nand.i56(i1: int, i2: int) : int;

function $nand.i48(i1: int, i2: int) : int;

function $nand.i40(i1: int, i2: int) : int;

function $nand.i32(i1: int, i2: int) : int;

function $nand.i24(i1: int, i2: int) : int;

function $nand.i16(i1: int, i2: int) : int;

function $nand.i8(i1: int, i2: int) : int;

function $nand.i1(i1: int, i2: int) : int;

function {:inline} $eq.i128.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i96.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i88.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i64.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i56.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i48.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i40.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i32.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i24.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i16.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i8.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $eq.i1.bool(i1: int, i2: int) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: int, i2: int) : int
{
  (if i1 == i2 then 1 else NULL)
}

function {:inline} $ne.i128.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i96.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i88.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i64.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i56.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i48.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i40.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i32.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i24.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i16.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i8.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ne.i1.bool(i1: int, i2: int) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: int, i2: int) : int
{
  (if i1 != i2 then 1 else NULL)
}

function {:inline} $ule.i128.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i96.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i88.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i64.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i56.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i48.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i40.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i32.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i24.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i16.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i8.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ule.i1.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $ult.i128.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i96.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i88.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i64.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i56.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i48.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i40.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i32.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i24.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i16.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i8.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $ult.i1.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $uge.i128.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i96.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i88.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i64.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i56.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i48.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i40.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i32.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i24.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i16.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i8.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $uge.i1.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $ugt.i128.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i96.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i88.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i64.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i56.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i48.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i40.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i32.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i24.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i16.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i8.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $ugt.i1.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sle.i128.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i96.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i88.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i64.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i56.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i48.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i40.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i32.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i24.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i16.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i8.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $sle.i1.bool(i1: int, i2: int) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: int, i2: int) : int
{
  (if i1 <= i2 then 1 else NULL)
}

function {:inline} $slt.i128.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i96.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i88.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i64.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i56.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i48.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i40.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i32.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i24.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i16.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i8.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $slt.i1.bool(i1: int, i2: int) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: int, i2: int) : int
{
  (if i1 < i2 then 1 else NULL)
}

function {:inline} $sge.i128.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i96.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i88.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i64.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i56.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i48.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i40.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i32.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i24.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i16.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i8.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sge.i1.bool(i1: int, i2: int) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: int, i2: int) : int
{
  (if i1 >= i2 then 1 else NULL)
}

function {:inline} $sgt.i128.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i96.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i88.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i64.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i56.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i48.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i40.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i32.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i24.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i16.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i8.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

function {:inline} $sgt.i1.bool(i1: int, i2: int) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: int, i2: int) : int
{
  (if i1 > i2 then 1 else NULL)
}

axiom $and.i1(NULL, NULL) == NULL;

axiom $and.i1(NULL, 1) == NULL;

axiom $and.i1(1, NULL) == NULL;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(NULL, NULL) == NULL;

axiom $or.i1(NULL, 1) == 1;

axiom $or.i1(1, NULL) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(NULL, NULL) == NULL;

axiom $xor.i1(NULL, 1) == 1;

axiom $xor.i1(1, NULL) == 1;

axiom $xor.i1(1, 1) == NULL;

function {:inline} $trunc.i128.i96(i: int) : int
{
  i
}

function {:inline} $trunc.i128.i88(i: int) : int
{
  i
}

function {:inline} $trunc.i128.i64(i: int) : int
{
  i
}

function {:inline} $trunc.i128.i56(i: int) : int
{
  i
}

function {:inline} $trunc.i128.i48(i: int) : int
{
  i
}

function {:inline} $trunc.i128.i40(i: int) : int
{
  i
}

function {:inline} $trunc.i128.i32(i: int) : int
{
  i
}

function {:inline} $trunc.i128.i24(i: int) : int
{
  i
}

function {:inline} $trunc.i128.i16(i: int) : int
{
  i
}

function {:inline} $trunc.i128.i8(i: int) : int
{
  i
}

function {:inline} $trunc.i128.i1(i: int) : int
{
  i
}

function {:inline} $trunc.i96.i64(i: int) : int
{
  i
}

function {:inline} $trunc.i96.i88(i: int) : int
{
  i
}

function {:inline} $trunc.i96.i56(i: int) : int
{
  i
}

function {:inline} $trunc.i96.i48(i: int) : int
{
  i
}

function {:inline} $trunc.i96.i40(i: int) : int
{
  i
}

function {:inline} $trunc.i96.i32(i: int) : int
{
  i
}

function {:inline} $trunc.i96.i24(i: int) : int
{
  i
}

function {:inline} $trunc.i96.i16(i: int) : int
{
  i
}

function {:inline} $trunc.i96.i8(i: int) : int
{
  i
}

function {:inline} $trunc.i96.i1(i: int) : int
{
  i
}

function {:inline} $trunc.i88.i64(i: int) : int
{
  i
}

function {:inline} $trunc.i88.i88(i: int) : int
{
  i
}

function {:inline} $trunc.i88.i56(i: int) : int
{
  i
}

function {:inline} $trunc.i88.i48(i: int) : int
{
  i
}

function {:inline} $trunc.i88.i40(i: int) : int
{
  i
}

function {:inline} $trunc.i88.i32(i: int) : int
{
  i
}

function {:inline} $trunc.i88.i24(i: int) : int
{
  i
}

function {:inline} $trunc.i88.i16(i: int) : int
{
  i
}

function {:inline} $trunc.i88.i8(i: int) : int
{
  i
}

function {:inline} $trunc.i88.i1(i: int) : int
{
  i
}

function {:inline} $trunc.i64.i56(i: int) : int
{
  i
}

function {:inline} $trunc.i64.i48(i: int) : int
{
  i
}

function {:inline} $trunc.i64.i40(i: int) : int
{
  i
}

function {:inline} $trunc.i64.i32(i: int) : int
{
  i
}

function {:inline} $trunc.i64.i24(i: int) : int
{
  i
}

function {:inline} $trunc.i64.i16(i: int) : int
{
  i
}

function {:inline} $trunc.i64.i8(i: int) : int
{
  i
}

function {:inline} $trunc.i64.i1(i: int) : int
{
  i
}

function {:inline} $trunc.i56.i48(i: int) : int
{
  i
}

function {:inline} $trunc.i56.i40(i: int) : int
{
  i
}

function {:inline} $trunc.i56.i32(i: int) : int
{
  i
}

function {:inline} $trunc.i56.i24(i: int) : int
{
  i
}

function {:inline} $trunc.i56.i16(i: int) : int
{
  i
}

function {:inline} $trunc.i56.i8(i: int) : int
{
  i
}

function {:inline} $trunc.i56.i1(i: int) : int
{
  i
}

function {:inline} $trunc.i48.i40(i: int) : int
{
  i
}

function {:inline} $trunc.i48.i32(i: int) : int
{
  i
}

function {:inline} $trunc.i48.i24(i: int) : int
{
  i
}

function {:inline} $trunc.i48.i16(i: int) : int
{
  i
}

function {:inline} $trunc.i48.i8(i: int) : int
{
  i
}

function {:inline} $trunc.i48.i1(i: int) : int
{
  i
}

function {:inline} $trunc.i40.i32(i: int) : int
{
  i
}

function {:inline} $trunc.i40.i24(i: int) : int
{
  i
}

function {:inline} $trunc.i40.i16(i: int) : int
{
  i
}

function {:inline} $trunc.i40.i8(i: int) : int
{
  i
}

function {:inline} $trunc.i40.i1(i: int) : int
{
  i
}

function {:inline} $trunc.i32.i24(i: int) : int
{
  i
}

function {:inline} $trunc.i32.i16(i: int) : int
{
  i
}

function {:inline} $trunc.i32.i8(i: int) : int
{
  i
}

function {:inline} $trunc.i32.i1(i: int) : int
{
  i
}

function {:inline} $trunc.i24.i16(i: int) : int
{
  i
}

function {:inline} $trunc.i24.i8(i: int) : int
{
  i
}

function {:inline} $trunc.i24.i1(i: int) : int
{
  i
}

function {:inline} $trunc.i16.i8(i: int) : int
{
  i
}

function {:inline} $trunc.i16.i1(i: int) : int
{
  i
}

function {:inline} $trunc.i8.i1(i: int) : int
{
  i
}

function {:inline} $zext.i1.i8(i: int) : int
{
  i
}

function {:inline} $zext.i1.i16(i: int) : int
{
  i
}

function {:inline} $zext.i1.i24(i: int) : int
{
  i
}

function {:inline} $zext.i1.i32(i: int) : int
{
  i
}

function {:inline} $zext.i1.i40(i: int) : int
{
  i
}

function {:inline} $zext.i1.i48(i: int) : int
{
  i
}

function {:inline} $zext.i1.i56(i: int) : int
{
  i
}

function {:inline} $zext.i1.i64(i: int) : int
{
  i
}

function {:inline} $zext.i1.i88(i: int) : int
{
  i
}

function {:inline} $zext.i1.i96(i: int) : int
{
  i
}

function {:inline} $zext.i1.i128(i: int) : int
{
  i
}

function {:inline} $zext.i8.i16(i: int) : int
{
  i
}

function {:inline} $zext.i8.i24(i: int) : int
{
  i
}

function {:inline} $zext.i8.i32(i: int) : int
{
  i
}

function {:inline} $zext.i8.i40(i: int) : int
{
  i
}

function {:inline} $zext.i8.i48(i: int) : int
{
  i
}

function {:inline} $zext.i8.i56(i: int) : int
{
  i
}

function {:inline} $zext.i8.i64(i: int) : int
{
  i
}

function {:inline} $zext.i8.i88(i: int) : int
{
  i
}

function {:inline} $zext.i8.i96(i: int) : int
{
  i
}

function {:inline} $zext.i8.i128(i: int) : int
{
  i
}

function {:inline} $zext.i16.i24(i: int) : int
{
  i
}

function {:inline} $zext.i16.i32(i: int) : int
{
  i
}

function {:inline} $zext.i16.i40(i: int) : int
{
  i
}

function {:inline} $zext.i16.i48(i: int) : int
{
  i
}

function {:inline} $zext.i16.i56(i: int) : int
{
  i
}

function {:inline} $zext.i16.i64(i: int) : int
{
  i
}

function {:inline} $zext.i16.i88(i: int) : int
{
  i
}

function {:inline} $zext.i16.i96(i: int) : int
{
  i
}

function {:inline} $zext.i16.i128(i: int) : int
{
  i
}

function {:inline} $zext.i24.i32(i: int) : int
{
  i
}

function {:inline} $zext.i24.i40(i: int) : int
{
  i
}

function {:inline} $zext.i24.i48(i: int) : int
{
  i
}

function {:inline} $zext.i24.i56(i: int) : int
{
  i
}

function {:inline} $zext.i24.i64(i: int) : int
{
  i
}

function {:inline} $zext.i24.i88(i: int) : int
{
  i
}

function {:inline} $zext.i24.i96(i: int) : int
{
  i
}

function {:inline} $zext.i24.i128(i: int) : int
{
  i
}

function {:inline} $zext.i32.i40(i: int) : int
{
  i
}

function {:inline} $zext.i32.i48(i: int) : int
{
  i
}

function {:inline} $zext.i32.i56(i: int) : int
{
  i
}

function {:inline} $zext.i32.i64(i: int) : int
{
  i
}

function {:inline} $zext.i32.i88(i: int) : int
{
  i
}

function {:inline} $zext.i32.i96(i: int) : int
{
  i
}

function {:inline} $zext.i32.i128(i: int) : int
{
  i
}

function {:inline} $zext.i40.i48(i: int) : int
{
  i
}

function {:inline} $zext.i40.i56(i: int) : int
{
  i
}

function {:inline} $zext.i40.i64(i: int) : int
{
  i
}

function {:inline} $zext.i40.i88(i: int) : int
{
  i
}

function {:inline} $zext.i40.i96(i: int) : int
{
  i
}

function {:inline} $zext.i40.i128(i: int) : int
{
  i
}

function {:inline} $zext.i48.i56(i: int) : int
{
  i
}

function {:inline} $zext.i48.i64(i: int) : int
{
  i
}

function {:inline} $zext.i48.i88(i: int) : int
{
  i
}

function {:inline} $zext.i48.i96(i: int) : int
{
  i
}

function {:inline} $zext.i48.i128(i: int) : int
{
  i
}

function {:inline} $zext.i56.i64(i: int) : int
{
  i
}

function {:inline} $zext.i56.i88(i: int) : int
{
  i
}

function {:inline} $zext.i56.i96(i: int) : int
{
  i
}

function {:inline} $zext.i56.i128(i: int) : int
{
  i
}

function {:inline} $zext.i64.i88(i: int) : int
{
  i
}

function {:inline} $zext.i64.i96(i: int) : int
{
  i
}

function {:inline} $zext.i64.i128(i: int) : int
{
  i
}

function {:inline} $zext.i88.i96(i: int) : int
{
  i
}

function {:inline} $zext.i88.i128(i: int) : int
{
  i
}

function {:inline} $zext.i96.i128(i: int) : int
{
  i
}

function {:inline} $sext.i1.i8(i: int) : int
{
  i
}

function {:inline} $sext.i1.i16(i: int) : int
{
  i
}

function {:inline} $sext.i1.i24(i: int) : int
{
  i
}

function {:inline} $sext.i1.i32(i: int) : int
{
  i
}

function {:inline} $sext.i1.i40(i: int) : int
{
  i
}

function {:inline} $sext.i1.i48(i: int) : int
{
  i
}

function {:inline} $sext.i1.i56(i: int) : int
{
  i
}

function {:inline} $sext.i1.i64(i: int) : int
{
  i
}

function {:inline} $sext.i1.i88(i: int) : int
{
  i
}

function {:inline} $sext.i1.i96(i: int) : int
{
  i
}

function {:inline} $sext.i1.i128(i: int) : int
{
  i
}

function {:inline} $sext.i8.i16(i: int) : int
{
  i
}

function {:inline} $sext.i8.i24(i: int) : int
{
  i
}

function {:inline} $sext.i8.i32(i: int) : int
{
  i
}

function {:inline} $sext.i8.i40(i: int) : int
{
  i
}

function {:inline} $sext.i8.i48(i: int) : int
{
  i
}

function {:inline} $sext.i8.i56(i: int) : int
{
  i
}

function {:inline} $sext.i8.i64(i: int) : int
{
  i
}

function {:inline} $sext.i8.i88(i: int) : int
{
  i
}

function {:inline} $sext.i8.i96(i: int) : int
{
  i
}

function {:inline} $sext.i8.i128(i: int) : int
{
  i
}

function {:inline} $sext.i16.i24(i: int) : int
{
  i
}

function {:inline} $sext.i16.i32(i: int) : int
{
  i
}

function {:inline} $sext.i16.i40(i: int) : int
{
  i
}

function {:inline} $sext.i16.i48(i: int) : int
{
  i
}

function {:inline} $sext.i16.i56(i: int) : int
{
  i
}

function {:inline} $sext.i16.i64(i: int) : int
{
  i
}

function {:inline} $sext.i16.i88(i: int) : int
{
  i
}

function {:inline} $sext.i16.i96(i: int) : int
{
  i
}

function {:inline} $sext.i16.i128(i: int) : int
{
  i
}

function {:inline} $sext.i24.i32(i: int) : int
{
  i
}

function {:inline} $sext.i24.i40(i: int) : int
{
  i
}

function {:inline} $sext.i24.i48(i: int) : int
{
  i
}

function {:inline} $sext.i24.i56(i: int) : int
{
  i
}

function {:inline} $sext.i24.i64(i: int) : int
{
  i
}

function {:inline} $sext.i24.i88(i: int) : int
{
  i
}

function {:inline} $sext.i24.i96(i: int) : int
{
  i
}

function {:inline} $sext.i24.i128(i: int) : int
{
  i
}

function {:inline} $sext.i32.i40(i: int) : int
{
  i
}

function {:inline} $sext.i32.i48(i: int) : int
{
  i
}

function {:inline} $sext.i32.i56(i: int) : int
{
  i
}

function {:inline} $sext.i32.i64(i: int) : int
{
  i
}

function {:inline} $sext.i32.i88(i: int) : int
{
  i
}

function {:inline} $sext.i32.i96(i: int) : int
{
  i
}

function {:inline} $sext.i32.i128(i: int) : int
{
  i
}

function {:inline} $sext.i40.i48(i: int) : int
{
  i
}

function {:inline} $sext.i40.i56(i: int) : int
{
  i
}

function {:inline} $sext.i40.i64(i: int) : int
{
  i
}

function {:inline} $sext.i40.i88(i: int) : int
{
  i
}

function {:inline} $sext.i40.i96(i: int) : int
{
  i
}

function {:inline} $sext.i40.i128(i: int) : int
{
  i
}

function {:inline} $sext.i48.i56(i: int) : int
{
  i
}

function {:inline} $sext.i48.i64(i: int) : int
{
  i
}

function {:inline} $sext.i48.i88(i: int) : int
{
  i
}

function {:inline} $sext.i48.i96(i: int) : int
{
  i
}

function {:inline} $sext.i48.i128(i: int) : int
{
  i
}

function {:inline} $sext.i56.i64(i: int) : int
{
  i
}

function {:inline} $sext.i56.i88(i: int) : int
{
  i
}

function {:inline} $sext.i56.i96(i: int) : int
{
  i
}

function {:inline} $sext.i56.i128(i: int) : int
{
  i
}

function {:inline} $sext.i64.i88(i: int) : int
{
  i
}

function {:inline} $sext.i64.i96(i: int) : int
{
  i
}

function {:inline} $sext.i64.i128(i: int) : int
{
  i
}

function {:inline} $sext.i88.i96(i: int) : int
{
  i
}

function {:inline} $sext.i88.i128(i: int) : int
{
  i
}

function {:inline} $sext.i96.i128(i: int) : int
{
  i
}

function $fp(ipart: int, fpart: int, epart: int) : int;

function $fadd.float(f1: int, f2: int) : int;

function $fsub.float(f1: int, f2: int) : int;

function $fmul.float(f1: int, f2: int) : int;

function $fdiv.float(f1: int, f2: int) : int;

function $frem.float(f1: int, f2: int) : int;

function $ffalse.float(f1: int, f2: int) : int;

function $ftrue.float(f1: int, f2: int) : int;

function {:inline} $foeq.float(f1: int, f2: int) : int
{
  (if $foeq.bool(f1, f2) then 1 else NULL)
}

function $foeq.bool(f1: int, f2: int) : bool;

function $foge.float(f1: int, f2: int) : int;

function $fogt.float(f1: int, f2: int) : int;

function $fole.float(f1: int, f2: int) : int;

function $folt.float(f1: int, f2: int) : int;

function $fone.float(f1: int, f2: int) : int;

function $ford.float(f1: int, f2: int) : int;

function $fueq.float(f1: int, f2: int) : int;

function $fuge.float(f1: int, f2: int) : int;

function $fugt.float(f1: int, f2: int) : int;

function $fule.float(f1: int, f2: int) : int;

function $fult.float(f1: int, f2: int) : int;

function $fune.float(f1: int, f2: int) : int;

function $funo.float(f1: int, f2: int) : int;

function $fp2si.float.i128(f: int) : int;

function $fp2ui.float.i128(f: int) : int;

function $si2fp.i128.float(i: int) : int;

function $ui2fp.i128.float(i: int) : int;

function $fp2si.float.i96(f: int) : int;

function $fp2ui.float.i96(f: int) : int;

function $si2fp.i96.float(i: int) : int;

function $ui2fp.i96.float(i: int) : int;

function $fp2si.float.i88(f: int) : int;

function $fp2ui.float.i88(f: int) : int;

function $si2fp.i88.float(i: int) : int;

function $ui2fp.i88.float(i: int) : int;

function $fp2si.float.i64(f: int) : int;

function $fp2ui.float.i64(f: int) : int;

function $si2fp.i64.float(i: int) : int;

function $ui2fp.i64.float(i: int) : int;

function $fp2si.float.i56(f: int) : int;

function $fp2ui.float.i56(f: int) : int;

function $si2fp.i56.float(i: int) : int;

function $ui2fp.i56.float(i: int) : int;

function $fp2si.float.i48(f: int) : int;

function $fp2ui.float.i48(f: int) : int;

function $si2fp.i48.float(i: int) : int;

function $ui2fp.i48.float(i: int) : int;

function $fp2si.float.i40(f: int) : int;

function $fp2ui.float.i40(f: int) : int;

function $si2fp.i40.float(i: int) : int;

function $ui2fp.i40.float(i: int) : int;

function $fp2si.float.i32(f: int) : int;

function $fp2ui.float.i32(f: int) : int;

function $si2fp.i32.float(i: int) : int;

function $ui2fp.i32.float(i: int) : int;

function $fp2si.float.i24(f: int) : int;

function $fp2ui.float.i24(f: int) : int;

function $si2fp.i24.float(i: int) : int;

function $ui2fp.i24.float(i: int) : int;

function $fp2si.float.i16(f: int) : int;

function $fp2ui.float.i16(f: int) : int;

function $si2fp.i16.float(i: int) : int;

function $ui2fp.i16.float(i: int) : int;

function $fp2si.float.i8(f: int) : int;

function $fp2ui.float.i8(f: int) : int;

function $si2fp.i8.float(i: int) : int;

function $ui2fp.i8.float(i: int) : int;

function $fptrunc.float.float(f: int) : int;

function $fpext.float.float(f: int) : int;

function $fp2si.float.bv128(f: int) : bv128;

function $fp2ui.float.bv128(f: int) : bv128;

function $si2fp.bv128.float(i: bv128) : int;

function $ui2fp.bv128.float(i: bv128) : int;

function $fp2si.float.bv96(f: int) : bv96;

function $fp2ui.float.bv96(f: int) : bv96;

function $si2fp.bv96.float(i: bv96) : int;

function $ui2fp.bv96.float(i: bv96) : int;

function $fp2si.float.bv88(f: int) : bv88;

function $fp2ui.float.bv88(f: int) : bv88;

function $si2fp.bv88.float(i: bv88) : int;

function $ui2fp.bv88.float(i: bv88) : int;

function $fp2si.float.bv64(f: int) : bv64;

function $fp2ui.float.bv64(f: int) : bv64;

function $si2fp.bv64.float(i: bv64) : int;

function $ui2fp.bv64.float(i: bv64) : int;

function $fp2si.float.bv56(f: int) : bv56;

function $fp2ui.float.bv56(f: int) : bv56;

function $si2fp.bv56.float(i: bv56) : int;

function $ui2fp.bv56.float(i: bv56) : int;

function $fp2si.float.bv48(f: int) : bv48;

function $fp2ui.float.bv48(f: int) : bv48;

function $si2fp.bv48.float(i: bv48) : int;

function $ui2fp.bv48.float(i: bv48) : int;

function $fp2si.float.bv40(f: int) : bv40;

function $fp2ui.float.bv40(f: int) : bv40;

function $si2fp.bv40.float(i: bv40) : int;

function $ui2fp.bv40.float(i: bv40) : int;

function $fp2si.float.bv32(f: int) : bv32;

function $fp2ui.float.bv32(f: int) : bv32;

function $si2fp.bv32.float(i: bv32) : int;

function $ui2fp.bv32.float(i: bv32) : int;

function $fp2si.float.bv24(f: int) : bv24;

function $fp2ui.float.bv24(f: int) : bv24;

function $si2fp.bv24.float(i: bv24) : int;

function $ui2fp.bv24.float(i: bv24) : int;

function $fp2si.float.bv16(f: int) : bv16;

function $fp2ui.float.bv16(f: int) : bv16;

function $si2fp.bv16.float(i: bv16) : int;

function $ui2fp.bv16.float(i: bv16) : int;

function $fp2si.float.bv8(f: int) : bv8;

function $fp2ui.float.bv8(f: int) : bv8;

function $si2fp.bv8.float(i: bv8) : int;

function $ui2fp.bv8.float(i: bv8) : int;

axiom (forall f1: int, f2: int :: f1 != f2 || $foeq.bool(f1, f2));

axiom (forall i: int :: $fp2ui.float.i128($ui2fp.i128.float(i)) == i);

axiom (forall f: int :: $ui2fp.i128.float($fp2ui.float.i128(f)) == f);

axiom (forall i: int :: $fp2si.float.i128($si2fp.i128.float(i)) == i);

axiom (forall f: int :: $si2fp.i128.float($fp2si.float.i128(f)) == f);

axiom (forall i: int :: $fp2ui.float.i96($ui2fp.i96.float(i)) == i);

axiom (forall f: int :: $ui2fp.i96.float($fp2ui.float.i96(f)) == f);

axiom (forall i: int :: $fp2si.float.i96($si2fp.i96.float(i)) == i);

axiom (forall f: int :: $si2fp.i96.float($fp2si.float.i96(f)) == f);

axiom (forall i: int :: $fp2ui.float.i88($ui2fp.i88.float(i)) == i);

axiom (forall f: int :: $ui2fp.i88.float($fp2ui.float.i88(f)) == f);

axiom (forall i: int :: $fp2si.float.i88($si2fp.i88.float(i)) == i);

axiom (forall f: int :: $si2fp.i88.float($fp2si.float.i88(f)) == f);

axiom (forall i: int :: $fp2ui.float.i64($ui2fp.i64.float(i)) == i);

axiom (forall f: int :: $ui2fp.i64.float($fp2ui.float.i64(f)) == f);

axiom (forall i: int :: $fp2si.float.i64($si2fp.i64.float(i)) == i);

axiom (forall f: int :: $si2fp.i64.float($fp2si.float.i64(f)) == f);

axiom (forall i: int :: $fp2ui.float.i56($ui2fp.i56.float(i)) == i);

axiom (forall f: int :: $ui2fp.i56.float($fp2ui.float.i56(f)) == f);

axiom (forall i: int :: $fp2si.float.i56($si2fp.i56.float(i)) == i);

axiom (forall f: int :: $si2fp.i56.float($fp2si.float.i56(f)) == f);

axiom (forall i: int :: $fp2ui.float.i48($ui2fp.i48.float(i)) == i);

axiom (forall f: int :: $ui2fp.i48.float($fp2ui.float.i48(f)) == f);

axiom (forall i: int :: $fp2si.float.i48($si2fp.i48.float(i)) == i);

axiom (forall f: int :: $si2fp.i48.float($fp2si.float.i48(f)) == f);

axiom (forall i: int :: $fp2ui.float.i40($ui2fp.i40.float(i)) == i);

axiom (forall f: int :: $ui2fp.i40.float($fp2ui.float.i40(f)) == f);

axiom (forall i: int :: $fp2si.float.i40($si2fp.i40.float(i)) == i);

axiom (forall f: int :: $si2fp.i40.float($fp2si.float.i40(f)) == f);

axiom (forall i: int :: $fp2ui.float.i32($ui2fp.i32.float(i)) == i);

axiom (forall f: int :: $ui2fp.i32.float($fp2ui.float.i32(f)) == f);

axiom (forall i: int :: $fp2si.float.i32($si2fp.i32.float(i)) == i);

axiom (forall f: int :: $si2fp.i32.float($fp2si.float.i32(f)) == f);

axiom (forall i: int :: $fp2ui.float.i24($ui2fp.i24.float(i)) == i);

axiom (forall f: int :: $ui2fp.i24.float($fp2ui.float.i24(f)) == f);

axiom (forall i: int :: $fp2si.float.i24($si2fp.i24.float(i)) == i);

axiom (forall f: int :: $si2fp.i24.float($fp2si.float.i24(f)) == f);

axiom (forall i: int :: $fp2ui.float.i16($ui2fp.i16.float(i)) == i);

axiom (forall f: int :: $ui2fp.i16.float($fp2ui.float.i16(f)) == f);

axiom (forall i: int :: $fp2si.float.i16($si2fp.i16.float(i)) == i);

axiom (forall f: int :: $si2fp.i16.float($fp2si.float.i16(f)) == f);

axiom (forall i: int :: $fp2ui.float.i8($ui2fp.i8.float(i)) == i);

axiom (forall f: int :: $ui2fp.i8.float($fp2ui.float.i8(f)) == f);

axiom (forall i: int :: $fp2si.float.i8($si2fp.i8.float(i)) == i);

axiom (forall f: int :: $si2fp.i8.float($fp2si.float.i8(f)) == f);

const $GLOBALS_BOTTOM: int;

const $EXTERNS_BOTTOM: int;

function $base(int) : int;

function {:inline} $isExternal(p: int) : bool
{
  p < $EXTERNS_BOTTOM
}

function {:inline} $load.i128(M: [ref]i128, p: int) : int
{
  M[p]
}

function {:inline} $load.i96(M: [ref]i96, p: int) : int
{
  M[p]
}

function {:inline} $load.i88(M: [ref]i88, p: int) : int
{
  M[p]
}

function {:inline} $load.i64(M: [ref]i64, p: int) : int
{
  M[p]
}

function {:inline} $load.i56(M: [ref]i56, p: int) : int
{
  M[p]
}

function {:inline} $load.i48(M: [ref]i48, p: int) : int
{
  M[p]
}

function {:inline} $load.i40(M: [ref]i40, p: int) : int
{
  M[p]
}

function {:inline} $load.i32(M: [ref]i32, p: int) : int
{
  M[p]
}

function {:inline} $load.i24(M: [ref]i24, p: int) : int
{
  M[p]
}

function {:inline} $load.i16(M: [ref]i16, p: int) : int
{
  M[p]
}

function {:inline} $load.i8(M: [ref]i8, p: int) : int
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: int) : bv128
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: int) : bv96
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: int) : bv88
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: int) : bv64
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: int) : bv56
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: int) : bv48
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: int) : bv40
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: int) : bv32
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: int) : bv24
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: int) : bv16
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: int) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: int) : bv128
{
  M[p + 8 + 4 + 3] ++ M[p + 8 + 4 + 2] ++ M[p + 8 + 4 + 1] ++ M[p + 8 + 4] ++ (M[p + 8 + 3] ++ M[p + 8 + 2] ++ M[p + 8 + 1] ++ M[p + 8]) ++ (M[p + 4 + 3] ++ M[p + 4 + 2] ++ M[p + 4 + 1] ++ M[p + 4] ++ (M[p + 3] ++ M[p + 2] ++ M[p + 1] ++ M[p]))
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: int) : bv96
{
  M[p + 4 + 4 + 3] ++ M[p + 4 + 4 + 2] ++ M[p + 4 + 4 + 1] ++ M[p + 4 + 4] ++ (M[p + 4 + 3] ++ M[p + 4 + 2] ++ M[p + 4 + 1] ++ M[p + 4]) ++ (M[p + 3] ++ M[p + 2] ++ M[p + 1] ++ M[p])
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: int) : bv88
{
  M[p + 4 + 4 + 2] ++ M[p + 4 + 4 + 1] ++ M[p + 4 + 4] ++ (M[p + 4 + 3] ++ M[p + 4 + 2] ++ M[p + 4 + 1] ++ M[p + 4]) ++ (M[p + 3] ++ M[p + 2] ++ M[p + 1] ++ M[p])
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: int) : bv64
{
  M[p + 4 + 3] ++ M[p + 4 + 2] ++ M[p + 4 + 1] ++ M[p + 4] ++ (M[p + 3] ++ M[p + 2] ++ M[p + 1] ++ M[p])
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: int) : bv56
{
  M[p + 4 + 2] ++ M[p + 4 + 1] ++ M[p + 4] ++ (M[p + 3] ++ M[p + 2] ++ M[p + 1] ++ M[p])
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: int) : bv48
{
  M[p + 4 + 1] ++ M[p + 4] ++ (M[p + 3] ++ M[p + 2] ++ M[p + 1] ++ M[p])
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: int) : bv40
{
  M[p + 4] ++ (M[p + 3] ++ M[p + 2] ++ M[p + 1] ++ M[p])
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: int) : bv32
{
  M[p + 3] ++ M[p + 2] ++ M[p + 1] ++ M[p]
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: int) : bv24
{
  M[p + 2] ++ M[p + 1] ++ M[p]
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: int) : bv16
{
  M[p + 1] ++ M[p]
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: int) : bv8
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: int, v: int) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.i96(M: [ref]i96, p: int, v: int) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.i88(M: [ref]i88, p: int, v: int) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.i64(M: [ref]i64, p: int, v: int) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.i56(M: [ref]i56, p: int, v: int) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.i48(M: [ref]i48, p: int, v: int) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.i40(M: [ref]i40, p: int, v: int) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.i32(M: [ref]i32, p: int, v: int) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.i24(M: [ref]i24, p: int, v: int) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.i16(M: [ref]i16, p: int, v: int) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.i8(M: [ref]i8, p: int, v: int) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: int, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: int, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: int, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: int, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: int, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: int, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: int, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: int, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: int, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: int, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: int, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: int, v: bv128) : [ref]bv8
{
  M[p := v[8:0]][p + 1 := v[16:8]][p + 2 := v[24:16]][p + 3 := v[32:24]][p + 4 := v[40:32]][p + 5 := v[48:40]][p + 6 := v[56:48]][p + 7 := v[64:56]][p + 7 := v[72:64]][p + 8 := v[80:72]][p + 9 := v[88:80]][p + 10 := v[96:88]][p + 11 := v[104:96]][p + 12 := v[112:104]][p + 13 := v[120:112]][p + 14 := v[128:120]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: int, v: bv96) : [ref]bv8
{
  M[p := v[8:0]][p + 1 := v[16:8]][p + 2 := v[24:16]][p + 3 := v[32:24]][p + 4 := v[40:32]][p + 5 := v[48:40]][p + 6 := v[56:48]][p + 7 := v[64:56]][p + 7 := v[72:64]][p + 8 := v[80:72]][p + 9 := v[88:80]][p + 10 := v[96:88]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: int, v: bv88) : [ref]bv8
{
  M[p := v[8:0]][p + 1 := v[16:8]][p + 2 := v[24:16]][p + 3 := v[32:24]][p + 4 := v[40:32]][p + 5 := v[48:40]][p + 6 := v[56:48]][p + 7 := v[64:56]][p + 7 := v[72:64]][p + 8 := v[80:72]][p + 9 := v[88:80]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: int, v: bv64) : [ref]bv8
{
  M[p := v[8:0]][p + 1 := v[16:8]][p + 2 := v[24:16]][p + 3 := v[32:24]][p + 4 := v[40:32]][p + 5 := v[48:40]][p + 6 := v[56:48]][p + 7 := v[64:56]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: int, v: bv56) : [ref]bv8
{
  M[p := v[8:0]][p + 1 := v[16:8]][p + 2 := v[24:16]][p + 3 := v[32:24]][p + 4 := v[40:32]][p + 5 := v[48:40]][p + 6 := v[56:48]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: int, v: bv48) : [ref]bv8
{
  M[p := v[8:0]][p + 1 := v[16:8]][p + 2 := v[24:16]][p + 3 := v[32:24]][p + 4 := v[40:32]][p + 5 := v[48:40]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: int, v: bv40) : [ref]bv8
{
  M[p := v[8:0]][p + 1 := v[16:8]][p + 2 := v[24:16]][p + 3 := v[32:24]][p + 4 := v[40:32]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: int, v: bv32) : [ref]bv8
{
  M[p := v[8:0]][p + 1 := v[16:8]][p + 2 := v[24:16]][p + 3 := v[32:24]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: int, v: bv24) : [ref]bv8
{
  M[p := v[8:0]][p + 1 := v[16:8]][p + 2 := v[24:16]]
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: int, v: bv16) : [ref]bv8
{
  M[p := v[8:0]][p + 1 := v[16:8]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: int, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $load.ref(M: [ref]ref, p: int) : int
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: int, v: int) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: int) : int
{
  M[p]
}

function {:inline} $store.float(M: [ref]float, p: int, v: int) : [ref]float
{
  M[p := v]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

procedure boogie_si_record_bool(i: bool);



procedure boogie_si_record_i1(i: int);



procedure boogie_si_record_i8(i: int);



procedure boogie_si_record_i16(i: int);



procedure boogie_si_record_i24(i: int);



procedure boogie_si_record_i32(i: int);



procedure boogie_si_record_i40(i: int);



procedure boogie_si_record_i48(i: int);



procedure boogie_si_record_i56(i: int);



procedure boogie_si_record_i64(i: int);



procedure boogie_si_record_i88(i: int);



procedure boogie_si_record_i96(i: int);



procedure boogie_si_record_i128(i: int);



procedure boogie_si_record_bv1(i: bv1);



procedure boogie_si_record_bv8(i: bv8);



procedure boogie_si_record_bv16(i: bv16);



procedure boogie_si_record_bv24(i: bv24);



procedure boogie_si_record_bv32(i: bv32);



procedure boogie_si_record_bv40(i: bv40);



procedure boogie_si_record_bv48(i: bv48);



procedure boogie_si_record_bv56(i: bv56);



procedure boogie_si_record_bv64(i: bv64);



procedure boogie_si_record_bv88(i: bv88);



procedure boogie_si_record_bv96(i: bv96);



procedure boogie_si_record_bv128(i: bv128);



procedure boogie_si_record_ref(i: int);



procedure boogie_si_record_float(i: int);



var $Alloc: [ref]bool;

function $Size(int) : int;

var {:AllocatorVar} $CurrAddr: int;

procedure {:allocator} $alloc(n: int) returns (p: int);
  modifies $CurrAddr, $Alloc;



implementation $alloc(n: int) returns (p: int)
{

  anon0:
    assume $CurrAddr > NULL;
    p := $CurrAddr;
    goto anon4_Then, anon4_Else;

  anon4_Then:
    assume {:partition} n > NULL;
    $CurrAddr := $CurrAddr + n;
    goto anon3;

  anon4_Else:
    assume {:partition} !(n > NULL);
    $CurrAddr := $CurrAddr + 1;
    goto anon3;

  anon3:
    $Alloc[p] := true;
    assume $Size(p) == n;
    assume n >= NULL ==> (forall q: int :: { $base(q) } p <= q && q < p + n ==> $base(q) == p);
    return;
}



procedure {:inline 1} $free(p: int);
  modifies $Alloc;



implementation {:inline 1} $free(p: int)
{

  anon0:
    $Alloc[p] := false;
    return;
}



var $exn: bool;

var $exnv: int;

function $extractvalue(p: int, i: int) : int;

const __SMACK_top_decl: int;

axiom __SMACK_top_decl == NULL - 5024;

procedure __SMACK_top_decl.ref($p0: int);



const __SMACK_init_func_memory_model: int;

axiom __SMACK_init_func_memory_model == NULL - 5032;

procedure __SMACK_init_func_memory_model();



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 3} true;
    $CurrAddr := 1024;
    assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1129, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI18vehicle_attitude_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI18vehicle_attitude_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5040;

procedure _ZN4uORB11PublicationI18vehicle_attitude_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI18vehicle_attitude_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ0($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ1($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ2($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ3($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ4($p6 + 12, NULL);
    $M.1[$p6 + 12] := NULL;
    assert !aliasQ5($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ6($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assert !aliasQ7($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ8($p6 + 28, NULL);
    $M.1[$p6 + 28] := NULL;
    assert !aliasQ9($p6 + 32, NULL);
    $M.1[$p6 + 32] := NULL;
    assert !aliasQ10($p6 + 36, NULL);
    $M.1[$p6 + 36] := NULL;
    assert !aliasQ11($p6 + 40, NULL);
    $M.1[$p6 + 40] := NULL;
    assert !aliasQ12($p6 + 44, NULL);
    $M.1[$p6 + 44] := NULL;
    assert !aliasQ13($p6 + 48, NULL);
    $M.1[$p6 + 48] := NULL;
    assert !aliasQ14($p6 + 52, NULL);
    $M.1[$p6 + 52] := NULL;
    assert !aliasQ15($p6 + 56, NULL);
    $M.1[$p6 + 56] := NULL;
    assert !aliasQ16($p6 + 60, NULL);
    $M.1[$p6 + 60] := NULL;
    assert !aliasQ17($p6 + 64, NULL);
    $M.1[$p6 + 64] := NULL;
    assert !aliasQ18($p6 + 68, NULL);
    $M.1[$p6 + 68] := NULL;
    assert !aliasQ19($p6 + 72, NULL);
    $M.1[$p6 + 72] := NULL;
    assert !aliasQ20($p6 + 76, NULL);
    $M.1[$p6 + 76] := NULL;
    assert !aliasQ21($p6 + 80, NULL);
    $M.1[$p6 + 80] := NULL;
    assert !aliasQ22($p6 + 84, NULL);
    $M.1[$p6 + 84] := NULL;
    assert !aliasQ23($p6 + 88, NULL);
    $M.1[$p6 + 88] := NULL;
    assert !aliasQ24($p6 + 92, NULL);
    $M.1[$p6 + 92] := NULL;
    assert !aliasQ25($p6 + 96, NULL);
    $M.1[$p6 + 96] := NULL;
    assert !aliasQ26($p6 + 100, NULL);
    $M.1[$p6 + 100] := NULL;
    assert !aliasQ27($p6 + 104, NULL);
    $M.1[$p6 + 104] := NULL;
    assert !aliasQ28($p6 + 108, NULL);
    $M.1[$p6 + 108] := NULL;
    assert !aliasQ29($p6 + 112, NULL);
    $M.1[$p6 + 112] := NULL;
    assert !aliasQ30($p6 + 116, NULL);
    $M.1[$p6 + 116] := NULL;
    assert !aliasQ31($p6 + 120, NULL);
    $M.1[$p6 + 120] := NULL;
    assert !aliasQ32($p6 + 124, NULL);
    $M.1[$p6 + 124] := NULL;
    assert !aliasQ33($p6 + 128, NULL);
    $M.1[$p6 + 128] := NULL;
    assert !aliasQ34($p6 + 132, NULL);
    $M.1[$p6 + 132] := NULL;
    assert !aliasQ35($p6 + 133, NULL);
    $M.1[$p6 + 133] := NULL;
    assert !aliasQ36($p6 + 134, NULL);
    $M.1[$p6 + 134] := NULL;
    assert !aliasQ37($p6 + 135, NULL);
    $M.1[$p6 + 135] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E: int;

axiom _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E == NULL - 5048;

procedure _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var {:base "$p5"} $p6: int;
  var $p7: int;
  var {:scalar} $i8: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    call _ZN4uORB15PublicationBaseC2EPK12orb_metadatai($p0, meta, priority);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    $p2 := $p1 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    $p3 := $p2;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    call _ZN8ListNodeIPN4uORB15PublicationNodeEEC2Ev($p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    $p4 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    assert !aliasQ38($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB15PublicationNodeE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    $p5 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    $p6 := $p5 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    $p7 := $p6;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 106, 1} true;
    assert !aliasQ39($p7, NULL);
    $M.0 := $M.0[$p7 := _ZTVN4uORB15PublicationNodeE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 107, 6} true;
    $i8 := (if list != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 107, 6} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i8 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 107, 25} true;
    call _ZN4ListIPN4uORB15PublicationNodeEE3addES2_(list, this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 107, 42} true;
    goto $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 107, 6} true;
    assume {:partition} !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 108, 1} true;
    $exn := false;
    return;
}



const llvm.memset.p0i8.i64: int;

axiom llvm.memset.p0i8.i64 == NULL - 5056;

procedure llvm.memset.p0i8.i64($p0: int, {:scalar} $i1: int, {:scalar} $i2: int, {:scalar} $i3: int, {:scalar} $i4: int);



const _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev: int;

axiom _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev == NULL - 5064;

procedure _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED1Ev == NULL - 5072;

procedure _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI18vehicle_attitude_sED0Ev: int;

axiom _ZN4uORB11PublicationI18vehicle_attitude_sED0Ev == NULL - 5080;

procedure _ZN4uORB11PublicationI18vehicle_attitude_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI18vehicle_attitude_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZdlPv: int;

axiom _ZdlPv == NULL - 5088;

procedure _ZdlPv($p0: int);



const _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED0Ev == NULL - 5096;

procedure _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI18vehicle_attitude_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI18vehicle_attitude_sE3getEv: int;

axiom _ZN4uORB11PublicationI18vehicle_attitude_sE3getEv == NULL - 5104;

procedure _ZN4uORB11PublicationI18vehicle_attitude_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI18vehicle_attitude_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI18vehicle_attitude_sE6updateEv: int;

axiom _ZN4uORB11PublicationI18vehicle_attitude_sE6updateEv == NULL - 5112;

procedure _ZN4uORB11PublicationI18vehicle_attitude_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI18vehicle_attitude_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB15PublicationBase6updateEPv: int;

axiom _ZN4uORB15PublicationBase6updateEPv == NULL - 5120;

procedure _ZN4uORB15PublicationBase6updateEPv(this: int, data: int);



implementation _ZN4uORB15PublicationBase6updateEPv(this: int, data: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:scalar} $i2: int;
  var $p3: int;
  var $p4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;
  var {:base "this"} $p7: int;
  var {:scalar} $i8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var {:base "this"} $p11: int;
  var {:base "this"} $p12: int;
  var {:scalar} $i13: int;
  var $p14: int;
  var $p16: int;
  var $p15: int;
  var {:scalar} $i17: int;
  var {:scalar} $i18: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "data"} boogie_si_record_ref(data);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 71, 6} true;
    $p0 := this + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 71, 6} true;
    assert !aliasQ40(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 71, 6} true;
    $i2 := (if $p1 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 71, 6} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i2 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 72, 25} true;
    call $p3 := _ZN4uORB15PublicationBase7getMetaEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 72, 36} true;
    call $p4 := _ZN4uORB15PublicationBase9getHandleEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 72, 13} true;
    call $i5 := orb_publish($p3, $p4, data);
    call {:cexpr "ret"} boogie_si_record_i32($i5);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 74, 7} true;
    $i6 := (if $i5 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 74, 7} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb2:
    assume {:partition} !($i2 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 79, 7} true;
    $p7 := this + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 79, 7} true;
    assert !aliasQ41(this, NULL);
    $i8 := $M.2[$p7];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 79, 7} true;
    $i9 := (if $i8 > NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 81, 7} true;
    call $p10 := _ZN4uORB15PublicationBase7getMetaEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 79, 7} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb3:
    assume {:partition} $i6 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 74, 24} true;
    call px4_log_modulename.i32.ref.ref(2, .str1413, .str11414);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 74, 47} true;
    goto $bb5;

  $bb4:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 74, 7} true;
    assume {:partition} !($i6 == 1);
    goto $bb5;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 95, 1} true;
    $exn := false;
    return;

  $bb6:
    assume {:partition} $i9 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 82, 7} true;
    $p11 := this + 20;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 82, 19} true;
    $p12 := this + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 82, 19} true;
    assert !aliasQ42(this, NULL);
    $i13 := $M.2[$p12];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 80, 13} true;
    call $p14 := orb_advertise_multi($p10, data, $p11, $i13);
    call {:cexpr "handle"} boogie_si_record_ref($p14);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 84, 3} true;
    $p15 := $p14;
    goto $bb8;

  $bb7:
    assume {:partition} !($i9 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 85, 13} true;
    call $p16 := orb_advertise($p10, data);
    call {:cexpr "handle"} boogie_si_record_ref($p16);
    $p15 := $p16;
    goto $bb8;

  $bb8:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 88, 7} true;
    $i17 := $p15;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 88, 7} true;
    $i18 := (if $i17 != NULL - 1 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 88, 7} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb9:
    assume {:partition} $i18 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 89, 4} true;
    call _ZN4uORB15PublicationBase9setHandleEPv(this, $p15);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 91, 3} true;
    goto $bb5;

  $bb10:
    assume {:partition} !($i18 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 92, 4} true;
    call px4_log_modulename.i32.ref.ref(2, .str1413, .str21415);
    goto $bb5;
}



const _ZN4uORB11PublicationI24vehicle_local_position_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI24vehicle_local_position_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5128;

procedure _ZN4uORB11PublicationI24vehicle_local_position_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI24vehicle_local_position_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ43($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ44($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ45($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ46($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ47($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ48($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ49($p6 + 32, NULL);
    $M.1[$p6 + 32] := NULL;
    assert !aliasQ50($p6 + 40, NULL);
    $M.1[$p6 + 40] := NULL;
    assert !aliasQ51($p6 + 44, NULL);
    $M.1[$p6 + 44] := NULL;
    assert !aliasQ52($p6 + 48, NULL);
    $M.1[$p6 + 48] := NULL;
    assert !aliasQ53($p6 + 52, NULL);
    $M.1[$p6 + 52] := NULL;
    assert !aliasQ54($p6 + 56, NULL);
    $M.1[$p6 + 56] := NULL;
    assert !aliasQ55($p6 + 60, NULL);
    $M.1[$p6 + 60] := NULL;
    assert !aliasQ56($p6 + 64, NULL);
    $M.1[$p6 + 64] := NULL;
    assert !aliasQ57($p6 + 68, NULL);
    $M.1[$p6 + 68] := NULL;
    assert !aliasQ58($p6 + 72, NULL);
    $M.1[$p6 + 72] := NULL;
    assert !aliasQ59($p6 + 76, NULL);
    $M.1[$p6 + 76] := NULL;
    assert !aliasQ60($p6 + 80, NULL);
    $M.1[$p6 + 80] := NULL;
    assert !aliasQ61($p6 + 84, NULL);
    $M.1[$p6 + 84] := NULL;
    assert !aliasQ62($p6 + 88, NULL);
    $M.1[$p6 + 88] := NULL;
    assert !aliasQ63($p6 + 89, NULL);
    $M.1[$p6 + 89] := NULL;
    assert !aliasQ64($p6 + 90, NULL);
    $M.1[$p6 + 90] := NULL;
    assert !aliasQ65($p6 + 91, NULL);
    $M.1[$p6 + 91] := NULL;
    assert !aliasQ66($p6 + 92, NULL);
    $M.1[$p6 + 92] := NULL;
    assert !aliasQ67($p6 + 93, NULL);
    $M.1[$p6 + 93] := NULL;
    assert !aliasQ68($p6 + 94, NULL);
    $M.1[$p6 + 94] := NULL;
    assert !aliasQ69($p6 + 95, NULL);
    $M.1[$p6 + 95] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev: int;

axiom _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev == NULL - 5136;

procedure _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED1Ev == NULL - 5144;

procedure _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI24vehicle_local_position_sED0Ev: int;

axiom _ZN4uORB11PublicationI24vehicle_local_position_sED0Ev == NULL - 5152;

procedure _ZN4uORB11PublicationI24vehicle_local_position_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI24vehicle_local_position_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED0Ev == NULL - 5160;

procedure _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI24vehicle_local_position_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI24vehicle_local_position_sE3getEv: int;

axiom _ZN4uORB11PublicationI24vehicle_local_position_sE3getEv == NULL - 5168;

procedure _ZN4uORB11PublicationI24vehicle_local_position_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI24vehicle_local_position_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI24vehicle_local_position_sE6updateEv: int;

axiom _ZN4uORB11PublicationI24vehicle_local_position_sE6updateEv == NULL - 5176;

procedure _ZN4uORB11PublicationI24vehicle_local_position_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI24vehicle_local_position_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI25vehicle_global_position_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI25vehicle_global_position_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5184;

procedure _ZN4uORB11PublicationI25vehicle_global_position_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI25vehicle_global_position_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ70($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ71($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ72($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ73($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ74($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ75($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ76($p6 + 32, NULL);
    $M.1[$p6 + 32] := NULL;
    assert !aliasQ77($p6 + 36, NULL);
    $M.1[$p6 + 36] := NULL;
    assert !aliasQ78($p6 + 40, NULL);
    $M.1[$p6 + 40] := NULL;
    assert !aliasQ79($p6 + 44, NULL);
    $M.1[$p6 + 44] := NULL;
    assert !aliasQ80($p6 + 48, NULL);
    $M.1[$p6 + 48] := NULL;
    assert !aliasQ81($p6 + 52, NULL);
    $M.1[$p6 + 52] := NULL;
    assert !aliasQ82($p6 + 56, NULL);
    $M.1[$p6 + 56] := NULL;
    assert !aliasQ83($p6 + 60, NULL);
    $M.1[$p6 + 60] := NULL;
    assert !aliasQ84($p6 + 64, NULL);
    $M.1[$p6 + 64] := NULL;
    assert !aliasQ85($p6 + 68, NULL);
    $M.1[$p6 + 68] := NULL;
    assert !aliasQ86($p6 + 69, NULL);
    $M.1[$p6 + 69] := NULL;
    assert !aliasQ87($p6 + 70, NULL);
    $M.1[$p6 + 70] := NULL;
    assert !aliasQ88($p6 + 71, NULL);
    $M.1[$p6 + 71] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev: int;

axiom _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev == NULL - 5192;

procedure _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED1Ev == NULL - 5200;

procedure _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI25vehicle_global_position_sED0Ev: int;

axiom _ZN4uORB11PublicationI25vehicle_global_position_sED0Ev == NULL - 5208;

procedure _ZN4uORB11PublicationI25vehicle_global_position_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI25vehicle_global_position_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED0Ev == NULL - 5216;

procedure _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI25vehicle_global_position_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI25vehicle_global_position_sE3getEv: int;

axiom _ZN4uORB11PublicationI25vehicle_global_position_sE3getEv == NULL - 5224;

procedure _ZN4uORB11PublicationI25vehicle_global_position_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI25vehicle_global_position_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI25vehicle_global_position_sE6updateEv: int;

axiom _ZN4uORB11PublicationI25vehicle_global_position_sE6updateEv == NULL - 5232;

procedure _ZN4uORB11PublicationI25vehicle_global_position_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI25vehicle_global_position_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI17debug_key_value_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI17debug_key_value_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5240;

procedure _ZN4uORB11PublicationI17debug_key_value_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI17debug_key_value_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ89($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI17debug_key_value_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ90($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI17debug_key_value_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ91($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ92($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ93($p6 + 12, NULL);
    $M.1[$p6 + 12] := NULL;
    assert !aliasQ94($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ95($p6 + 17, NULL);
    $M.1[$p6 + 17] := NULL;
    assert !aliasQ96($p6 + 18, NULL);
    $M.1[$p6 + 18] := NULL;
    assert !aliasQ97($p6 + 19, NULL);
    $M.1[$p6 + 19] := NULL;
    assert !aliasQ98($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assert !aliasQ99($p6 + 21, NULL);
    $M.1[$p6 + 21] := NULL;
    assert !aliasQ100($p6 + 22, NULL);
    $M.1[$p6 + 22] := NULL;
    assert !aliasQ101($p6 + 23, NULL);
    $M.1[$p6 + 23] := NULL;
    assert !aliasQ102($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ103($p6 + 25, NULL);
    $M.1[$p6 + 25] := NULL;
    assert !aliasQ104($p6 + 26, NULL);
    $M.1[$p6 + 26] := NULL;
    assert !aliasQ105($p6 + 27, NULL);
    $M.1[$p6 + 27] := NULL;
    assert !aliasQ106($p6 + 28, NULL);
    $M.1[$p6 + 28] := NULL;
    assert !aliasQ107($p6 + 29, NULL);
    $M.1[$p6 + 29] := NULL;
    assert !aliasQ108($p6 + 30, NULL);
    $M.1[$p6 + 30] := NULL;
    assert !aliasQ109($p6 + 31, NULL);
    $M.1[$p6 + 31] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI17debug_key_value_sED2Ev: int;

axiom _ZN4uORB11PublicationI17debug_key_value_sED2Ev == NULL - 5248;

procedure _ZN4uORB11PublicationI17debug_key_value_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI17debug_key_value_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI17debug_key_value_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI17debug_key_value_sED1Ev == NULL - 5256;

procedure _ZThn32_N4uORB11PublicationI17debug_key_value_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI17debug_key_value_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI17debug_key_value_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI17debug_key_value_sED0Ev: int;

axiom _ZN4uORB11PublicationI17debug_key_value_sED0Ev == NULL - 5264;

procedure _ZN4uORB11PublicationI17debug_key_value_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI17debug_key_value_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI17debug_key_value_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI17debug_key_value_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI17debug_key_value_sED0Ev == NULL - 5272;

procedure _ZThn32_N4uORB11PublicationI17debug_key_value_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI17debug_key_value_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI17debug_key_value_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI17debug_key_value_sE3getEv: int;

axiom _ZN4uORB11PublicationI17debug_key_value_sE3getEv == NULL - 5280;

procedure _ZN4uORB11PublicationI17debug_key_value_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI17debug_key_value_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI17debug_key_value_sE6updateEv: int;

axiom _ZN4uORB11PublicationI17debug_key_value_sE6updateEv == NULL - 5288;

procedure _ZN4uORB11PublicationI17debug_key_value_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI17debug_key_value_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI19actuator_controls_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI19actuator_controls_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5296;

procedure _ZN4uORB11PublicationI19actuator_controls_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI19actuator_controls_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ110($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI19actuator_controls_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ111($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI19actuator_controls_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ112($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ113($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ114($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ115($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assert !aliasQ116($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ117($p6 + 28, NULL);
    $M.1[$p6 + 28] := NULL;
    assert !aliasQ118($p6 + 32, NULL);
    $M.1[$p6 + 32] := NULL;
    assert !aliasQ119($p6 + 36, NULL);
    $M.1[$p6 + 36] := NULL;
    assert !aliasQ120($p6 + 40, NULL);
    $M.1[$p6 + 40] := NULL;
    assert !aliasQ121($p6 + 44, NULL);
    $M.1[$p6 + 44] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI19actuator_controls_sED2Ev: int;

axiom _ZN4uORB11PublicationI19actuator_controls_sED2Ev == NULL - 5304;

procedure _ZN4uORB11PublicationI19actuator_controls_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI19actuator_controls_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI19actuator_controls_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI19actuator_controls_sED1Ev == NULL - 5312;

procedure _ZThn32_N4uORB11PublicationI19actuator_controls_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI19actuator_controls_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI19actuator_controls_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI19actuator_controls_sED0Ev: int;

axiom _ZN4uORB11PublicationI19actuator_controls_sED0Ev == NULL - 5320;

procedure _ZN4uORB11PublicationI19actuator_controls_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI19actuator_controls_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI19actuator_controls_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI19actuator_controls_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI19actuator_controls_sED0Ev == NULL - 5328;

procedure _ZThn32_N4uORB11PublicationI19actuator_controls_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI19actuator_controls_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI19actuator_controls_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI19actuator_controls_sE3getEv: int;

axiom _ZN4uORB11PublicationI19actuator_controls_sE3getEv == NULL - 5336;

procedure _ZN4uORB11PublicationI19actuator_controls_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI19actuator_controls_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI19actuator_controls_sE6updateEv: int;

axiom _ZN4uORB11PublicationI19actuator_controls_sE6updateEv == NULL - 5344;

procedure _ZN4uORB11PublicationI19actuator_controls_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI19actuator_controls_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5352;

procedure _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ122($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ123($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ124($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ125($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ126($p6 + 12, NULL);
    $M.1[$p6 + 12] := NULL;
    assert !aliasQ127($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ128($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assert !aliasQ129($p6 + 21, NULL);
    $M.1[$p6 + 21] := NULL;
    assert !aliasQ130($p6 + 22, NULL);
    $M.1[$p6 + 22] := NULL;
    assert !aliasQ131($p6 + 23, NULL);
    $M.1[$p6 + 23] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev: int;

axiom _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev == NULL - 5360;

procedure _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED1Ev == NULL - 5368;

procedure _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev: int;

axiom _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev == NULL - 5376;

procedure _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev == NULL - 5384;

procedure _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE3getEv: int;

axiom _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE3getEv == NULL - 5392;

procedure _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE6updateEv: int;

axiom _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE6updateEv == NULL - 5400;

procedure _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5408;

procedure _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ132($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ133($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ134($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ135($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ136($p6 + 12, NULL);
    $M.1[$p6 + 12] := NULL;
    assert !aliasQ137($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ138($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assert !aliasQ139($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ140($p6 + 28, NULL);
    $M.1[$p6 + 28] := NULL;
    assert !aliasQ141($p6 + 32, NULL);
    $M.1[$p6 + 32] := NULL;
    assert !aliasQ142($p6 + 36, NULL);
    $M.1[$p6 + 36] := NULL;
    assert !aliasQ143($p6 + 40, NULL);
    $M.1[$p6 + 40] := NULL;
    assert !aliasQ144($p6 + 44, NULL);
    $M.1[$p6 + 44] := NULL;
    assert !aliasQ145($p6 + 48, NULL);
    $M.1[$p6 + 48] := NULL;
    assert !aliasQ146($p6 + 52, NULL);
    $M.1[$p6 + 52] := NULL;
    assert !aliasQ147($p6 + 56, NULL);
    $M.1[$p6 + 56] := NULL;
    assert !aliasQ148($p6 + 60, NULL);
    $M.1[$p6 + 60] := NULL;
    assert !aliasQ149($p6 + 64, NULL);
    $M.1[$p6 + 64] := NULL;
    assert !aliasQ150($p6 + 68, NULL);
    $M.1[$p6 + 68] := NULL;
    assert !aliasQ151($p6 + 72, NULL);
    $M.1[$p6 + 72] := NULL;
    assert !aliasQ152($p6 + 76, NULL);
    $M.1[$p6 + 76] := NULL;
    assert !aliasQ153($p6 + 80, NULL);
    $M.1[$p6 + 80] := NULL;
    assert !aliasQ154($p6 + 84, NULL);
    $M.1[$p6 + 84] := NULL;
    assert !aliasQ155($p6 + 88, NULL);
    $M.1[$p6 + 88] := NULL;
    assert !aliasQ156($p6 + 92, NULL);
    $M.1[$p6 + 92] := NULL;
    assert !aliasQ157($p6 + 96, NULL);
    $M.1[$p6 + 96] := NULL;
    assert !aliasQ158($p6 + 97, NULL);
    $M.1[$p6 + 97] := NULL;
    assert !aliasQ159($p6 + 98, NULL);
    $M.1[$p6 + 98] := NULL;
    assert !aliasQ160($p6 + 99, NULL);
    $M.1[$p6 + 99] := NULL;
    assert !aliasQ161($p6 + 100, NULL);
    $M.1[$p6 + 100] := NULL;
    assert !aliasQ162($p6 + 101, NULL);
    $M.1[$p6 + 101] := NULL;
    assert !aliasQ163($p6 + 102, NULL);
    $M.1[$p6 + 102] := NULL;
    assert !aliasQ164($p6 + 103, NULL);
    $M.1[$p6 + 103] := NULL;
    assert !aliasQ165($p6 + 104, NULL);
    $M.1[$p6 + 104] := NULL;
    assert !aliasQ166($p6 + 105, NULL);
    $M.1[$p6 + 105] := NULL;
    assert !aliasQ167($p6 + 106, NULL);
    $M.1[$p6 + 106] := NULL;
    assert !aliasQ168($p6 + 107, NULL);
    $M.1[$p6 + 107] := NULL;
    assert !aliasQ169($p6 + 108, NULL);
    $M.1[$p6 + 108] := NULL;
    assert !aliasQ170($p6 + 109, NULL);
    $M.1[$p6 + 109] := NULL;
    assert !aliasQ171($p6 + 110, NULL);
    $M.1[$p6 + 110] := NULL;
    assert !aliasQ172($p6 + 111, NULL);
    $M.1[$p6 + 111] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev: int;

axiom _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev == NULL - 5416;

procedure _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED1Ev == NULL - 5424;

procedure _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev: int;

axiom _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev == NULL - 5432;

procedure _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev == NULL - 5440;

procedure _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE3getEv: int;

axiom _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE3getEv == NULL - 5448;

procedure _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE6updateEv: int;

axiom _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE6updateEv == NULL - 5456;

procedure _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI24vehicle_rates_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI24vehicle_rates_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5464;

procedure _ZN4uORB11PublicationI24vehicle_rates_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI24vehicle_rates_setpoint_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ173($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ174($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ175($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ176($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ177($p6 + 12, NULL);
    $M.1[$p6 + 12] := NULL;
    assert !aliasQ178($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ179($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev: int;

axiom _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev == NULL - 5472;

procedure _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED1Ev == NULL - 5480;

procedure _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev: int;

axiom _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev == NULL - 5488;

procedure _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev == NULL - 5496;

procedure _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE3getEv: int;

axiom _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE3getEv == NULL - 5504;

procedure _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE6updateEv: int;

axiom _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE6updateEv == NULL - 5512;

procedure _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI18actuator_outputs_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI18actuator_outputs_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5520;

procedure _ZN4uORB11PublicationI18actuator_outputs_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI18actuator_outputs_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ180($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI18actuator_outputs_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ181($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI18actuator_outputs_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ182($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ183($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ184($p6 + 12, NULL);
    $M.1[$p6 + 12] := NULL;
    assert !aliasQ185($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ186($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assert !aliasQ187($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ188($p6 + 28, NULL);
    $M.1[$p6 + 28] := NULL;
    assert !aliasQ189($p6 + 32, NULL);
    $M.1[$p6 + 32] := NULL;
    assert !aliasQ190($p6 + 36, NULL);
    $M.1[$p6 + 36] := NULL;
    assert !aliasQ191($p6 + 40, NULL);
    $M.1[$p6 + 40] := NULL;
    assert !aliasQ192($p6 + 44, NULL);
    $M.1[$p6 + 44] := NULL;
    assert !aliasQ193($p6 + 48, NULL);
    $M.1[$p6 + 48] := NULL;
    assert !aliasQ194($p6 + 52, NULL);
    $M.1[$p6 + 52] := NULL;
    assert !aliasQ195($p6 + 56, NULL);
    $M.1[$p6 + 56] := NULL;
    assert !aliasQ196($p6 + 60, NULL);
    $M.1[$p6 + 60] := NULL;
    assert !aliasQ197($p6 + 64, NULL);
    $M.1[$p6 + 64] := NULL;
    assert !aliasQ198($p6 + 68, NULL);
    $M.1[$p6 + 68] := NULL;
    assert !aliasQ199($p6 + 72, NULL);
    $M.1[$p6 + 72] := NULL;
    assert !aliasQ200($p6 + 76, NULL);
    $M.1[$p6 + 76] := NULL;
    assert !aliasQ201($p6 + 77, NULL);
    $M.1[$p6 + 77] := NULL;
    assert !aliasQ202($p6 + 78, NULL);
    $M.1[$p6 + 78] := NULL;
    assert !aliasQ203($p6 + 79, NULL);
    $M.1[$p6 + 79] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI18actuator_outputs_sED2Ev: int;

axiom _ZN4uORB11PublicationI18actuator_outputs_sED2Ev == NULL - 5528;

procedure _ZN4uORB11PublicationI18actuator_outputs_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI18actuator_outputs_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI18actuator_outputs_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI18actuator_outputs_sED1Ev == NULL - 5536;

procedure _ZThn32_N4uORB11PublicationI18actuator_outputs_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI18actuator_outputs_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI18actuator_outputs_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI18actuator_outputs_sED0Ev: int;

axiom _ZN4uORB11PublicationI18actuator_outputs_sED0Ev == NULL - 5544;

procedure _ZN4uORB11PublicationI18actuator_outputs_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI18actuator_outputs_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI18actuator_outputs_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI18actuator_outputs_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI18actuator_outputs_sED0Ev == NULL - 5552;

procedure _ZThn32_N4uORB11PublicationI18actuator_outputs_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI18actuator_outputs_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI18actuator_outputs_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI18actuator_outputs_sE3getEv: int;

axiom _ZN4uORB11PublicationI18actuator_outputs_sE3getEv == NULL - 5560;

procedure _ZN4uORB11PublicationI18actuator_outputs_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI18actuator_outputs_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI18actuator_outputs_sE6updateEv: int;

axiom _ZN4uORB11PublicationI18actuator_outputs_sE6updateEv == NULL - 5568;

procedure _ZN4uORB11PublicationI18actuator_outputs_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI18actuator_outputs_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI17actuator_direct_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI17actuator_direct_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5576;

procedure _ZN4uORB11PublicationI17actuator_direct_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI17actuator_direct_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ204($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI17actuator_direct_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ205($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI17actuator_direct_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ206($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ207($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ208($p6 + 12, NULL);
    $M.1[$p6 + 12] := NULL;
    assert !aliasQ209($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ210($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assert !aliasQ211($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ212($p6 + 28, NULL);
    $M.1[$p6 + 28] := NULL;
    assert !aliasQ213($p6 + 32, NULL);
    $M.1[$p6 + 32] := NULL;
    assert !aliasQ214($p6 + 36, NULL);
    $M.1[$p6 + 36] := NULL;
    assert !aliasQ215($p6 + 40, NULL);
    $M.1[$p6 + 40] := NULL;
    assert !aliasQ216($p6 + 44, NULL);
    $M.1[$p6 + 44] := NULL;
    assert !aliasQ217($p6 + 48, NULL);
    $M.1[$p6 + 48] := NULL;
    assert !aliasQ218($p6 + 52, NULL);
    $M.1[$p6 + 52] := NULL;
    assert !aliasQ219($p6 + 56, NULL);
    $M.1[$p6 + 56] := NULL;
    assert !aliasQ220($p6 + 60, NULL);
    $M.1[$p6 + 60] := NULL;
    assert !aliasQ221($p6 + 64, NULL);
    $M.1[$p6 + 64] := NULL;
    assert !aliasQ222($p6 + 68, NULL);
    $M.1[$p6 + 68] := NULL;
    assert !aliasQ223($p6 + 72, NULL);
    $M.1[$p6 + 72] := NULL;
    assert !aliasQ224($p6 + 76, NULL);
    $M.1[$p6 + 76] := NULL;
    assert !aliasQ225($p6 + 77, NULL);
    $M.1[$p6 + 77] := NULL;
    assert !aliasQ226($p6 + 78, NULL);
    $M.1[$p6 + 78] := NULL;
    assert !aliasQ227($p6 + 79, NULL);
    $M.1[$p6 + 79] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI17actuator_direct_sED2Ev: int;

axiom _ZN4uORB11PublicationI17actuator_direct_sED2Ev == NULL - 5584;

procedure _ZN4uORB11PublicationI17actuator_direct_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI17actuator_direct_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI17actuator_direct_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI17actuator_direct_sED1Ev == NULL - 5592;

procedure _ZThn32_N4uORB11PublicationI17actuator_direct_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI17actuator_direct_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI17actuator_direct_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI17actuator_direct_sED0Ev: int;

axiom _ZN4uORB11PublicationI17actuator_direct_sED0Ev == NULL - 5600;

procedure _ZN4uORB11PublicationI17actuator_direct_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI17actuator_direct_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI17actuator_direct_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI17actuator_direct_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI17actuator_direct_sED0Ev == NULL - 5608;

procedure _ZThn32_N4uORB11PublicationI17actuator_direct_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI17actuator_direct_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI17actuator_direct_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI17actuator_direct_sE3getEv: int;

axiom _ZN4uORB11PublicationI17actuator_direct_sE3getEv == NULL - 5616;

procedure _ZN4uORB11PublicationI17actuator_direct_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI17actuator_direct_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI17actuator_direct_sE6updateEv: int;

axiom _ZN4uORB11PublicationI17actuator_direct_sE6updateEv == NULL - 5624;

procedure _ZN4uORB11PublicationI17actuator_direct_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI17actuator_direct_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI10encoders_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI10encoders_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5632;

procedure _ZN4uORB11PublicationI10encoders_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI10encoders_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ228($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI10encoders_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ229($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI10encoders_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ230($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ231($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ232($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ233($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ234($p6 + 32, NULL);
    $M.1[$p6 + 32] := NULL;
    assert !aliasQ235($p6 + 40, NULL);
    $M.1[$p6 + 40] := NULL;
    assert !aliasQ236($p6 + 44, NULL);
    $M.1[$p6 + 44] := NULL;
    assert !aliasQ237($p6 + 48, NULL);
    $M.1[$p6 + 48] := NULL;
    assert !aliasQ238($p6 + 52, NULL);
    $M.1[$p6 + 52] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI10encoders_sED2Ev: int;

axiom _ZN4uORB11PublicationI10encoders_sED2Ev == NULL - 5640;

procedure _ZN4uORB11PublicationI10encoders_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI10encoders_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI10encoders_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI10encoders_sED1Ev == NULL - 5648;

procedure _ZThn32_N4uORB11PublicationI10encoders_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI10encoders_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI10encoders_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI10encoders_sED0Ev: int;

axiom _ZN4uORB11PublicationI10encoders_sED0Ev == NULL - 5656;

procedure _ZN4uORB11PublicationI10encoders_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI10encoders_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI10encoders_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI10encoders_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI10encoders_sED0Ev == NULL - 5664;

procedure _ZThn32_N4uORB11PublicationI10encoders_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI10encoders_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI10encoders_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI10encoders_sE3getEv: int;

axiom _ZN4uORB11PublicationI10encoders_sE3getEv == NULL - 5672;

procedure _ZN4uORB11PublicationI10encoders_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI10encoders_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI10encoders_sE6updateEv: int;

axiom _ZN4uORB11PublicationI10encoders_sE6updateEv == NULL - 5680;

procedure _ZN4uORB11PublicationI10encoders_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI10encoders_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI13tecs_status_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI13tecs_status_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5688;

procedure _ZN4uORB11PublicationI13tecs_status_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI13tecs_status_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ239($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI13tecs_status_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ240($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI13tecs_status_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ241($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ242($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ243($p6 + 12, NULL);
    $M.1[$p6 + 12] := NULL;
    assert !aliasQ244($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ245($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assert !aliasQ246($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ247($p6 + 28, NULL);
    $M.1[$p6 + 28] := NULL;
    assert !aliasQ248($p6 + 32, NULL);
    $M.1[$p6 + 32] := NULL;
    assert !aliasQ249($p6 + 36, NULL);
    $M.1[$p6 + 36] := NULL;
    assert !aliasQ250($p6 + 40, NULL);
    $M.1[$p6 + 40] := NULL;
    assert !aliasQ251($p6 + 44, NULL);
    $M.1[$p6 + 44] := NULL;
    assert !aliasQ252($p6 + 48, NULL);
    $M.1[$p6 + 48] := NULL;
    assert !aliasQ253($p6 + 52, NULL);
    $M.1[$p6 + 52] := NULL;
    assert !aliasQ254($p6 + 56, NULL);
    $M.1[$p6 + 56] := NULL;
    assert !aliasQ255($p6 + 60, NULL);
    $M.1[$p6 + 60] := NULL;
    assert !aliasQ256($p6 + 64, NULL);
    $M.1[$p6 + 64] := NULL;
    assert !aliasQ257($p6 + 68, NULL);
    $M.1[$p6 + 68] := NULL;
    assert !aliasQ258($p6 + 69, NULL);
    $M.1[$p6 + 69] := NULL;
    assert !aliasQ259($p6 + 70, NULL);
    $M.1[$p6 + 70] := NULL;
    assert !aliasQ260($p6 + 71, NULL);
    $M.1[$p6 + 71] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI13tecs_status_sED2Ev: int;

axiom _ZN4uORB11PublicationI13tecs_status_sED2Ev == NULL - 5696;

procedure _ZN4uORB11PublicationI13tecs_status_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI13tecs_status_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI13tecs_status_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI13tecs_status_sED1Ev == NULL - 5704;

procedure _ZThn32_N4uORB11PublicationI13tecs_status_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI13tecs_status_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI13tecs_status_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI13tecs_status_sED0Ev: int;

axiom _ZN4uORB11PublicationI13tecs_status_sED0Ev == NULL - 5712;

procedure _ZN4uORB11PublicationI13tecs_status_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI13tecs_status_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI13tecs_status_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI13tecs_status_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI13tecs_status_sED0Ev == NULL - 5720;

procedure _ZThn32_N4uORB11PublicationI13tecs_status_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI13tecs_status_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI13tecs_status_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI13tecs_status_sE3getEv: int;

axiom _ZN4uORB11PublicationI13tecs_status_sE3getEv == NULL - 5728;

procedure _ZN4uORB11PublicationI13tecs_status_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI13tecs_status_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI13tecs_status_sE6updateEv: int;

axiom _ZN4uORB11PublicationI13tecs_status_sE6updateEv == NULL - 5736;

procedure _ZN4uORB11PublicationI13tecs_status_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI13tecs_status_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI13rc_channels_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI13rc_channels_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5744;

procedure _ZN4uORB11PublicationI13rc_channels_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI13rc_channels_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ261($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI13rc_channels_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ262($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI13rc_channels_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ263($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ264($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ265($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ266($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assert !aliasQ267($p6 + 24, NULL);
    $M.1[$p6 + 24] := NULL;
    assert !aliasQ268($p6 + 28, NULL);
    $M.1[$p6 + 28] := NULL;
    assert !aliasQ269($p6 + 32, NULL);
    $M.1[$p6 + 32] := NULL;
    assert !aliasQ270($p6 + 36, NULL);
    $M.1[$p6 + 36] := NULL;
    assert !aliasQ271($p6 + 40, NULL);
    $M.1[$p6 + 40] := NULL;
    assert !aliasQ272($p6 + 44, NULL);
    $M.1[$p6 + 44] := NULL;
    assert !aliasQ273($p6 + 48, NULL);
    $M.1[$p6 + 48] := NULL;
    assert !aliasQ274($p6 + 52, NULL);
    $M.1[$p6 + 52] := NULL;
    assert !aliasQ275($p6 + 56, NULL);
    $M.1[$p6 + 56] := NULL;
    assert !aliasQ276($p6 + 60, NULL);
    $M.1[$p6 + 60] := NULL;
    assert !aliasQ277($p6 + 64, NULL);
    $M.1[$p6 + 64] := NULL;
    assert !aliasQ278($p6 + 68, NULL);
    $M.1[$p6 + 68] := NULL;
    assert !aliasQ279($p6 + 72, NULL);
    $M.1[$p6 + 72] := NULL;
    assert !aliasQ280($p6 + 76, NULL);
    $M.1[$p6 + 76] := NULL;
    assert !aliasQ281($p6 + 80, NULL);
    $M.1[$p6 + 80] := NULL;
    assert !aliasQ282($p6 + 84, NULL);
    $M.1[$p6 + 84] := NULL;
    assert !aliasQ283($p6 + 88, NULL);
    $M.1[$p6 + 88] := NULL;
    assert !aliasQ284($p6 + 92, NULL);
    $M.1[$p6 + 92] := NULL;
    assert !aliasQ285($p6 + 93, NULL);
    $M.1[$p6 + 93] := NULL;
    assert !aliasQ286($p6 + 94, NULL);
    $M.1[$p6 + 94] := NULL;
    assert !aliasQ287($p6 + 95, NULL);
    $M.1[$p6 + 95] := NULL;
    assert !aliasQ288($p6 + 96, NULL);
    $M.1[$p6 + 96] := NULL;
    assert !aliasQ289($p6 + 97, NULL);
    $M.1[$p6 + 97] := NULL;
    assert !aliasQ290($p6 + 98, NULL);
    $M.1[$p6 + 98] := NULL;
    assert !aliasQ291($p6 + 99, NULL);
    $M.1[$p6 + 99] := NULL;
    assert !aliasQ292($p6 + 100, NULL);
    $M.1[$p6 + 100] := NULL;
    assert !aliasQ293($p6 + 101, NULL);
    $M.1[$p6 + 101] := NULL;
    assert !aliasQ294($p6 + 102, NULL);
    $M.1[$p6 + 102] := NULL;
    assert !aliasQ295($p6 + 103, NULL);
    $M.1[$p6 + 103] := NULL;
    assert !aliasQ296($p6 + 104, NULL);
    $M.1[$p6 + 104] := NULL;
    assert !aliasQ297($p6 + 105, NULL);
    $M.1[$p6 + 105] := NULL;
    assert !aliasQ298($p6 + 106, NULL);
    $M.1[$p6 + 106] := NULL;
    assert !aliasQ299($p6 + 107, NULL);
    $M.1[$p6 + 107] := NULL;
    assert !aliasQ300($p6 + 108, NULL);
    $M.1[$p6 + 108] := NULL;
    assert !aliasQ301($p6 + 109, NULL);
    $M.1[$p6 + 109] := NULL;
    assert !aliasQ302($p6 + 110, NULL);
    $M.1[$p6 + 110] := NULL;
    assert !aliasQ303($p6 + 111, NULL);
    $M.1[$p6 + 111] := NULL;
    assert !aliasQ304($p6 + 112, NULL);
    $M.1[$p6 + 112] := NULL;
    assert !aliasQ305($p6 + 113, NULL);
    $M.1[$p6 + 113] := NULL;
    assert !aliasQ306($p6 + 114, NULL);
    $M.1[$p6 + 114] := NULL;
    assert !aliasQ307($p6 + 115, NULL);
    $M.1[$p6 + 115] := NULL;
    assert !aliasQ308($p6 + 116, NULL);
    $M.1[$p6 + 116] := NULL;
    assert !aliasQ309($p6 + 117, NULL);
    $M.1[$p6 + 117] := NULL;
    assert !aliasQ310($p6 + 118, NULL);
    $M.1[$p6 + 118] := NULL;
    assert !aliasQ311($p6 + 119, NULL);
    $M.1[$p6 + 119] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI13rc_channels_sED2Ev: int;

axiom _ZN4uORB11PublicationI13rc_channels_sED2Ev == NULL - 5752;

procedure _ZN4uORB11PublicationI13rc_channels_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI13rc_channels_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI13rc_channels_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI13rc_channels_sED1Ev == NULL - 5760;

procedure _ZThn32_N4uORB11PublicationI13rc_channels_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI13rc_channels_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI13rc_channels_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI13rc_channels_sED0Ev: int;

axiom _ZN4uORB11PublicationI13rc_channels_sED0Ev == NULL - 5768;

procedure _ZN4uORB11PublicationI13rc_channels_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI13rc_channels_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI13rc_channels_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI13rc_channels_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI13rc_channels_sED0Ev == NULL - 5776;

procedure _ZThn32_N4uORB11PublicationI13rc_channels_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI13rc_channels_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI13rc_channels_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI13rc_channels_sE3getEv: int;

axiom _ZN4uORB11PublicationI13rc_channels_sE3getEv == NULL - 5784;

procedure _ZN4uORB11PublicationI13rc_channels_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI13rc_channels_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI13rc_channels_sE6updateEv: int;

axiom _ZN4uORB11PublicationI13rc_channels_sE6updateEv == NULL - 5792;

procedure _ZN4uORB11PublicationI13rc_channels_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI13rc_channels_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI22filtered_bottom_flow_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE: int;

axiom _ZN4uORB11PublicationI22filtered_bottom_flow_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE == NULL - 5800;

procedure _ZN4uORB11PublicationI22filtered_bottom_flow_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, {:scalar} priority: int, list: int);



implementation _ZN4uORB11PublicationI22filtered_bottom_flow_sEC2EPK12orb_metadataiP4ListIPNS_15PublicationNodeEE(this: int, meta: int, priority: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    call _ZN4uORB15PublicationNodeC2EPK12orb_metadataiP4ListIPS0_E($p0, meta, priority, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ312($p1, NULL);
    $M.0 := $M.0[$p1 := _ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 153, 2} true;
    assert !aliasQ313($p4, NULL);
    $M.0 := $M.0[$p4 := _ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 152, 3} true;
    assert !aliasQ314($p6, NULL);
    $M.1[$p6] := NULL;
    assert !aliasQ315($p6 + 8, NULL);
    $M.1[$p6 + 8] := NULL;
    assert !aliasQ316($p6 + 12, NULL);
    $M.1[$p6 + 12] := NULL;
    assert !aliasQ317($p6 + 16, NULL);
    $M.1[$p6 + 16] := NULL;
    assert !aliasQ318($p6 + 20, NULL);
    $M.1[$p6 + 20] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 154, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev: int;

axiom _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev == NULL - 5808;

procedure _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev(this: int);



implementation _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    call _ZN4uORB15PublicationNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED1Ev: int;

axiom _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED1Ev == NULL - 5816;

procedure _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED1Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI22filtered_bottom_flow_sED0Ev: int;

axiom _ZN4uORB11PublicationI22filtered_bottom_flow_sED0Ev == NULL - 5824;

procedure _ZN4uORB11PublicationI22filtered_bottom_flow_sED0Ev(this: int);



implementation _ZN4uORB11PublicationI22filtered_bottom_flow_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 25} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 26} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED0Ev: int;

axiom _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED0Ev == NULL - 5832;

procedure _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED0Ev(this: int);



implementation _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    call _ZN4uORB11PublicationI22filtered_bottom_flow_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 159, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI22filtered_bottom_flow_sE3getEv: int;

axiom _ZN4uORB11PublicationI22filtered_bottom_flow_sE3getEv == NULL - 5840;

procedure _ZN4uORB11PublicationI22filtered_bottom_flow_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB11PublicationI22filtered_bottom_flow_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 164, 13} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB11PublicationI22filtered_bottom_flow_sE6updateEv: int;

axiom _ZN4uORB11PublicationI22filtered_bottom_flow_sE6updateEv == NULL - 5848;

procedure _ZN4uORB11PublicationI22filtered_bottom_flow_sE6updateEv(this: int);



implementation _ZN4uORB11PublicationI22filtered_bottom_flow_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 171, 20} true;
    call _ZN4uORB15PublicationBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 172, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB15PublicationBaseC2EPK12orb_metadatai: int;

axiom _ZN4uORB15PublicationBaseC2EPK12orb_metadatai == NULL - 5856;

procedure _ZN4uORB15PublicationBaseC2EPK12orb_metadatai(this: int, meta: int, {:scalar} priority: int);



implementation _ZN4uORB15PublicationBaseC2EPK12orb_metadatai(this: int, meta: int, priority: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var {:base "this"} $p3: int;
  var {:base "this"} $p4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 66, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 66, 1} true;
    assert !aliasQ319($p0, NULL);
    $M.0 := $M.0[$p0 := _ZTVN4uORB15PublicationBaseE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 62, 2} true;
    $p1 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 62, 2} true;
    assert !aliasQ320(this, NULL);
    $M.0 := $M.0[$p1 := meta];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 63, 2} true;
    $p2 := this + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 63, 2} true;
    assert !aliasQ321(this, NULL);
    $M.0 := $M.0[$p2 := priority];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 64, 2} true;
    $p3 := this + 20;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 64, 2} true;
    assert !aliasQ322(this, NULL);
    $M.0 := $M.0[$p3 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 65, 2} true;
    $p4 := this + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 65, 2} true;
    assert !aliasQ323(this, NULL);
    $M.0 := $M.0[$p4 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 67, 1} true;
    $exn := false;
    return;
}



const px4_log_modulename: int;

axiom px4_log_modulename == NULL - 5864;

procedure px4_log_modulename.i32.ref.ref({:scalar} $i0: int, $p1: int, $p2: int);



procedure px4_log_modulename.i32.ref.ref.i32.ref({:scalar} $i0: int, $p1: int, $p2: int, p.3: int, {:scalar} p.4: int);



procedure px4_log_modulename.i32.ref.ref.i32({:scalar} $i0: int, $p1: int, $p2: int, p.3: int);



procedure px4_log_modulename.i32.ref.ref.i32.ref.i32.i32({:scalar} $i0: int, $p1: int, $p2: int, p.3: int, {:scalar} p.4: int, p.5: int, p.6: int);



const _ZN4uORB15PublicationBaseD2Ev: int;

axiom _ZN4uORB15PublicationBaseD2Ev == NULL - 5872;

procedure _ZN4uORB15PublicationBaseD2Ev(this: int);



implementation _ZN4uORB15PublicationBaseD2Ev(this: int)
{
  var $p0: int;
  var $p1: int;
  var {:scalar} $i2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 98, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 98, 1} true;
    assert !aliasQ324($p0, NULL);
    $M.2 := $M.2[$p0 := _ZTVN4uORB15PublicationBaseE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 99, 18} true;
    call $p1 := _ZN4uORB15PublicationBase9getHandleEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 99, 2} true;
    call $i2 := orb_unadvertise($p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 100, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB15PublicationBaseD0Ev: int;

axiom _ZN4uORB15PublicationBaseD0Ev == NULL - 5880;

procedure _ZN4uORB15PublicationBaseD0Ev(this: int);



implementation _ZN4uORB15PublicationBaseD0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 98, 1} true;
    call _ZN4uORB15PublicationBaseD2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 98, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 98, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.cpp", 100, 1} true;
    $exn := false;
    return;
}



const __cxa_pure_virtual: int;

axiom __cxa_pure_virtual == NULL - 5888;

procedure __cxa_pure_virtual();



const _ZN4uORB12SubscriptionI18parameter_update_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI18parameter_update_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 5896;

procedure _ZN4uORB12SubscriptionI18parameter_update_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI18parameter_update_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ325($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI18parameter_update_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ326($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI18parameter_update_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ327($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ328($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ329($p6 + 9, NULL);
    $M.4[$p6 + 9] := NULL;
    assert !aliasQ330($p6 + 10, NULL);
    $M.4[$p6 + 10] := NULL;
    assert !aliasQ331($p6 + 11, NULL);
    $M.4[$p6 + 11] := NULL;
    assert !aliasQ332($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ333($p6 + 13, NULL);
    $M.4[$p6 + 13] := NULL;
    assert !aliasQ334($p6 + 14, NULL);
    $M.4[$p6 + 14] := NULL;
    assert !aliasQ335($p6 + 15, NULL);
    $M.4[$p6 + 15] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18parameter_update_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI18parameter_update_sEC2ERKS2_ == NULL - 5904;

procedure _ZN4uORB12SubscriptionI18parameter_update_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI18parameter_update_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ336($p1, NULL);
    $p3 := $M.5[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ337($p4, NULL);
    $i6 := $M.6[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ338($p7, NULL);
    $i9 := $M.7[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ339($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI18parameter_update_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ340($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI18parameter_update_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ341($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ342($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ343($p15 + 9, NULL);
    $M.4[$p15 + 9] := NULL;
    assert !aliasQ344($p15 + 10, NULL);
    $M.4[$p15 + 10] := NULL;
    assert !aliasQ345($p15 + 11, NULL);
    $M.4[$p15 + 11] := NULL;
    assert !aliasQ346($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ347($p15 + 13, NULL);
    $M.4[$p15 + 13] := NULL;
    assert !aliasQ348($p15 + 14, NULL);
    $M.4[$p15 + 14] := NULL;
    assert !aliasQ349($p15 + 15, NULL);
    $M.4[$p15 + 15] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18parameter_update_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI18parameter_update_sED2Ev == NULL - 5912;

procedure _ZN4uORB12SubscriptionI18parameter_update_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI18parameter_update_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI18parameter_update_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI18parameter_update_sED1Ev == NULL - 5920;

procedure _ZThn24_N4uORB12SubscriptionI18parameter_update_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI18parameter_update_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI18parameter_update_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18parameter_update_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI18parameter_update_sED0Ev == NULL - 5928;

procedure _ZN4uORB12SubscriptionI18parameter_update_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI18parameter_update_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI18parameter_update_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI18parameter_update_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI18parameter_update_sED0Ev == NULL - 5936;

procedure _ZThn24_N4uORB12SubscriptionI18parameter_update_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI18parameter_update_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI18parameter_update_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18parameter_update_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI18parameter_update_sE6updateEv == NULL - 5944;

procedure _ZN4uORB12SubscriptionI18parameter_update_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI18parameter_update_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB16SubscriptionBase6updateEPv: int;

axiom _ZN4uORB16SubscriptionBase6updateEPv == NULL - 5952;

procedure _ZN4uORB16SubscriptionBase6updateEPv(this: int, data: int);



implementation _ZN4uORB16SubscriptionBase6updateEPv(this: int, data: int)
{
  var {:scalar} $i0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "data"} boogie_si_record_ref(data);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 106, 6} true;
    call $i0 := _ZN4uORB16SubscriptionBase7updatedEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 106, 6} true;
    assume {:branchcond $i0} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i0 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 107, 22} true;
    $p1 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 107, 22} true;
    assert !aliasQ350(this, NULL);
    $p2 := $M.2[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 107, 29} true;
    $p3 := this + 20;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 107, 29} true;
    assert !aliasQ351(this, NULL);
    $i4 := $M.2[$p3];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 107, 13} true;
    call $i5 := orb_copy($p2, $i4, data);
    call {:cexpr "ret"} boogie_si_record_i32($i5);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 109, 7} true;
    $i6 := (if $i5 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 109, 7} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 106, 6} true;
    assume {:partition} !($i0 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 111, 1} true;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i6 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 109, 24} true;
    call px4_log_modulename.i32.ref.ref(2, .str31416, .str341417);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 109, 50} true;
    goto $bb3;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 109, 7} true;
    assume {:partition} !($i6 == 1);
    goto $bb3;
}



const _ZN4uORB12SubscriptionI18parameter_update_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI18parameter_update_sE13check_updatedEv == NULL - 5960;

procedure _ZN4uORB12SubscriptionI18parameter_update_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI18parameter_update_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB16SubscriptionBase7updatedEv: int;

axiom _ZN4uORB16SubscriptionBase7updatedEv == NULL - 5968;

procedure _ZN4uORB16SubscriptionBase7updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB16SubscriptionBase7updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;

  $bb0:
    call $p0 := $alloc(1 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 96, 7} true;
    assert !aliasQ352($p0, NULL);
    $M.8 := $M.8[$p0 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 97, 22} true;
    $p1 := this + 20;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 97, 22} true;
    assert !aliasQ353(this, NULL);
    $i2 := $M.2[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 97, 12} true;
    call $i3 := orb_check($i2, $p0);
    call {:cexpr "ret"} boogie_si_record_i32($i3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 99, 6} true;
    $i4 := (if $i3 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 99, 6} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i4 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 99, 23} true;
    call px4_log_modulename.i32.ref.ref(2, .str31416, .str251418);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 99, 50} true;
    goto $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 99, 6} true;
    assume {:partition} !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 101, 9} true;
    assert !aliasQ354($p0, NULL);
    $i5 := $M.8[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 101, 9} true;
    $i6 := $i5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 101, 2} true;
    $r := $i6;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18parameter_update_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI18parameter_update_sE3getEv == NULL - 5976;

procedure _ZN4uORB12SubscriptionI18parameter_update_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI18parameter_update_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI19actuator_controls_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI19actuator_controls_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 5984;

procedure _ZN4uORB12SubscriptionI19actuator_controls_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI19actuator_controls_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ355($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ356($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ357($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ358($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ359($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ360($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ361($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ362($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ363($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ364($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ365($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ366($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI19actuator_controls_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI19actuator_controls_sEC2ERKS2_ == NULL - 5992;

procedure _ZN4uORB12SubscriptionI19actuator_controls_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI19actuator_controls_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ367($p1, NULL);
    $p3 := $M.9[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ368($p4, NULL);
    $i6 := $M.10[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ369($p7, NULL);
    $i9 := $M.11[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ370($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ371($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ372($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ373($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ374($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ375($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ376($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ377($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ378($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ379($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ380($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ381($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev == NULL - 6000;

procedure _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED1Ev == NULL - 6008;

procedure _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI19actuator_controls_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI19actuator_controls_sED0Ev == NULL - 6016;

procedure _ZN4uORB12SubscriptionI19actuator_controls_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI19actuator_controls_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED0Ev == NULL - 6024;

procedure _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI19actuator_controls_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI19actuator_controls_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI19actuator_controls_sE6updateEv == NULL - 6032;

procedure _ZN4uORB12SubscriptionI19actuator_controls_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI19actuator_controls_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI19actuator_controls_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI19actuator_controls_sE13check_updatedEv == NULL - 6040;

procedure _ZN4uORB12SubscriptionI19actuator_controls_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI19actuator_controls_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI19actuator_controls_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI19actuator_controls_sE3getEv == NULL - 6048;

procedure _ZN4uORB12SubscriptionI19actuator_controls_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI19actuator_controls_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_gps_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI22vehicle_gps_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6056;

procedure _ZN4uORB12SubscriptionI22vehicle_gps_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI22vehicle_gps_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ382($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ383($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ384($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ385($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ386($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ387($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ388($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ389($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ390($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ391($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ392($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ393($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ394($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ395($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ396($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ397($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ398($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ399($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assert !aliasQ400($p6 + 72, NULL);
    $M.4[$p6 + 72] := NULL;
    assert !aliasQ401($p6 + 76, NULL);
    $M.4[$p6 + 76] := NULL;
    assert !aliasQ402($p6 + 80, NULL);
    $M.4[$p6 + 80] := NULL;
    assert !aliasQ403($p6 + 84, NULL);
    $M.4[$p6 + 84] := NULL;
    assert !aliasQ404($p6 + 88, NULL);
    $M.4[$p6 + 88] := NULL;
    assert !aliasQ405($p6 + 89, NULL);
    $M.4[$p6 + 89] := NULL;
    assert !aliasQ406($p6 + 90, NULL);
    $M.4[$p6 + 90] := NULL;
    assert !aliasQ407($p6 + 91, NULL);
    $M.4[$p6 + 91] := NULL;
    assert !aliasQ408($p6 + 92, NULL);
    $M.4[$p6 + 92] := NULL;
    assert !aliasQ409($p6 + 93, NULL);
    $M.4[$p6 + 93] := NULL;
    assert !aliasQ410($p6 + 94, NULL);
    $M.4[$p6 + 94] := NULL;
    assert !aliasQ411($p6 + 95, NULL);
    $M.4[$p6 + 95] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_gps_position_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI22vehicle_gps_position_sEC2ERKS2_ == NULL - 6064;

procedure _ZN4uORB12SubscriptionI22vehicle_gps_position_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI22vehicle_gps_position_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ412($p1, NULL);
    $p3 := $M.12[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ413($p4, NULL);
    $i6 := $M.13[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ414($p7, NULL);
    $i9 := $M.14[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ415($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ416($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ417($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ418($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ419($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ420($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ421($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ422($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ423($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ424($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ425($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ426($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ427($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ428($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ429($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ430($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ431($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ432($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assert !aliasQ433($p15 + 72, NULL);
    $M.4[$p15 + 72] := NULL;
    assert !aliasQ434($p15 + 76, NULL);
    $M.4[$p15 + 76] := NULL;
    assert !aliasQ435($p15 + 80, NULL);
    $M.4[$p15 + 80] := NULL;
    assert !aliasQ436($p15 + 84, NULL);
    $M.4[$p15 + 84] := NULL;
    assert !aliasQ437($p15 + 88, NULL);
    $M.4[$p15 + 88] := NULL;
    assert !aliasQ438($p15 + 89, NULL);
    $M.4[$p15 + 89] := NULL;
    assert !aliasQ439($p15 + 90, NULL);
    $M.4[$p15 + 90] := NULL;
    assert !aliasQ440($p15 + 91, NULL);
    $M.4[$p15 + 91] := NULL;
    assert !aliasQ441($p15 + 92, NULL);
    $M.4[$p15 + 92] := NULL;
    assert !aliasQ442($p15 + 93, NULL);
    $M.4[$p15 + 93] := NULL;
    assert !aliasQ443($p15 + 94, NULL);
    $M.4[$p15 + 94] := NULL;
    assert !aliasQ444($p15 + 95, NULL);
    $M.4[$p15 + 95] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev == NULL - 6072;

procedure _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED1Ev == NULL - 6080;

procedure _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_gps_position_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI22vehicle_gps_position_sED0Ev == NULL - 6088;

procedure _ZN4uORB12SubscriptionI22vehicle_gps_position_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI22vehicle_gps_position_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED0Ev == NULL - 6096;

procedure _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI22vehicle_gps_position_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_gps_position_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI22vehicle_gps_position_sE6updateEv == NULL - 6104;

procedure _ZN4uORB12SubscriptionI22vehicle_gps_position_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI22vehicle_gps_position_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_gps_position_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI22vehicle_gps_position_sE13check_updatedEv == NULL - 6112;

procedure _ZN4uORB12SubscriptionI22vehicle_gps_position_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI22vehicle_gps_position_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_gps_position_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI22vehicle_gps_position_sE3getEv == NULL - 6120;

procedure _ZN4uORB12SubscriptionI22vehicle_gps_position_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI22vehicle_gps_position_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16satellite_info_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI16satellite_info_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6128;

procedure _ZN4uORB12SubscriptionI16satellite_info_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI16satellite_info_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ445($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI16satellite_info_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ446($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI16satellite_info_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ447($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ448($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ449($p6 + 9, NULL);
    $M.4[$p6 + 9] := NULL;
    assert !aliasQ450($p6 + 10, NULL);
    $M.4[$p6 + 10] := NULL;
    assert !aliasQ451($p6 + 11, NULL);
    $M.4[$p6 + 11] := NULL;
    assert !aliasQ452($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ453($p6 + 13, NULL);
    $M.4[$p6 + 13] := NULL;
    assert !aliasQ454($p6 + 14, NULL);
    $M.4[$p6 + 14] := NULL;
    assert !aliasQ455($p6 + 15, NULL);
    $M.4[$p6 + 15] := NULL;
    assert !aliasQ456($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ457($p6 + 17, NULL);
    $M.4[$p6 + 17] := NULL;
    assert !aliasQ458($p6 + 18, NULL);
    $M.4[$p6 + 18] := NULL;
    assert !aliasQ459($p6 + 19, NULL);
    $M.4[$p6 + 19] := NULL;
    assert !aliasQ460($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ461($p6 + 21, NULL);
    $M.4[$p6 + 21] := NULL;
    assert !aliasQ462($p6 + 22, NULL);
    $M.4[$p6 + 22] := NULL;
    assert !aliasQ463($p6 + 23, NULL);
    $M.4[$p6 + 23] := NULL;
    assert !aliasQ464($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ465($p6 + 25, NULL);
    $M.4[$p6 + 25] := NULL;
    assert !aliasQ466($p6 + 26, NULL);
    $M.4[$p6 + 26] := NULL;
    assert !aliasQ467($p6 + 27, NULL);
    $M.4[$p6 + 27] := NULL;
    assert !aliasQ468($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ469($p6 + 29, NULL);
    $M.4[$p6 + 29] := NULL;
    assert !aliasQ470($p6 + 30, NULL);
    $M.4[$p6 + 30] := NULL;
    assert !aliasQ471($p6 + 31, NULL);
    $M.4[$p6 + 31] := NULL;
    assert !aliasQ472($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ473($p6 + 33, NULL);
    $M.4[$p6 + 33] := NULL;
    assert !aliasQ474($p6 + 34, NULL);
    $M.4[$p6 + 34] := NULL;
    assert !aliasQ475($p6 + 35, NULL);
    $M.4[$p6 + 35] := NULL;
    assert !aliasQ476($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ477($p6 + 37, NULL);
    $M.4[$p6 + 37] := NULL;
    assert !aliasQ478($p6 + 38, NULL);
    $M.4[$p6 + 38] := NULL;
    assert !aliasQ479($p6 + 39, NULL);
    $M.4[$p6 + 39] := NULL;
    assert !aliasQ480($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ481($p6 + 41, NULL);
    $M.4[$p6 + 41] := NULL;
    assert !aliasQ482($p6 + 42, NULL);
    $M.4[$p6 + 42] := NULL;
    assert !aliasQ483($p6 + 43, NULL);
    $M.4[$p6 + 43] := NULL;
    assert !aliasQ484($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ485($p6 + 45, NULL);
    $M.4[$p6 + 45] := NULL;
    assert !aliasQ486($p6 + 46, NULL);
    $M.4[$p6 + 46] := NULL;
    assert !aliasQ487($p6 + 47, NULL);
    $M.4[$p6 + 47] := NULL;
    assert !aliasQ488($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ489($p6 + 49, NULL);
    $M.4[$p6 + 49] := NULL;
    assert !aliasQ490($p6 + 50, NULL);
    $M.4[$p6 + 50] := NULL;
    assert !aliasQ491($p6 + 51, NULL);
    $M.4[$p6 + 51] := NULL;
    assert !aliasQ492($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ493($p6 + 53, NULL);
    $M.4[$p6 + 53] := NULL;
    assert !aliasQ494($p6 + 54, NULL);
    $M.4[$p6 + 54] := NULL;
    assert !aliasQ495($p6 + 55, NULL);
    $M.4[$p6 + 55] := NULL;
    assert !aliasQ496($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ497($p6 + 57, NULL);
    $M.4[$p6 + 57] := NULL;
    assert !aliasQ498($p6 + 58, NULL);
    $M.4[$p6 + 58] := NULL;
    assert !aliasQ499($p6 + 59, NULL);
    $M.4[$p6 + 59] := NULL;
    assert !aliasQ500($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ501($p6 + 61, NULL);
    $M.4[$p6 + 61] := NULL;
    assert !aliasQ502($p6 + 62, NULL);
    $M.4[$p6 + 62] := NULL;
    assert !aliasQ503($p6 + 63, NULL);
    $M.4[$p6 + 63] := NULL;
    assert !aliasQ504($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ505($p6 + 65, NULL);
    $M.4[$p6 + 65] := NULL;
    assert !aliasQ506($p6 + 66, NULL);
    $M.4[$p6 + 66] := NULL;
    assert !aliasQ507($p6 + 67, NULL);
    $M.4[$p6 + 67] := NULL;
    assert !aliasQ508($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assert !aliasQ509($p6 + 69, NULL);
    $M.4[$p6 + 69] := NULL;
    assert !aliasQ510($p6 + 70, NULL);
    $M.4[$p6 + 70] := NULL;
    assert !aliasQ511($p6 + 71, NULL);
    $M.4[$p6 + 71] := NULL;
    assert !aliasQ512($p6 + 72, NULL);
    $M.4[$p6 + 72] := NULL;
    assert !aliasQ513($p6 + 73, NULL);
    $M.4[$p6 + 73] := NULL;
    assert !aliasQ514($p6 + 74, NULL);
    $M.4[$p6 + 74] := NULL;
    assert !aliasQ515($p6 + 75, NULL);
    $M.4[$p6 + 75] := NULL;
    assert !aliasQ516($p6 + 76, NULL);
    $M.4[$p6 + 76] := NULL;
    assert !aliasQ517($p6 + 77, NULL);
    $M.4[$p6 + 77] := NULL;
    assert !aliasQ518($p6 + 78, NULL);
    $M.4[$p6 + 78] := NULL;
    assert !aliasQ519($p6 + 79, NULL);
    $M.4[$p6 + 79] := NULL;
    assert !aliasQ520($p6 + 80, NULL);
    $M.4[$p6 + 80] := NULL;
    assert !aliasQ521($p6 + 81, NULL);
    $M.4[$p6 + 81] := NULL;
    assert !aliasQ522($p6 + 82, NULL);
    $M.4[$p6 + 82] := NULL;
    assert !aliasQ523($p6 + 83, NULL);
    $M.4[$p6 + 83] := NULL;
    assert !aliasQ524($p6 + 84, NULL);
    $M.4[$p6 + 84] := NULL;
    assert !aliasQ525($p6 + 85, NULL);
    $M.4[$p6 + 85] := NULL;
    assert !aliasQ526($p6 + 86, NULL);
    $M.4[$p6 + 86] := NULL;
    assert !aliasQ527($p6 + 87, NULL);
    $M.4[$p6 + 87] := NULL;
    assert !aliasQ528($p6 + 88, NULL);
    $M.4[$p6 + 88] := NULL;
    assert !aliasQ529($p6 + 89, NULL);
    $M.4[$p6 + 89] := NULL;
    assert !aliasQ530($p6 + 90, NULL);
    $M.4[$p6 + 90] := NULL;
    assert !aliasQ531($p6 + 91, NULL);
    $M.4[$p6 + 91] := NULL;
    assert !aliasQ532($p6 + 92, NULL);
    $M.4[$p6 + 92] := NULL;
    assert !aliasQ533($p6 + 93, NULL);
    $M.4[$p6 + 93] := NULL;
    assert !aliasQ534($p6 + 94, NULL);
    $M.4[$p6 + 94] := NULL;
    assert !aliasQ535($p6 + 95, NULL);
    $M.4[$p6 + 95] := NULL;
    assert !aliasQ536($p6 + 96, NULL);
    $M.4[$p6 + 96] := NULL;
    assert !aliasQ537($p6 + 97, NULL);
    $M.4[$p6 + 97] := NULL;
    assert !aliasQ538($p6 + 98, NULL);
    $M.4[$p6 + 98] := NULL;
    assert !aliasQ539($p6 + 99, NULL);
    $M.4[$p6 + 99] := NULL;
    assert !aliasQ540($p6 + 100, NULL);
    $M.4[$p6 + 100] := NULL;
    assert !aliasQ541($p6 + 101, NULL);
    $M.4[$p6 + 101] := NULL;
    assert !aliasQ542($p6 + 102, NULL);
    $M.4[$p6 + 102] := NULL;
    assert !aliasQ543($p6 + 103, NULL);
    $M.4[$p6 + 103] := NULL;
    assert !aliasQ544($p6 + 104, NULL);
    $M.4[$p6 + 104] := NULL;
    assert !aliasQ545($p6 + 105, NULL);
    $M.4[$p6 + 105] := NULL;
    assert !aliasQ546($p6 + 106, NULL);
    $M.4[$p6 + 106] := NULL;
    assert !aliasQ547($p6 + 107, NULL);
    $M.4[$p6 + 107] := NULL;
    assert !aliasQ548($p6 + 108, NULL);
    $M.4[$p6 + 108] := NULL;
    assert !aliasQ549($p6 + 109, NULL);
    $M.4[$p6 + 109] := NULL;
    assert !aliasQ550($p6 + 110, NULL);
    $M.4[$p6 + 110] := NULL;
    assert !aliasQ551($p6 + 111, NULL);
    $M.4[$p6 + 111] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16satellite_info_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI16satellite_info_sEC2ERKS2_ == NULL - 6136;

procedure _ZN4uORB12SubscriptionI16satellite_info_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI16satellite_info_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ552($p1, NULL);
    $p3 := $M.15[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ553($p4, NULL);
    $i6 := $M.16[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ554($p7, NULL);
    $i9 := $M.17[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ555($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI16satellite_info_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ556($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI16satellite_info_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ557($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ558($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ559($p15 + 9, NULL);
    $M.4[$p15 + 9] := NULL;
    assert !aliasQ560($p15 + 10, NULL);
    $M.4[$p15 + 10] := NULL;
    assert !aliasQ561($p15 + 11, NULL);
    $M.4[$p15 + 11] := NULL;
    assert !aliasQ562($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ563($p15 + 13, NULL);
    $M.4[$p15 + 13] := NULL;
    assert !aliasQ564($p15 + 14, NULL);
    $M.4[$p15 + 14] := NULL;
    assert !aliasQ565($p15 + 15, NULL);
    $M.4[$p15 + 15] := NULL;
    assert !aliasQ566($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ567($p15 + 17, NULL);
    $M.4[$p15 + 17] := NULL;
    assert !aliasQ568($p15 + 18, NULL);
    $M.4[$p15 + 18] := NULL;
    assert !aliasQ569($p15 + 19, NULL);
    $M.4[$p15 + 19] := NULL;
    assert !aliasQ570($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ571($p15 + 21, NULL);
    $M.4[$p15 + 21] := NULL;
    assert !aliasQ572($p15 + 22, NULL);
    $M.4[$p15 + 22] := NULL;
    assert !aliasQ573($p15 + 23, NULL);
    $M.4[$p15 + 23] := NULL;
    assert !aliasQ574($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ575($p15 + 25, NULL);
    $M.4[$p15 + 25] := NULL;
    assert !aliasQ576($p15 + 26, NULL);
    $M.4[$p15 + 26] := NULL;
    assert !aliasQ577($p15 + 27, NULL);
    $M.4[$p15 + 27] := NULL;
    assert !aliasQ578($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ579($p15 + 29, NULL);
    $M.4[$p15 + 29] := NULL;
    assert !aliasQ580($p15 + 30, NULL);
    $M.4[$p15 + 30] := NULL;
    assert !aliasQ581($p15 + 31, NULL);
    $M.4[$p15 + 31] := NULL;
    assert !aliasQ582($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ583($p15 + 33, NULL);
    $M.4[$p15 + 33] := NULL;
    assert !aliasQ584($p15 + 34, NULL);
    $M.4[$p15 + 34] := NULL;
    assert !aliasQ585($p15 + 35, NULL);
    $M.4[$p15 + 35] := NULL;
    assert !aliasQ586($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ587($p15 + 37, NULL);
    $M.4[$p15 + 37] := NULL;
    assert !aliasQ588($p15 + 38, NULL);
    $M.4[$p15 + 38] := NULL;
    assert !aliasQ589($p15 + 39, NULL);
    $M.4[$p15 + 39] := NULL;
    assert !aliasQ590($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ591($p15 + 41, NULL);
    $M.4[$p15 + 41] := NULL;
    assert !aliasQ592($p15 + 42, NULL);
    $M.4[$p15 + 42] := NULL;
    assert !aliasQ593($p15 + 43, NULL);
    $M.4[$p15 + 43] := NULL;
    assert !aliasQ594($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ595($p15 + 45, NULL);
    $M.4[$p15 + 45] := NULL;
    assert !aliasQ596($p15 + 46, NULL);
    $M.4[$p15 + 46] := NULL;
    assert !aliasQ597($p15 + 47, NULL);
    $M.4[$p15 + 47] := NULL;
    assert !aliasQ598($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ599($p15 + 49, NULL);
    $M.4[$p15 + 49] := NULL;
    assert !aliasQ600($p15 + 50, NULL);
    $M.4[$p15 + 50] := NULL;
    assert !aliasQ601($p15 + 51, NULL);
    $M.4[$p15 + 51] := NULL;
    assert !aliasQ602($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ603($p15 + 53, NULL);
    $M.4[$p15 + 53] := NULL;
    assert !aliasQ604($p15 + 54, NULL);
    $M.4[$p15 + 54] := NULL;
    assert !aliasQ605($p15 + 55, NULL);
    $M.4[$p15 + 55] := NULL;
    assert !aliasQ606($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ607($p15 + 57, NULL);
    $M.4[$p15 + 57] := NULL;
    assert !aliasQ608($p15 + 58, NULL);
    $M.4[$p15 + 58] := NULL;
    assert !aliasQ609($p15 + 59, NULL);
    $M.4[$p15 + 59] := NULL;
    assert !aliasQ610($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ611($p15 + 61, NULL);
    $M.4[$p15 + 61] := NULL;
    assert !aliasQ612($p15 + 62, NULL);
    $M.4[$p15 + 62] := NULL;
    assert !aliasQ613($p15 + 63, NULL);
    $M.4[$p15 + 63] := NULL;
    assert !aliasQ614($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ615($p15 + 65, NULL);
    $M.4[$p15 + 65] := NULL;
    assert !aliasQ616($p15 + 66, NULL);
    $M.4[$p15 + 66] := NULL;
    assert !aliasQ617($p15 + 67, NULL);
    $M.4[$p15 + 67] := NULL;
    assert !aliasQ618($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assert !aliasQ619($p15 + 69, NULL);
    $M.4[$p15 + 69] := NULL;
    assert !aliasQ620($p15 + 70, NULL);
    $M.4[$p15 + 70] := NULL;
    assert !aliasQ621($p15 + 71, NULL);
    $M.4[$p15 + 71] := NULL;
    assert !aliasQ622($p15 + 72, NULL);
    $M.4[$p15 + 72] := NULL;
    assert !aliasQ623($p15 + 73, NULL);
    $M.4[$p15 + 73] := NULL;
    assert !aliasQ624($p15 + 74, NULL);
    $M.4[$p15 + 74] := NULL;
    assert !aliasQ625($p15 + 75, NULL);
    $M.4[$p15 + 75] := NULL;
    assert !aliasQ626($p15 + 76, NULL);
    $M.4[$p15 + 76] := NULL;
    assert !aliasQ627($p15 + 77, NULL);
    $M.4[$p15 + 77] := NULL;
    assert !aliasQ628($p15 + 78, NULL);
    $M.4[$p15 + 78] := NULL;
    assert !aliasQ629($p15 + 79, NULL);
    $M.4[$p15 + 79] := NULL;
    assert !aliasQ630($p15 + 80, NULL);
    $M.4[$p15 + 80] := NULL;
    assert !aliasQ631($p15 + 81, NULL);
    $M.4[$p15 + 81] := NULL;
    assert !aliasQ632($p15 + 82, NULL);
    $M.4[$p15 + 82] := NULL;
    assert !aliasQ633($p15 + 83, NULL);
    $M.4[$p15 + 83] := NULL;
    assert !aliasQ634($p15 + 84, NULL);
    $M.4[$p15 + 84] := NULL;
    assert !aliasQ635($p15 + 85, NULL);
    $M.4[$p15 + 85] := NULL;
    assert !aliasQ636($p15 + 86, NULL);
    $M.4[$p15 + 86] := NULL;
    assert !aliasQ637($p15 + 87, NULL);
    $M.4[$p15 + 87] := NULL;
    assert !aliasQ638($p15 + 88, NULL);
    $M.4[$p15 + 88] := NULL;
    assert !aliasQ639($p15 + 89, NULL);
    $M.4[$p15 + 89] := NULL;
    assert !aliasQ640($p15 + 90, NULL);
    $M.4[$p15 + 90] := NULL;
    assert !aliasQ641($p15 + 91, NULL);
    $M.4[$p15 + 91] := NULL;
    assert !aliasQ642($p15 + 92, NULL);
    $M.4[$p15 + 92] := NULL;
    assert !aliasQ643($p15 + 93, NULL);
    $M.4[$p15 + 93] := NULL;
    assert !aliasQ644($p15 + 94, NULL);
    $M.4[$p15 + 94] := NULL;
    assert !aliasQ645($p15 + 95, NULL);
    $M.4[$p15 + 95] := NULL;
    assert !aliasQ646($p15 + 96, NULL);
    $M.4[$p15 + 96] := NULL;
    assert !aliasQ647($p15 + 97, NULL);
    $M.4[$p15 + 97] := NULL;
    assert !aliasQ648($p15 + 98, NULL);
    $M.4[$p15 + 98] := NULL;
    assert !aliasQ649($p15 + 99, NULL);
    $M.4[$p15 + 99] := NULL;
    assert !aliasQ650($p15 + 100, NULL);
    $M.4[$p15 + 100] := NULL;
    assert !aliasQ651($p15 + 101, NULL);
    $M.4[$p15 + 101] := NULL;
    assert !aliasQ652($p15 + 102, NULL);
    $M.4[$p15 + 102] := NULL;
    assert !aliasQ653($p15 + 103, NULL);
    $M.4[$p15 + 103] := NULL;
    assert !aliasQ654($p15 + 104, NULL);
    $M.4[$p15 + 104] := NULL;
    assert !aliasQ655($p15 + 105, NULL);
    $M.4[$p15 + 105] := NULL;
    assert !aliasQ656($p15 + 106, NULL);
    $M.4[$p15 + 106] := NULL;
    assert !aliasQ657($p15 + 107, NULL);
    $M.4[$p15 + 107] := NULL;
    assert !aliasQ658($p15 + 108, NULL);
    $M.4[$p15 + 108] := NULL;
    assert !aliasQ659($p15 + 109, NULL);
    $M.4[$p15 + 109] := NULL;
    assert !aliasQ660($p15 + 110, NULL);
    $M.4[$p15 + 110] := NULL;
    assert !aliasQ661($p15 + 111, NULL);
    $M.4[$p15 + 111] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16satellite_info_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI16satellite_info_sED2Ev == NULL - 6144;

procedure _ZN4uORB12SubscriptionI16satellite_info_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI16satellite_info_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI16satellite_info_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI16satellite_info_sED1Ev == NULL - 6152;

procedure _ZThn24_N4uORB12SubscriptionI16satellite_info_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI16satellite_info_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI16satellite_info_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16satellite_info_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI16satellite_info_sED0Ev == NULL - 6160;

procedure _ZN4uORB12SubscriptionI16satellite_info_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI16satellite_info_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI16satellite_info_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI16satellite_info_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI16satellite_info_sED0Ev == NULL - 6168;

procedure _ZThn24_N4uORB12SubscriptionI16satellite_info_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI16satellite_info_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI16satellite_info_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16satellite_info_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI16satellite_info_sE6updateEv == NULL - 6176;

procedure _ZN4uORB12SubscriptionI16satellite_info_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI16satellite_info_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16satellite_info_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI16satellite_info_sE13check_updatedEv == NULL - 6184;

procedure _ZN4uORB12SubscriptionI16satellite_info_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI16satellite_info_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16satellite_info_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI16satellite_info_sE3getEv == NULL - 6192;

procedure _ZN4uORB12SubscriptionI16satellite_info_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI16satellite_info_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17sensor_combined_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI17sensor_combined_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6200;

procedure _ZN4uORB12SubscriptionI17sensor_combined_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI17sensor_combined_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ662($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ663($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ664($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ665($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ666($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ667($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ668($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ669($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ670($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ671($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ672($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ673($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ674($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ675($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ676($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ677($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ678($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ679($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ680($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17sensor_combined_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI17sensor_combined_sEC2ERKS2_ == NULL - 6208;

procedure _ZN4uORB12SubscriptionI17sensor_combined_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI17sensor_combined_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ681($p1, NULL);
    $p3 := $M.18[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ682($p4, NULL);
    $i6 := $M.19[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ683($p7, NULL);
    $i9 := $M.20[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ684($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ685($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ686($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ687($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ688($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ689($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ690($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ691($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ692($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ693($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ694($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ695($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ696($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ697($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ698($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ699($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ700($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ701($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ702($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev == NULL - 6216;

procedure _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED1Ev == NULL - 6224;

procedure _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17sensor_combined_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI17sensor_combined_sED0Ev == NULL - 6232;

procedure _ZN4uORB12SubscriptionI17sensor_combined_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI17sensor_combined_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED0Ev == NULL - 6240;

procedure _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI17sensor_combined_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17sensor_combined_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI17sensor_combined_sE6updateEv == NULL - 6248;

procedure _ZN4uORB12SubscriptionI17sensor_combined_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI17sensor_combined_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17sensor_combined_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI17sensor_combined_sE13check_updatedEv == NULL - 6256;

procedure _ZN4uORB12SubscriptionI17sensor_combined_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI17sensor_combined_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17sensor_combined_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI17sensor_combined_sE3getEv == NULL - 6264;

procedure _ZN4uORB12SubscriptionI17sensor_combined_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI17sensor_combined_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI12hil_sensor_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI12hil_sensor_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6272;

procedure _ZN4uORB12SubscriptionI12hil_sensor_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI12hil_sensor_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ703($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ704($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ705($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ706($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ707($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ708($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ709($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ710($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ711($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ712($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ713($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ714($p6 + 72, NULL);
    $M.4[$p6 + 72] := NULL;
    assert !aliasQ715($p6 + 80, NULL);
    $M.4[$p6 + 80] := NULL;
    assert !aliasQ716($p6 + 88, NULL);
    $M.4[$p6 + 88] := NULL;
    assert !aliasQ717($p6 + 96, NULL);
    $M.4[$p6 + 96] := NULL;
    assert !aliasQ718($p6 + 104, NULL);
    $M.4[$p6 + 104] := NULL;
    assert !aliasQ719($p6 + 108, NULL);
    $M.4[$p6 + 108] := NULL;
    assert !aliasQ720($p6 + 112, NULL);
    $M.4[$p6 + 112] := NULL;
    assert !aliasQ721($p6 + 116, NULL);
    $M.4[$p6 + 116] := NULL;
    assert !aliasQ722($p6 + 120, NULL);
    $M.4[$p6 + 120] := NULL;
    assert !aliasQ723($p6 + 124, NULL);
    $M.4[$p6 + 124] := NULL;
    assert !aliasQ724($p6 + 128, NULL);
    $M.4[$p6 + 128] := NULL;
    assert !aliasQ725($p6 + 132, NULL);
    $M.4[$p6 + 132] := NULL;
    assert !aliasQ726($p6 + 136, NULL);
    $M.4[$p6 + 136] := NULL;
    assert !aliasQ727($p6 + 140, NULL);
    $M.4[$p6 + 140] := NULL;
    assert !aliasQ728($p6 + 144, NULL);
    $M.4[$p6 + 144] := NULL;
    assert !aliasQ729($p6 + 148, NULL);
    $M.4[$p6 + 148] := NULL;
    assert !aliasQ730($p6 + 152, NULL);
    $M.4[$p6 + 152] := NULL;
    assert !aliasQ731($p6 + 156, NULL);
    $M.4[$p6 + 156] := NULL;
    assert !aliasQ732($p6 + 160, NULL);
    $M.4[$p6 + 160] := NULL;
    assert !aliasQ733($p6 + 164, NULL);
    $M.4[$p6 + 164] := NULL;
    assert !aliasQ734($p6 + 168, NULL);
    $M.4[$p6 + 168] := NULL;
    assert !aliasQ735($p6 + 172, NULL);
    $M.4[$p6 + 172] := NULL;
    assert !aliasQ736($p6 + 176, NULL);
    $M.4[$p6 + 176] := NULL;
    assert !aliasQ737($p6 + 180, NULL);
    $M.4[$p6 + 180] := NULL;
    assert !aliasQ738($p6 + 184, NULL);
    $M.4[$p6 + 184] := NULL;
    assert !aliasQ739($p6 + 188, NULL);
    $M.4[$p6 + 188] := NULL;
    assert !aliasQ740($p6 + 192, NULL);
    $M.4[$p6 + 192] := NULL;
    assert !aliasQ741($p6 + 196, NULL);
    $M.4[$p6 + 196] := NULL;
    assert !aliasQ742($p6 + 200, NULL);
    $M.4[$p6 + 200] := NULL;
    assert !aliasQ743($p6 + 204, NULL);
    $M.4[$p6 + 204] := NULL;
    assert !aliasQ744($p6 + 208, NULL);
    $M.4[$p6 + 208] := NULL;
    assert !aliasQ745($p6 + 212, NULL);
    $M.4[$p6 + 212] := NULL;
    assert !aliasQ746($p6 + 216, NULL);
    $M.4[$p6 + 216] := NULL;
    assert !aliasQ747($p6 + 220, NULL);
    $M.4[$p6 + 220] := NULL;
    assert !aliasQ748($p6 + 224, NULL);
    $M.4[$p6 + 224] := NULL;
    assert !aliasQ749($p6 + 228, NULL);
    $M.4[$p6 + 228] := NULL;
    assert !aliasQ750($p6 + 232, NULL);
    $M.4[$p6 + 232] := NULL;
    assert !aliasQ751($p6 + 236, NULL);
    $M.4[$p6 + 236] := NULL;
    assert !aliasQ752($p6 + 240, NULL);
    $M.4[$p6 + 240] := NULL;
    assert !aliasQ753($p6 + 244, NULL);
    $M.4[$p6 + 244] := NULL;
    assert !aliasQ754($p6 + 248, NULL);
    $M.4[$p6 + 248] := NULL;
    assert !aliasQ755($p6 + 252, NULL);
    $M.4[$p6 + 252] := NULL;
    assert !aliasQ756($p6 + 256, NULL);
    $M.4[$p6 + 256] := NULL;
    assert !aliasQ757($p6 + 260, NULL);
    $M.4[$p6 + 260] := NULL;
    assert !aliasQ758($p6 + 264, NULL);
    $M.4[$p6 + 264] := NULL;
    assert !aliasQ759($p6 + 268, NULL);
    $M.4[$p6 + 268] := NULL;
    assert !aliasQ760($p6 + 272, NULL);
    $M.4[$p6 + 272] := NULL;
    assert !aliasQ761($p6 + 276, NULL);
    $M.4[$p6 + 276] := NULL;
    assert !aliasQ762($p6 + 280, NULL);
    $M.4[$p6 + 280] := NULL;
    assert !aliasQ763($p6 + 284, NULL);
    $M.4[$p6 + 284] := NULL;
    assert !aliasQ764($p6 + 288, NULL);
    $M.4[$p6 + 288] := NULL;
    assert !aliasQ765($p6 + 292, NULL);
    $M.4[$p6 + 292] := NULL;
    assert !aliasQ766($p6 + 296, NULL);
    $M.4[$p6 + 296] := NULL;
    assert !aliasQ767($p6 + 300, NULL);
    $M.4[$p6 + 300] := NULL;
    assert !aliasQ768($p6 + 304, NULL);
    $M.4[$p6 + 304] := NULL;
    assert !aliasQ769($p6 + 308, NULL);
    $M.4[$p6 + 308] := NULL;
    assert !aliasQ770($p6 + 312, NULL);
    $M.4[$p6 + 312] := NULL;
    assert !aliasQ771($p6 + 316, NULL);
    $M.4[$p6 + 316] := NULL;
    assert !aliasQ772($p6 + 320, NULL);
    $M.4[$p6 + 320] := NULL;
    assert !aliasQ773($p6 + 324, NULL);
    $M.4[$p6 + 324] := NULL;
    assert !aliasQ774($p6 + 328, NULL);
    $M.4[$p6 + 328] := NULL;
    assert !aliasQ775($p6 + 332, NULL);
    $M.4[$p6 + 332] := NULL;
    assert !aliasQ776($p6 + 336, NULL);
    $M.4[$p6 + 336] := NULL;
    assert !aliasQ777($p6 + 340, NULL);
    $M.4[$p6 + 340] := NULL;
    assert !aliasQ778($p6 + 344, NULL);
    $M.4[$p6 + 344] := NULL;
    assert !aliasQ779($p6 + 348, NULL);
    $M.4[$p6 + 348] := NULL;
    assert !aliasQ780($p6 + 352, NULL);
    $M.4[$p6 + 352] := NULL;
    assert !aliasQ781($p6 + 356, NULL);
    $M.4[$p6 + 356] := NULL;
    assert !aliasQ782($p6 + 360, NULL);
    $M.4[$p6 + 360] := NULL;
    assert !aliasQ783($p6 + 364, NULL);
    $M.4[$p6 + 364] := NULL;
    assert !aliasQ784($p6 + 368, NULL);
    $M.4[$p6 + 368] := NULL;
    assert !aliasQ785($p6 + 372, NULL);
    $M.4[$p6 + 372] := NULL;
    assert !aliasQ786($p6 + 376, NULL);
    $M.4[$p6 + 376] := NULL;
    assert !aliasQ787($p6 + 380, NULL);
    $M.4[$p6 + 380] := NULL;
    assert !aliasQ788($p6 + 382, NULL);
    $M.4[$p6 + 382] := NULL;
    assert !aliasQ789($p6 + 384, NULL);
    $M.4[$p6 + 384] := NULL;
    assert !aliasQ790($p6 + 386, NULL);
    $M.4[$p6 + 386] := NULL;
    assert !aliasQ791($p6 + 388, NULL);
    $M.4[$p6 + 388] := NULL;
    assert !aliasQ792($p6 + 390, NULL);
    $M.4[$p6 + 390] := NULL;
    assert !aliasQ793($p6 + 392, NULL);
    $M.4[$p6 + 392] := NULL;
    assert !aliasQ794($p6 + 394, NULL);
    $M.4[$p6 + 394] := NULL;
    assert !aliasQ795($p6 + 396, NULL);
    $M.4[$p6 + 396] := NULL;
    assert !aliasQ796($p6 + 398, NULL);
    $M.4[$p6 + 398] := NULL;
    assert !aliasQ797($p6 + 400, NULL);
    $M.4[$p6 + 400] := NULL;
    assert !aliasQ798($p6 + 402, NULL);
    $M.4[$p6 + 402] := NULL;
    assert !aliasQ799($p6 + 404, NULL);
    $M.4[$p6 + 404] := NULL;
    assert !aliasQ800($p6 + 406, NULL);
    $M.4[$p6 + 406] := NULL;
    assert !aliasQ801($p6 + 408, NULL);
    $M.4[$p6 + 408] := NULL;
    assert !aliasQ802($p6 + 410, NULL);
    $M.4[$p6 + 410] := NULL;
    assert !aliasQ803($p6 + 412, NULL);
    $M.4[$p6 + 412] := NULL;
    assert !aliasQ804($p6 + 414, NULL);
    $M.4[$p6 + 414] := NULL;
    assert !aliasQ805($p6 + 416, NULL);
    $M.4[$p6 + 416] := NULL;
    assert !aliasQ806($p6 + 418, NULL);
    $M.4[$p6 + 418] := NULL;
    assert !aliasQ807($p6 + 420, NULL);
    $M.4[$p6 + 420] := NULL;
    assert !aliasQ808($p6 + 422, NULL);
    $M.4[$p6 + 422] := NULL;
    assert !aliasQ809($p6 + 424, NULL);
    $M.4[$p6 + 424] := NULL;
    assert !aliasQ810($p6 + 426, NULL);
    $M.4[$p6 + 426] := NULL;
    assert !aliasQ811($p6 + 428, NULL);
    $M.4[$p6 + 428] := NULL;
    assert !aliasQ812($p6 + 430, NULL);
    $M.4[$p6 + 430] := NULL;
    assert !aliasQ813($p6 + 432, NULL);
    $M.4[$p6 + 432] := NULL;
    assert !aliasQ814($p6 + 434, NULL);
    $M.4[$p6 + 434] := NULL;
    assert !aliasQ815($p6 + 436, NULL);
    $M.4[$p6 + 436] := NULL;
    assert !aliasQ816($p6 + 438, NULL);
    $M.4[$p6 + 438] := NULL;
    assert !aliasQ817($p6 + 440, NULL);
    $M.4[$p6 + 440] := NULL;
    assert !aliasQ818($p6 + 442, NULL);
    $M.4[$p6 + 442] := NULL;
    assert !aliasQ819($p6 + 444, NULL);
    $M.4[$p6 + 444] := NULL;
    assert !aliasQ820($p6 + 446, NULL);
    $M.4[$p6 + 446] := NULL;
    assert !aliasQ821($p6 + 448, NULL);
    $M.4[$p6 + 448] := NULL;
    assert !aliasQ822($p6 + 450, NULL);
    $M.4[$p6 + 450] := NULL;
    assert !aliasQ823($p6 + 452, NULL);
    $M.4[$p6 + 452] := NULL;
    assert !aliasQ824($p6 + 454, NULL);
    $M.4[$p6 + 454] := NULL;
    assert !aliasQ825($p6 + 456, NULL);
    $M.4[$p6 + 456] := NULL;
    assert !aliasQ826($p6 + 458, NULL);
    $M.4[$p6 + 458] := NULL;
    assert !aliasQ827($p6 + 459, NULL);
    $M.4[$p6 + 459] := NULL;
    assert !aliasQ828($p6 + 460, NULL);
    $M.4[$p6 + 460] := NULL;
    assert !aliasQ829($p6 + 461, NULL);
    $M.4[$p6 + 461] := NULL;
    assert !aliasQ830($p6 + 462, NULL);
    $M.4[$p6 + 462] := NULL;
    assert !aliasQ831($p6 + 463, NULL);
    $M.4[$p6 + 463] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI12hil_sensor_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI12hil_sensor_sEC2ERKS2_ == NULL - 6280;

procedure _ZN4uORB12SubscriptionI12hil_sensor_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI12hil_sensor_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ832($p1, NULL);
    $p3 := $M.21[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ833($p4, NULL);
    $i6 := $M.22[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ834($p7, NULL);
    $i9 := $M.23[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ835($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ836($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ837($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ838($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ839($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ840($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ841($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ842($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ843($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ844($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ845($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ846($p15 + 72, NULL);
    $M.4[$p15 + 72] := NULL;
    assert !aliasQ847($p15 + 80, NULL);
    $M.4[$p15 + 80] := NULL;
    assert !aliasQ848($p15 + 88, NULL);
    $M.4[$p15 + 88] := NULL;
    assert !aliasQ849($p15 + 96, NULL);
    $M.4[$p15 + 96] := NULL;
    assert !aliasQ850($p15 + 104, NULL);
    $M.4[$p15 + 104] := NULL;
    assert !aliasQ851($p15 + 108, NULL);
    $M.4[$p15 + 108] := NULL;
    assert !aliasQ852($p15 + 112, NULL);
    $M.4[$p15 + 112] := NULL;
    assert !aliasQ853($p15 + 116, NULL);
    $M.4[$p15 + 116] := NULL;
    assert !aliasQ854($p15 + 120, NULL);
    $M.4[$p15 + 120] := NULL;
    assert !aliasQ855($p15 + 124, NULL);
    $M.4[$p15 + 124] := NULL;
    assert !aliasQ856($p15 + 128, NULL);
    $M.4[$p15 + 128] := NULL;
    assert !aliasQ857($p15 + 132, NULL);
    $M.4[$p15 + 132] := NULL;
    assert !aliasQ858($p15 + 136, NULL);
    $M.4[$p15 + 136] := NULL;
    assert !aliasQ859($p15 + 140, NULL);
    $M.4[$p15 + 140] := NULL;
    assert !aliasQ860($p15 + 144, NULL);
    $M.4[$p15 + 144] := NULL;
    assert !aliasQ861($p15 + 148, NULL);
    $M.4[$p15 + 148] := NULL;
    assert !aliasQ862($p15 + 152, NULL);
    $M.4[$p15 + 152] := NULL;
    assert !aliasQ863($p15 + 156, NULL);
    $M.4[$p15 + 156] := NULL;
    assert !aliasQ864($p15 + 160, NULL);
    $M.4[$p15 + 160] := NULL;
    assert !aliasQ865($p15 + 164, NULL);
    $M.4[$p15 + 164] := NULL;
    assert !aliasQ866($p15 + 168, NULL);
    $M.4[$p15 + 168] := NULL;
    assert !aliasQ867($p15 + 172, NULL);
    $M.4[$p15 + 172] := NULL;
    assert !aliasQ868($p15 + 176, NULL);
    $M.4[$p15 + 176] := NULL;
    assert !aliasQ869($p15 + 180, NULL);
    $M.4[$p15 + 180] := NULL;
    assert !aliasQ870($p15 + 184, NULL);
    $M.4[$p15 + 184] := NULL;
    assert !aliasQ871($p15 + 188, NULL);
    $M.4[$p15 + 188] := NULL;
    assert !aliasQ872($p15 + 192, NULL);
    $M.4[$p15 + 192] := NULL;
    assert !aliasQ873($p15 + 196, NULL);
    $M.4[$p15 + 196] := NULL;
    assert !aliasQ874($p15 + 200, NULL);
    $M.4[$p15 + 200] := NULL;
    assert !aliasQ875($p15 + 204, NULL);
    $M.4[$p15 + 204] := NULL;
    assert !aliasQ876($p15 + 208, NULL);
    $M.4[$p15 + 208] := NULL;
    assert !aliasQ877($p15 + 212, NULL);
    $M.4[$p15 + 212] := NULL;
    assert !aliasQ878($p15 + 216, NULL);
    $M.4[$p15 + 216] := NULL;
    assert !aliasQ879($p15 + 220, NULL);
    $M.4[$p15 + 220] := NULL;
    assert !aliasQ880($p15 + 224, NULL);
    $M.4[$p15 + 224] := NULL;
    assert !aliasQ881($p15 + 228, NULL);
    $M.4[$p15 + 228] := NULL;
    assert !aliasQ882($p15 + 232, NULL);
    $M.4[$p15 + 232] := NULL;
    assert !aliasQ883($p15 + 236, NULL);
    $M.4[$p15 + 236] := NULL;
    assert !aliasQ884($p15 + 240, NULL);
    $M.4[$p15 + 240] := NULL;
    assert !aliasQ885($p15 + 244, NULL);
    $M.4[$p15 + 244] := NULL;
    assert !aliasQ886($p15 + 248, NULL);
    $M.4[$p15 + 248] := NULL;
    assert !aliasQ887($p15 + 252, NULL);
    $M.4[$p15 + 252] := NULL;
    assert !aliasQ888($p15 + 256, NULL);
    $M.4[$p15 + 256] := NULL;
    assert !aliasQ889($p15 + 260, NULL);
    $M.4[$p15 + 260] := NULL;
    assert !aliasQ890($p15 + 264, NULL);
    $M.4[$p15 + 264] := NULL;
    assert !aliasQ891($p15 + 268, NULL);
    $M.4[$p15 + 268] := NULL;
    assert !aliasQ892($p15 + 272, NULL);
    $M.4[$p15 + 272] := NULL;
    assert !aliasQ893($p15 + 276, NULL);
    $M.4[$p15 + 276] := NULL;
    assert !aliasQ894($p15 + 280, NULL);
    $M.4[$p15 + 280] := NULL;
    assert !aliasQ895($p15 + 284, NULL);
    $M.4[$p15 + 284] := NULL;
    assert !aliasQ896($p15 + 288, NULL);
    $M.4[$p15 + 288] := NULL;
    assert !aliasQ897($p15 + 292, NULL);
    $M.4[$p15 + 292] := NULL;
    assert !aliasQ898($p15 + 296, NULL);
    $M.4[$p15 + 296] := NULL;
    assert !aliasQ899($p15 + 300, NULL);
    $M.4[$p15 + 300] := NULL;
    assert !aliasQ900($p15 + 304, NULL);
    $M.4[$p15 + 304] := NULL;
    assert !aliasQ901($p15 + 308, NULL);
    $M.4[$p15 + 308] := NULL;
    assert !aliasQ902($p15 + 312, NULL);
    $M.4[$p15 + 312] := NULL;
    assert !aliasQ903($p15 + 316, NULL);
    $M.4[$p15 + 316] := NULL;
    assert !aliasQ904($p15 + 320, NULL);
    $M.4[$p15 + 320] := NULL;
    assert !aliasQ905($p15 + 324, NULL);
    $M.4[$p15 + 324] := NULL;
    assert !aliasQ906($p15 + 328, NULL);
    $M.4[$p15 + 328] := NULL;
    assert !aliasQ907($p15 + 332, NULL);
    $M.4[$p15 + 332] := NULL;
    assert !aliasQ908($p15 + 336, NULL);
    $M.4[$p15 + 336] := NULL;
    assert !aliasQ909($p15 + 340, NULL);
    $M.4[$p15 + 340] := NULL;
    assert !aliasQ910($p15 + 344, NULL);
    $M.4[$p15 + 344] := NULL;
    assert !aliasQ911($p15 + 348, NULL);
    $M.4[$p15 + 348] := NULL;
    assert !aliasQ912($p15 + 352, NULL);
    $M.4[$p15 + 352] := NULL;
    assert !aliasQ913($p15 + 356, NULL);
    $M.4[$p15 + 356] := NULL;
    assert !aliasQ914($p15 + 360, NULL);
    $M.4[$p15 + 360] := NULL;
    assert !aliasQ915($p15 + 364, NULL);
    $M.4[$p15 + 364] := NULL;
    assert !aliasQ916($p15 + 368, NULL);
    $M.4[$p15 + 368] := NULL;
    assert !aliasQ917($p15 + 372, NULL);
    $M.4[$p15 + 372] := NULL;
    assert !aliasQ918($p15 + 376, NULL);
    $M.4[$p15 + 376] := NULL;
    assert !aliasQ919($p15 + 380, NULL);
    $M.4[$p15 + 380] := NULL;
    assert !aliasQ920($p15 + 382, NULL);
    $M.4[$p15 + 382] := NULL;
    assert !aliasQ921($p15 + 384, NULL);
    $M.4[$p15 + 384] := NULL;
    assert !aliasQ922($p15 + 386, NULL);
    $M.4[$p15 + 386] := NULL;
    assert !aliasQ923($p15 + 388, NULL);
    $M.4[$p15 + 388] := NULL;
    assert !aliasQ924($p15 + 390, NULL);
    $M.4[$p15 + 390] := NULL;
    assert !aliasQ925($p15 + 392, NULL);
    $M.4[$p15 + 392] := NULL;
    assert !aliasQ926($p15 + 394, NULL);
    $M.4[$p15 + 394] := NULL;
    assert !aliasQ927($p15 + 396, NULL);
    $M.4[$p15 + 396] := NULL;
    assert !aliasQ928($p15 + 398, NULL);
    $M.4[$p15 + 398] := NULL;
    assert !aliasQ929($p15 + 400, NULL);
    $M.4[$p15 + 400] := NULL;
    assert !aliasQ930($p15 + 402, NULL);
    $M.4[$p15 + 402] := NULL;
    assert !aliasQ931($p15 + 404, NULL);
    $M.4[$p15 + 404] := NULL;
    assert !aliasQ932($p15 + 406, NULL);
    $M.4[$p15 + 406] := NULL;
    assert !aliasQ933($p15 + 408, NULL);
    $M.4[$p15 + 408] := NULL;
    assert !aliasQ934($p15 + 410, NULL);
    $M.4[$p15 + 410] := NULL;
    assert !aliasQ935($p15 + 412, NULL);
    $M.4[$p15 + 412] := NULL;
    assert !aliasQ936($p15 + 414, NULL);
    $M.4[$p15 + 414] := NULL;
    assert !aliasQ937($p15 + 416, NULL);
    $M.4[$p15 + 416] := NULL;
    assert !aliasQ938($p15 + 418, NULL);
    $M.4[$p15 + 418] := NULL;
    assert !aliasQ939($p15 + 420, NULL);
    $M.4[$p15 + 420] := NULL;
    assert !aliasQ940($p15 + 422, NULL);
    $M.4[$p15 + 422] := NULL;
    assert !aliasQ941($p15 + 424, NULL);
    $M.4[$p15 + 424] := NULL;
    assert !aliasQ942($p15 + 426, NULL);
    $M.4[$p15 + 426] := NULL;
    assert !aliasQ943($p15 + 428, NULL);
    $M.4[$p15 + 428] := NULL;
    assert !aliasQ944($p15 + 430, NULL);
    $M.4[$p15 + 430] := NULL;
    assert !aliasQ945($p15 + 432, NULL);
    $M.4[$p15 + 432] := NULL;
    assert !aliasQ946($p15 + 434, NULL);
    $M.4[$p15 + 434] := NULL;
    assert !aliasQ947($p15 + 436, NULL);
    $M.4[$p15 + 436] := NULL;
    assert !aliasQ948($p15 + 438, NULL);
    $M.4[$p15 + 438] := NULL;
    assert !aliasQ949($p15 + 440, NULL);
    $M.4[$p15 + 440] := NULL;
    assert !aliasQ950($p15 + 442, NULL);
    $M.4[$p15 + 442] := NULL;
    assert !aliasQ951($p15 + 444, NULL);
    $M.4[$p15 + 444] := NULL;
    assert !aliasQ952($p15 + 446, NULL);
    $M.4[$p15 + 446] := NULL;
    assert !aliasQ953($p15 + 448, NULL);
    $M.4[$p15 + 448] := NULL;
    assert !aliasQ954($p15 + 450, NULL);
    $M.4[$p15 + 450] := NULL;
    assert !aliasQ955($p15 + 452, NULL);
    $M.4[$p15 + 452] := NULL;
    assert !aliasQ956($p15 + 454, NULL);
    $M.4[$p15 + 454] := NULL;
    assert !aliasQ957($p15 + 456, NULL);
    $M.4[$p15 + 456] := NULL;
    assert !aliasQ958($p15 + 458, NULL);
    $M.4[$p15 + 458] := NULL;
    assert !aliasQ959($p15 + 459, NULL);
    $M.4[$p15 + 459] := NULL;
    assert !aliasQ960($p15 + 460, NULL);
    $M.4[$p15 + 460] := NULL;
    assert !aliasQ961($p15 + 461, NULL);
    $M.4[$p15 + 461] := NULL;
    assert !aliasQ962($p15 + 462, NULL);
    $M.4[$p15 + 462] := NULL;
    assert !aliasQ963($p15 + 463, NULL);
    $M.4[$p15 + 463] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev == NULL - 6288;

procedure _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED1Ev == NULL - 6296;

procedure _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI12hil_sensor_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI12hil_sensor_sED0Ev == NULL - 6304;

procedure _ZN4uORB12SubscriptionI12hil_sensor_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI12hil_sensor_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED0Ev == NULL - 6312;

procedure _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI12hil_sensor_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI12hil_sensor_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI12hil_sensor_sE6updateEv == NULL - 6320;

procedure _ZN4uORB12SubscriptionI12hil_sensor_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI12hil_sensor_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI12hil_sensor_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI12hil_sensor_sE13check_updatedEv == NULL - 6328;

procedure _ZN4uORB12SubscriptionI12hil_sensor_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI12hil_sensor_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI12hil_sensor_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI12hil_sensor_sE3getEv == NULL - 6336;

procedure _ZN4uORB12SubscriptionI12hil_sensor_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI12hil_sensor_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18vehicle_attitude_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI18vehicle_attitude_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6344;

procedure _ZN4uORB12SubscriptionI18vehicle_attitude_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI18vehicle_attitude_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ964($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ965($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ966($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ967($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ968($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ969($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ970($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ971($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ972($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ973($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ974($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ975($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ976($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ977($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ978($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ979($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ980($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ981($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ982($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assert !aliasQ983($p6 + 72, NULL);
    $M.4[$p6 + 72] := NULL;
    assert !aliasQ984($p6 + 76, NULL);
    $M.4[$p6 + 76] := NULL;
    assert !aliasQ985($p6 + 80, NULL);
    $M.4[$p6 + 80] := NULL;
    assert !aliasQ986($p6 + 84, NULL);
    $M.4[$p6 + 84] := NULL;
    assert !aliasQ987($p6 + 88, NULL);
    $M.4[$p6 + 88] := NULL;
    assert !aliasQ988($p6 + 92, NULL);
    $M.4[$p6 + 92] := NULL;
    assert !aliasQ989($p6 + 96, NULL);
    $M.4[$p6 + 96] := NULL;
    assert !aliasQ990($p6 + 100, NULL);
    $M.4[$p6 + 100] := NULL;
    assert !aliasQ991($p6 + 104, NULL);
    $M.4[$p6 + 104] := NULL;
    assert !aliasQ992($p6 + 108, NULL);
    $M.4[$p6 + 108] := NULL;
    assert !aliasQ993($p6 + 112, NULL);
    $M.4[$p6 + 112] := NULL;
    assert !aliasQ994($p6 + 116, NULL);
    $M.4[$p6 + 116] := NULL;
    assert !aliasQ995($p6 + 120, NULL);
    $M.4[$p6 + 120] := NULL;
    assert !aliasQ996($p6 + 124, NULL);
    $M.4[$p6 + 124] := NULL;
    assert !aliasQ997($p6 + 128, NULL);
    $M.4[$p6 + 128] := NULL;
    assert !aliasQ998($p6 + 132, NULL);
    $M.4[$p6 + 132] := NULL;
    assert !aliasQ999($p6 + 133, NULL);
    $M.4[$p6 + 133] := NULL;
    assert !aliasQ1000($p6 + 134, NULL);
    $M.4[$p6 + 134] := NULL;
    assert !aliasQ1001($p6 + 135, NULL);
    $M.4[$p6 + 135] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18vehicle_attitude_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI18vehicle_attitude_sEC2ERKS2_ == NULL - 6352;

procedure _ZN4uORB12SubscriptionI18vehicle_attitude_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI18vehicle_attitude_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1002($p1, NULL);
    $p3 := $M.24[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1003($p4, NULL);
    $i6 := $M.25[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1004($p7, NULL);
    $i9 := $M.26[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1005($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1006($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1007($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1008($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1009($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1010($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1011($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ1012($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1013($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ1014($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1015($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ1016($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1017($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1018($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ1019($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ1020($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ1021($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ1022($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ1023($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assert !aliasQ1024($p15 + 72, NULL);
    $M.4[$p15 + 72] := NULL;
    assert !aliasQ1025($p15 + 76, NULL);
    $M.4[$p15 + 76] := NULL;
    assert !aliasQ1026($p15 + 80, NULL);
    $M.4[$p15 + 80] := NULL;
    assert !aliasQ1027($p15 + 84, NULL);
    $M.4[$p15 + 84] := NULL;
    assert !aliasQ1028($p15 + 88, NULL);
    $M.4[$p15 + 88] := NULL;
    assert !aliasQ1029($p15 + 92, NULL);
    $M.4[$p15 + 92] := NULL;
    assert !aliasQ1030($p15 + 96, NULL);
    $M.4[$p15 + 96] := NULL;
    assert !aliasQ1031($p15 + 100, NULL);
    $M.4[$p15 + 100] := NULL;
    assert !aliasQ1032($p15 + 104, NULL);
    $M.4[$p15 + 104] := NULL;
    assert !aliasQ1033($p15 + 108, NULL);
    $M.4[$p15 + 108] := NULL;
    assert !aliasQ1034($p15 + 112, NULL);
    $M.4[$p15 + 112] := NULL;
    assert !aliasQ1035($p15 + 116, NULL);
    $M.4[$p15 + 116] := NULL;
    assert !aliasQ1036($p15 + 120, NULL);
    $M.4[$p15 + 120] := NULL;
    assert !aliasQ1037($p15 + 124, NULL);
    $M.4[$p15 + 124] := NULL;
    assert !aliasQ1038($p15 + 128, NULL);
    $M.4[$p15 + 128] := NULL;
    assert !aliasQ1039($p15 + 132, NULL);
    $M.4[$p15 + 132] := NULL;
    assert !aliasQ1040($p15 + 133, NULL);
    $M.4[$p15 + 133] := NULL;
    assert !aliasQ1041($p15 + 134, NULL);
    $M.4[$p15 + 134] := NULL;
    assert !aliasQ1042($p15 + 135, NULL);
    $M.4[$p15 + 135] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev == NULL - 6360;

procedure _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED1Ev == NULL - 6368;

procedure _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18vehicle_attitude_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI18vehicle_attitude_sED0Ev == NULL - 6376;

procedure _ZN4uORB12SubscriptionI18vehicle_attitude_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI18vehicle_attitude_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED0Ev == NULL - 6384;

procedure _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI18vehicle_attitude_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18vehicle_attitude_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI18vehicle_attitude_sE6updateEv == NULL - 6392;

procedure _ZN4uORB12SubscriptionI18vehicle_attitude_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI18vehicle_attitude_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18vehicle_attitude_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI18vehicle_attitude_sE13check_updatedEv == NULL - 6400;

procedure _ZN4uORB12SubscriptionI18vehicle_attitude_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI18vehicle_attitude_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI18vehicle_attitude_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI18vehicle_attitude_sE3getEv == NULL - 6408;

procedure _ZN4uORB12SubscriptionI18vehicle_attitude_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI18vehicle_attitude_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25vehicle_global_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI25vehicle_global_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6416;

procedure _ZN4uORB12SubscriptionI25vehicle_global_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI25vehicle_global_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1043($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1044($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1045($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1046($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1047($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1048($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1049($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1050($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ1051($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1052($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ1053($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ1054($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ1055($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ1056($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ1057($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ1058($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assert !aliasQ1059($p6 + 69, NULL);
    $M.4[$p6 + 69] := NULL;
    assert !aliasQ1060($p6 + 70, NULL);
    $M.4[$p6 + 70] := NULL;
    assert !aliasQ1061($p6 + 71, NULL);
    $M.4[$p6 + 71] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25vehicle_global_position_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI25vehicle_global_position_sEC2ERKS2_ == NULL - 6424;

procedure _ZN4uORB12SubscriptionI25vehicle_global_position_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI25vehicle_global_position_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1062($p1, NULL);
    $p3 := $M.27[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1063($p4, NULL);
    $i6 := $M.28[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1064($p7, NULL);
    $i9 := $M.29[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1065($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1066($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1067($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1068($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1069($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1070($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1071($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1072($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ1073($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1074($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1075($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ1076($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ1077($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ1078($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ1079($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ1080($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assert !aliasQ1081($p15 + 69, NULL);
    $M.4[$p15 + 69] := NULL;
    assert !aliasQ1082($p15 + 70, NULL);
    $M.4[$p15 + 70] := NULL;
    assert !aliasQ1083($p15 + 71, NULL);
    $M.4[$p15 + 71] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev == NULL - 6432;

procedure _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED1Ev == NULL - 6440;

procedure _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25vehicle_global_position_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI25vehicle_global_position_sED0Ev == NULL - 6448;

procedure _ZN4uORB12SubscriptionI25vehicle_global_position_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI25vehicle_global_position_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED0Ev == NULL - 6456;

procedure _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI25vehicle_global_position_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25vehicle_global_position_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI25vehicle_global_position_sE6updateEv == NULL - 6464;

procedure _ZN4uORB12SubscriptionI25vehicle_global_position_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI25vehicle_global_position_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25vehicle_global_position_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI25vehicle_global_position_sE13check_updatedEv == NULL - 6472;

procedure _ZN4uORB12SubscriptionI25vehicle_global_position_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI25vehicle_global_position_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25vehicle_global_position_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI25vehicle_global_position_sE3getEv == NULL - 6480;

procedure _ZN4uORB12SubscriptionI25vehicle_global_position_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI25vehicle_global_position_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI10encoders_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI10encoders_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6488;

procedure _ZN4uORB12SubscriptionI10encoders_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI10encoders_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1084($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI10encoders_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1085($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI10encoders_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1086($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1087($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1088($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1089($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1090($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1091($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1092($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ1093($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ1094($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI10encoders_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI10encoders_sEC2ERKS2_ == NULL - 6496;

procedure _ZN4uORB12SubscriptionI10encoders_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI10encoders_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1095($p1, NULL);
    $p3 := $M.30[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1096($p4, NULL);
    $i6 := $M.31[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1097($p7, NULL);
    $i9 := $M.32[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1098($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI10encoders_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1099($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI10encoders_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1100($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1101($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1102($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1103($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1104($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1105($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1106($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1107($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ1108($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI10encoders_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI10encoders_sED2Ev == NULL - 6504;

procedure _ZN4uORB12SubscriptionI10encoders_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI10encoders_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI10encoders_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI10encoders_sED1Ev == NULL - 6512;

procedure _ZThn24_N4uORB12SubscriptionI10encoders_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI10encoders_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI10encoders_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI10encoders_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI10encoders_sED0Ev == NULL - 6520;

procedure _ZN4uORB12SubscriptionI10encoders_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI10encoders_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI10encoders_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI10encoders_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI10encoders_sED0Ev == NULL - 6528;

procedure _ZThn24_N4uORB12SubscriptionI10encoders_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI10encoders_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI10encoders_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI10encoders_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI10encoders_sE6updateEv == NULL - 6536;

procedure _ZN4uORB12SubscriptionI10encoders_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI10encoders_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI10encoders_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI10encoders_sE13check_updatedEv == NULL - 6544;

procedure _ZN4uORB12SubscriptionI10encoders_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI10encoders_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI10encoders_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI10encoders_sE3getEv == NULL - 6552;

procedure _ZN4uORB12SubscriptionI10encoders_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI10encoders_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27position_setpoint_triplet_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI27position_setpoint_triplet_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6560;

procedure _ZN4uORB12SubscriptionI27position_setpoint_triplet_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI27position_setpoint_triplet_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1109($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1110($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1111($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1112($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1113($p6 + 9, NULL);
    $M.4[$p6 + 9] := NULL;
    assert !aliasQ1114($p6 + 10, NULL);
    $M.4[$p6 + 10] := NULL;
    assert !aliasQ1115($p6 + 11, NULL);
    $M.4[$p6 + 11] := NULL;
    assert !aliasQ1116($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1117($p6 + 13, NULL);
    $M.4[$p6 + 13] := NULL;
    assert !aliasQ1118($p6 + 14, NULL);
    $M.4[$p6 + 14] := NULL;
    assert !aliasQ1119($p6 + 15, NULL);
    $M.4[$p6 + 15] := NULL;
    assert !aliasQ1120($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1121($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1122($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1123($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1124($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ1125($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ1126($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ1127($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ1128($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ1129($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ1130($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assert !aliasQ1131($p6 + 72, NULL);
    $M.4[$p6 + 72] := NULL;
    assert !aliasQ1132($p6 + 76, NULL);
    $M.4[$p6 + 76] := NULL;
    assert !aliasQ1133($p6 + 80, NULL);
    $M.4[$p6 + 80] := NULL;
    assert !aliasQ1134($p6 + 84, NULL);
    $M.4[$p6 + 84] := NULL;
    assert !aliasQ1135($p6 + 88, NULL);
    $M.4[$p6 + 88] := NULL;
    assert !aliasQ1136($p6 + 92, NULL);
    $M.4[$p6 + 92] := NULL;
    assert !aliasQ1137($p6 + 96, NULL);
    $M.4[$p6 + 96] := NULL;
    assert !aliasQ1138($p6 + 100, NULL);
    $M.4[$p6 + 100] := NULL;
    assert !aliasQ1139($p6 + 104, NULL);
    $M.4[$p6 + 104] := NULL;
    assert !aliasQ1140($p6 + 108, NULL);
    $M.4[$p6 + 108] := NULL;
    assert !aliasQ1141($p6 + 109, NULL);
    $M.4[$p6 + 109] := NULL;
    assert !aliasQ1142($p6 + 110, NULL);
    $M.4[$p6 + 110] := NULL;
    assert !aliasQ1143($p6 + 111, NULL);
    $M.4[$p6 + 111] := NULL;
    assert !aliasQ1144($p6 + 112, NULL);
    $M.4[$p6 + 112] := NULL;
    assert !aliasQ1145($p6 + 113, NULL);
    $M.4[$p6 + 113] := NULL;
    assert !aliasQ1146($p6 + 114, NULL);
    $M.4[$p6 + 114] := NULL;
    assert !aliasQ1147($p6 + 115, NULL);
    $M.4[$p6 + 115] := NULL;
    assert !aliasQ1148($p6 + 116, NULL);
    $M.4[$p6 + 116] := NULL;
    assert !aliasQ1149($p6 + 117, NULL);
    $M.4[$p6 + 117] := NULL;
    assert !aliasQ1150($p6 + 118, NULL);
    $M.4[$p6 + 118] := NULL;
    assert !aliasQ1151($p6 + 119, NULL);
    $M.4[$p6 + 119] := NULL;
    assert !aliasQ1152($p6 + 120, NULL);
    $M.4[$p6 + 120] := NULL;
    assert !aliasQ1153($p6 + 128, NULL);
    $M.4[$p6 + 128] := NULL;
    assert !aliasQ1154($p6 + 136, NULL);
    $M.4[$p6 + 136] := NULL;
    assert !aliasQ1155($p6 + 144, NULL);
    $M.4[$p6 + 144] := NULL;
    assert !aliasQ1156($p6 + 148, NULL);
    $M.4[$p6 + 148] := NULL;
    assert !aliasQ1157($p6 + 152, NULL);
    $M.4[$p6 + 152] := NULL;
    assert !aliasQ1158($p6 + 156, NULL);
    $M.4[$p6 + 156] := NULL;
    assert !aliasQ1159($p6 + 160, NULL);
    $M.4[$p6 + 160] := NULL;
    assert !aliasQ1160($p6 + 164, NULL);
    $M.4[$p6 + 164] := NULL;
    assert !aliasQ1161($p6 + 168, NULL);
    $M.4[$p6 + 168] := NULL;
    assert !aliasQ1162($p6 + 172, NULL);
    $M.4[$p6 + 172] := NULL;
    assert !aliasQ1163($p6 + 176, NULL);
    $M.4[$p6 + 176] := NULL;
    assert !aliasQ1164($p6 + 180, NULL);
    $M.4[$p6 + 180] := NULL;
    assert !aliasQ1165($p6 + 184, NULL);
    $M.4[$p6 + 184] := NULL;
    assert !aliasQ1166($p6 + 188, NULL);
    $M.4[$p6 + 188] := NULL;
    assert !aliasQ1167($p6 + 192, NULL);
    $M.4[$p6 + 192] := NULL;
    assert !aliasQ1168($p6 + 196, NULL);
    $M.4[$p6 + 196] := NULL;
    assert !aliasQ1169($p6 + 200, NULL);
    $M.4[$p6 + 200] := NULL;
    assert !aliasQ1170($p6 + 204, NULL);
    $M.4[$p6 + 204] := NULL;
    assert !aliasQ1171($p6 + 208, NULL);
    $M.4[$p6 + 208] := NULL;
    assert !aliasQ1172($p6 + 212, NULL);
    $M.4[$p6 + 212] := NULL;
    assert !aliasQ1173($p6 + 213, NULL);
    $M.4[$p6 + 213] := NULL;
    assert !aliasQ1174($p6 + 214, NULL);
    $M.4[$p6 + 214] := NULL;
    assert !aliasQ1175($p6 + 215, NULL);
    $M.4[$p6 + 215] := NULL;
    assert !aliasQ1176($p6 + 216, NULL);
    $M.4[$p6 + 216] := NULL;
    assert !aliasQ1177($p6 + 217, NULL);
    $M.4[$p6 + 217] := NULL;
    assert !aliasQ1178($p6 + 218, NULL);
    $M.4[$p6 + 218] := NULL;
    assert !aliasQ1179($p6 + 219, NULL);
    $M.4[$p6 + 219] := NULL;
    assert !aliasQ1180($p6 + 220, NULL);
    $M.4[$p6 + 220] := NULL;
    assert !aliasQ1181($p6 + 221, NULL);
    $M.4[$p6 + 221] := NULL;
    assert !aliasQ1182($p6 + 222, NULL);
    $M.4[$p6 + 222] := NULL;
    assert !aliasQ1183($p6 + 223, NULL);
    $M.4[$p6 + 223] := NULL;
    assert !aliasQ1184($p6 + 224, NULL);
    $M.4[$p6 + 224] := NULL;
    assert !aliasQ1185($p6 + 232, NULL);
    $M.4[$p6 + 232] := NULL;
    assert !aliasQ1186($p6 + 240, NULL);
    $M.4[$p6 + 240] := NULL;
    assert !aliasQ1187($p6 + 248, NULL);
    $M.4[$p6 + 248] := NULL;
    assert !aliasQ1188($p6 + 252, NULL);
    $M.4[$p6 + 252] := NULL;
    assert !aliasQ1189($p6 + 256, NULL);
    $M.4[$p6 + 256] := NULL;
    assert !aliasQ1190($p6 + 260, NULL);
    $M.4[$p6 + 260] := NULL;
    assert !aliasQ1191($p6 + 264, NULL);
    $M.4[$p6 + 264] := NULL;
    assert !aliasQ1192($p6 + 268, NULL);
    $M.4[$p6 + 268] := NULL;
    assert !aliasQ1193($p6 + 272, NULL);
    $M.4[$p6 + 272] := NULL;
    assert !aliasQ1194($p6 + 276, NULL);
    $M.4[$p6 + 276] := NULL;
    assert !aliasQ1195($p6 + 280, NULL);
    $M.4[$p6 + 280] := NULL;
    assert !aliasQ1196($p6 + 284, NULL);
    $M.4[$p6 + 284] := NULL;
    assert !aliasQ1197($p6 + 288, NULL);
    $M.4[$p6 + 288] := NULL;
    assert !aliasQ1198($p6 + 292, NULL);
    $M.4[$p6 + 292] := NULL;
    assert !aliasQ1199($p6 + 296, NULL);
    $M.4[$p6 + 296] := NULL;
    assert !aliasQ1200($p6 + 300, NULL);
    $M.4[$p6 + 300] := NULL;
    assert !aliasQ1201($p6 + 304, NULL);
    $M.4[$p6 + 304] := NULL;
    assert !aliasQ1202($p6 + 308, NULL);
    $M.4[$p6 + 308] := NULL;
    assert !aliasQ1203($p6 + 312, NULL);
    $M.4[$p6 + 312] := NULL;
    assert !aliasQ1204($p6 + 316, NULL);
    $M.4[$p6 + 316] := NULL;
    assert !aliasQ1205($p6 + 317, NULL);
    $M.4[$p6 + 317] := NULL;
    assert !aliasQ1206($p6 + 318, NULL);
    $M.4[$p6 + 318] := NULL;
    assert !aliasQ1207($p6 + 319, NULL);
    $M.4[$p6 + 319] := NULL;
    assert !aliasQ1208($p6 + 320, NULL);
    $M.4[$p6 + 320] := NULL;
    assert !aliasQ1209($p6 + 321, NULL);
    $M.4[$p6 + 321] := NULL;
    assert !aliasQ1210($p6 + 322, NULL);
    $M.4[$p6 + 322] := NULL;
    assert !aliasQ1211($p6 + 323, NULL);
    $M.4[$p6 + 323] := NULL;
    assert !aliasQ1212($p6 + 324, NULL);
    $M.4[$p6 + 324] := NULL;
    assert !aliasQ1213($p6 + 325, NULL);
    $M.4[$p6 + 325] := NULL;
    assert !aliasQ1214($p6 + 326, NULL);
    $M.4[$p6 + 326] := NULL;
    assert !aliasQ1215($p6 + 327, NULL);
    $M.4[$p6 + 327] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27position_setpoint_triplet_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI27position_setpoint_triplet_sEC2ERKS2_ == NULL - 6568;

procedure _ZN4uORB12SubscriptionI27position_setpoint_triplet_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI27position_setpoint_triplet_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1216($p1, NULL);
    $p3 := $M.33[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1217($p4, NULL);
    $i6 := $M.34[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1218($p7, NULL);
    $i9 := $M.35[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1219($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1220($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1221($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1222($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1223($p15 + 9, NULL);
    $M.4[$p15 + 9] := NULL;
    assert !aliasQ1224($p15 + 10, NULL);
    $M.4[$p15 + 10] := NULL;
    assert !aliasQ1225($p15 + 11, NULL);
    $M.4[$p15 + 11] := NULL;
    assert !aliasQ1226($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1227($p15 + 13, NULL);
    $M.4[$p15 + 13] := NULL;
    assert !aliasQ1228($p15 + 14, NULL);
    $M.4[$p15 + 14] := NULL;
    assert !aliasQ1229($p15 + 15, NULL);
    $M.4[$p15 + 15] := NULL;
    assert !aliasQ1230($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1231($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1232($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1233($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1234($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1235($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ1236($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ1237($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ1238($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ1239($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ1240($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assert !aliasQ1241($p15 + 72, NULL);
    $M.4[$p15 + 72] := NULL;
    assert !aliasQ1242($p15 + 76, NULL);
    $M.4[$p15 + 76] := NULL;
    assert !aliasQ1243($p15 + 80, NULL);
    $M.4[$p15 + 80] := NULL;
    assert !aliasQ1244($p15 + 84, NULL);
    $M.4[$p15 + 84] := NULL;
    assert !aliasQ1245($p15 + 88, NULL);
    $M.4[$p15 + 88] := NULL;
    assert !aliasQ1246($p15 + 92, NULL);
    $M.4[$p15 + 92] := NULL;
    assert !aliasQ1247($p15 + 96, NULL);
    $M.4[$p15 + 96] := NULL;
    assert !aliasQ1248($p15 + 100, NULL);
    $M.4[$p15 + 100] := NULL;
    assert !aliasQ1249($p15 + 104, NULL);
    $M.4[$p15 + 104] := NULL;
    assert !aliasQ1250($p15 + 108, NULL);
    $M.4[$p15 + 108] := NULL;
    assert !aliasQ1251($p15 + 109, NULL);
    $M.4[$p15 + 109] := NULL;
    assert !aliasQ1252($p15 + 110, NULL);
    $M.4[$p15 + 110] := NULL;
    assert !aliasQ1253($p15 + 111, NULL);
    $M.4[$p15 + 111] := NULL;
    assert !aliasQ1254($p15 + 112, NULL);
    $M.4[$p15 + 112] := NULL;
    assert !aliasQ1255($p15 + 113, NULL);
    $M.4[$p15 + 113] := NULL;
    assert !aliasQ1256($p15 + 114, NULL);
    $M.4[$p15 + 114] := NULL;
    assert !aliasQ1257($p15 + 115, NULL);
    $M.4[$p15 + 115] := NULL;
    assert !aliasQ1258($p15 + 116, NULL);
    $M.4[$p15 + 116] := NULL;
    assert !aliasQ1259($p15 + 117, NULL);
    $M.4[$p15 + 117] := NULL;
    assert !aliasQ1260($p15 + 118, NULL);
    $M.4[$p15 + 118] := NULL;
    assert !aliasQ1261($p15 + 119, NULL);
    $M.4[$p15 + 119] := NULL;
    assert !aliasQ1262($p15 + 120, NULL);
    $M.4[$p15 + 120] := NULL;
    assert !aliasQ1263($p15 + 128, NULL);
    $M.4[$p15 + 128] := NULL;
    assert !aliasQ1264($p15 + 136, NULL);
    $M.4[$p15 + 136] := NULL;
    assert !aliasQ1265($p15 + 144, NULL);
    $M.4[$p15 + 144] := NULL;
    assert !aliasQ1266($p15 + 148, NULL);
    $M.4[$p15 + 148] := NULL;
    assert !aliasQ1267($p15 + 152, NULL);
    $M.4[$p15 + 152] := NULL;
    assert !aliasQ1268($p15 + 156, NULL);
    $M.4[$p15 + 156] := NULL;
    assert !aliasQ1269($p15 + 160, NULL);
    $M.4[$p15 + 160] := NULL;
    assert !aliasQ1270($p15 + 164, NULL);
    $M.4[$p15 + 164] := NULL;
    assert !aliasQ1271($p15 + 168, NULL);
    $M.4[$p15 + 168] := NULL;
    assert !aliasQ1272($p15 + 172, NULL);
    $M.4[$p15 + 172] := NULL;
    assert !aliasQ1273($p15 + 176, NULL);
    $M.4[$p15 + 176] := NULL;
    assert !aliasQ1274($p15 + 180, NULL);
    $M.4[$p15 + 180] := NULL;
    assert !aliasQ1275($p15 + 184, NULL);
    $M.4[$p15 + 184] := NULL;
    assert !aliasQ1276($p15 + 188, NULL);
    $M.4[$p15 + 188] := NULL;
    assert !aliasQ1277($p15 + 192, NULL);
    $M.4[$p15 + 192] := NULL;
    assert !aliasQ1278($p15 + 196, NULL);
    $M.4[$p15 + 196] := NULL;
    assert !aliasQ1279($p15 + 200, NULL);
    $M.4[$p15 + 200] := NULL;
    assert !aliasQ1280($p15 + 204, NULL);
    $M.4[$p15 + 204] := NULL;
    assert !aliasQ1281($p15 + 208, NULL);
    $M.4[$p15 + 208] := NULL;
    assert !aliasQ1282($p15 + 212, NULL);
    $M.4[$p15 + 212] := NULL;
    assert !aliasQ1283($p15 + 213, NULL);
    $M.4[$p15 + 213] := NULL;
    assert !aliasQ1284($p15 + 214, NULL);
    $M.4[$p15 + 214] := NULL;
    assert !aliasQ1285($p15 + 215, NULL);
    $M.4[$p15 + 215] := NULL;
    assert !aliasQ1286($p15 + 216, NULL);
    $M.4[$p15 + 216] := NULL;
    assert !aliasQ1287($p15 + 217, NULL);
    $M.4[$p15 + 217] := NULL;
    assert !aliasQ1288($p15 + 218, NULL);
    $M.4[$p15 + 218] := NULL;
    assert !aliasQ1289($p15 + 219, NULL);
    $M.4[$p15 + 219] := NULL;
    assert !aliasQ1290($p15 + 220, NULL);
    $M.4[$p15 + 220] := NULL;
    assert !aliasQ1291($p15 + 221, NULL);
    $M.4[$p15 + 221] := NULL;
    assert !aliasQ1292($p15 + 222, NULL);
    $M.4[$p15 + 222] := NULL;
    assert !aliasQ1293($p15 + 223, NULL);
    $M.4[$p15 + 223] := NULL;
    assert !aliasQ1294($p15 + 224, NULL);
    $M.4[$p15 + 224] := NULL;
    assert !aliasQ1295($p15 + 232, NULL);
    $M.4[$p15 + 232] := NULL;
    assert !aliasQ1296($p15 + 240, NULL);
    $M.4[$p15 + 240] := NULL;
    assert !aliasQ1297($p15 + 248, NULL);
    $M.4[$p15 + 248] := NULL;
    assert !aliasQ1298($p15 + 252, NULL);
    $M.4[$p15 + 252] := NULL;
    assert !aliasQ1299($p15 + 256, NULL);
    $M.4[$p15 + 256] := NULL;
    assert !aliasQ1300($p15 + 260, NULL);
    $M.4[$p15 + 260] := NULL;
    assert !aliasQ1301($p15 + 264, NULL);
    $M.4[$p15 + 264] := NULL;
    assert !aliasQ1302($p15 + 268, NULL);
    $M.4[$p15 + 268] := NULL;
    assert !aliasQ1303($p15 + 272, NULL);
    $M.4[$p15 + 272] := NULL;
    assert !aliasQ1304($p15 + 276, NULL);
    $M.4[$p15 + 276] := NULL;
    assert !aliasQ1305($p15 + 280, NULL);
    $M.4[$p15 + 280] := NULL;
    assert !aliasQ1306($p15 + 284, NULL);
    $M.4[$p15 + 284] := NULL;
    assert !aliasQ1307($p15 + 288, NULL);
    $M.4[$p15 + 288] := NULL;
    assert !aliasQ1308($p15 + 292, NULL);
    $M.4[$p15 + 292] := NULL;
    assert !aliasQ1309($p15 + 296, NULL);
    $M.4[$p15 + 296] := NULL;
    assert !aliasQ1310($p15 + 300, NULL);
    $M.4[$p15 + 300] := NULL;
    assert !aliasQ1311($p15 + 304, NULL);
    $M.4[$p15 + 304] := NULL;
    assert !aliasQ1312($p15 + 308, NULL);
    $M.4[$p15 + 308] := NULL;
    assert !aliasQ1313($p15 + 312, NULL);
    $M.4[$p15 + 312] := NULL;
    assert !aliasQ1314($p15 + 316, NULL);
    $M.4[$p15 + 316] := NULL;
    assert !aliasQ1315($p15 + 317, NULL);
    $M.4[$p15 + 317] := NULL;
    assert !aliasQ1316($p15 + 318, NULL);
    $M.4[$p15 + 318] := NULL;
    assert !aliasQ1317($p15 + 319, NULL);
    $M.4[$p15 + 319] := NULL;
    assert !aliasQ1318($p15 + 320, NULL);
    $M.4[$p15 + 320] := NULL;
    assert !aliasQ1319($p15 + 321, NULL);
    $M.4[$p15 + 321] := NULL;
    assert !aliasQ1320($p15 + 322, NULL);
    $M.4[$p15 + 322] := NULL;
    assert !aliasQ1321($p15 + 323, NULL);
    $M.4[$p15 + 323] := NULL;
    assert !aliasQ1322($p15 + 324, NULL);
    $M.4[$p15 + 324] := NULL;
    assert !aliasQ1323($p15 + 325, NULL);
    $M.4[$p15 + 325] := NULL;
    assert !aliasQ1324($p15 + 326, NULL);
    $M.4[$p15 + 326] := NULL;
    assert !aliasQ1325($p15 + 327, NULL);
    $M.4[$p15 + 327] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev == NULL - 6576;

procedure _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED1Ev == NULL - 6584;

procedure _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev == NULL - 6592;

procedure _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev == NULL - 6600;

procedure _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE6updateEv == NULL - 6608;

procedure _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE13check_updatedEv == NULL - 6616;

procedure _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE3getEv == NULL - 6624;

procedure _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16vehicle_status_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI16vehicle_status_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6632;

procedure _ZN4uORB12SubscriptionI16vehicle_status_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI16vehicle_status_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1326($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1327($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1328($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1329($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1330($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1331($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1332($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ1333($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1334($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ1335($p6 + 29, NULL);
    $M.4[$p6 + 29] := NULL;
    assert !aliasQ1336($p6 + 30, NULL);
    $M.4[$p6 + 30] := NULL;
    assert !aliasQ1337($p6 + 31, NULL);
    $M.4[$p6 + 31] := NULL;
    assert !aliasQ1338($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1339($p6 + 33, NULL);
    $M.4[$p6 + 33] := NULL;
    assert !aliasQ1340($p6 + 34, NULL);
    $M.4[$p6 + 34] := NULL;
    assert !aliasQ1341($p6 + 35, NULL);
    $M.4[$p6 + 35] := NULL;
    assert !aliasQ1342($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ1343($p6 + 37, NULL);
    $M.4[$p6 + 37] := NULL;
    assert !aliasQ1344($p6 + 38, NULL);
    $M.4[$p6 + 38] := NULL;
    assert !aliasQ1345($p6 + 39, NULL);
    $M.4[$p6 + 39] := NULL;
    assert !aliasQ1346($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1347($p6 + 41, NULL);
    $M.4[$p6 + 41] := NULL;
    assert !aliasQ1348($p6 + 42, NULL);
    $M.4[$p6 + 42] := NULL;
    assert !aliasQ1349($p6 + 43, NULL);
    $M.4[$p6 + 43] := NULL;
    assert !aliasQ1350($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ1351($p6 + 45, NULL);
    $M.4[$p6 + 45] := NULL;
    assert !aliasQ1352($p6 + 46, NULL);
    $M.4[$p6 + 46] := NULL;
    assert !aliasQ1353($p6 + 47, NULL);
    $M.4[$p6 + 47] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16vehicle_status_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI16vehicle_status_sEC2ERKS2_ == NULL - 6640;

procedure _ZN4uORB12SubscriptionI16vehicle_status_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI16vehicle_status_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1354($p1, NULL);
    $p3 := $M.36[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1355($p4, NULL);
    $i6 := $M.37[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1356($p7, NULL);
    $i9 := $M.38[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1357($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1358($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1359($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1360($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1361($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1362($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1363($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ1364($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1365($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ1366($p15 + 29, NULL);
    $M.4[$p15 + 29] := NULL;
    assert !aliasQ1367($p15 + 30, NULL);
    $M.4[$p15 + 30] := NULL;
    assert !aliasQ1368($p15 + 31, NULL);
    $M.4[$p15 + 31] := NULL;
    assert !aliasQ1369($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1370($p15 + 33, NULL);
    $M.4[$p15 + 33] := NULL;
    assert !aliasQ1371($p15 + 34, NULL);
    $M.4[$p15 + 34] := NULL;
    assert !aliasQ1372($p15 + 35, NULL);
    $M.4[$p15 + 35] := NULL;
    assert !aliasQ1373($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ1374($p15 + 37, NULL);
    $M.4[$p15 + 37] := NULL;
    assert !aliasQ1375($p15 + 38, NULL);
    $M.4[$p15 + 38] := NULL;
    assert !aliasQ1376($p15 + 39, NULL);
    $M.4[$p15 + 39] := NULL;
    assert !aliasQ1377($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1378($p15 + 41, NULL);
    $M.4[$p15 + 41] := NULL;
    assert !aliasQ1379($p15 + 42, NULL);
    $M.4[$p15 + 42] := NULL;
    assert !aliasQ1380($p15 + 43, NULL);
    $M.4[$p15 + 43] := NULL;
    assert !aliasQ1381($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1382($p15 + 45, NULL);
    $M.4[$p15 + 45] := NULL;
    assert !aliasQ1383($p15 + 46, NULL);
    $M.4[$p15 + 46] := NULL;
    assert !aliasQ1384($p15 + 47, NULL);
    $M.4[$p15 + 47] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev == NULL - 6648;

procedure _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED1Ev == NULL - 6656;

procedure _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16vehicle_status_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI16vehicle_status_sED0Ev == NULL - 6664;

procedure _ZN4uORB12SubscriptionI16vehicle_status_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI16vehicle_status_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED0Ev == NULL - 6672;

procedure _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI16vehicle_status_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16vehicle_status_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI16vehicle_status_sE6updateEv == NULL - 6680;

procedure _ZN4uORB12SubscriptionI16vehicle_status_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI16vehicle_status_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16vehicle_status_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI16vehicle_status_sE13check_updatedEv == NULL - 6688;

procedure _ZN4uORB12SubscriptionI16vehicle_status_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI16vehicle_status_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16vehicle_status_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI16vehicle_status_sE3getEv == NULL - 6696;

procedure _ZN4uORB12SubscriptionI16vehicle_status_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI16vehicle_status_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25manual_control_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI25manual_control_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6704;

procedure _ZN4uORB12SubscriptionI25manual_control_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI25manual_control_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1385($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1386($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1387($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1388($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1389($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1390($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1391($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ1392($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1393($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ1394($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1395($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ1396($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1397($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ1398($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ1399($p6 + 49, NULL);
    $M.4[$p6 + 49] := NULL;
    assert !aliasQ1400($p6 + 50, NULL);
    $M.4[$p6 + 50] := NULL;
    assert !aliasQ1401($p6 + 51, NULL);
    $M.4[$p6 + 51] := NULL;
    assert !aliasQ1402($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ1403($p6 + 53, NULL);
    $M.4[$p6 + 53] := NULL;
    assert !aliasQ1404($p6 + 54, NULL);
    $M.4[$p6 + 54] := NULL;
    assert !aliasQ1405($p6 + 55, NULL);
    $M.4[$p6 + 55] := NULL;
    assert !aliasQ1406($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ1407($p6 + 57, NULL);
    $M.4[$p6 + 57] := NULL;
    assert !aliasQ1408($p6 + 58, NULL);
    $M.4[$p6 + 58] := NULL;
    assert !aliasQ1409($p6 + 59, NULL);
    $M.4[$p6 + 59] := NULL;
    assert !aliasQ1410($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ1411($p6 + 61, NULL);
    $M.4[$p6 + 61] := NULL;
    assert !aliasQ1412($p6 + 62, NULL);
    $M.4[$p6 + 62] := NULL;
    assert !aliasQ1413($p6 + 63, NULL);
    $M.4[$p6 + 63] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25manual_control_setpoint_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI25manual_control_setpoint_sEC2ERKS2_ == NULL - 6712;

procedure _ZN4uORB12SubscriptionI25manual_control_setpoint_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI25manual_control_setpoint_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1414($p1, NULL);
    $p3 := $M.39[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1415($p4, NULL);
    $i6 := $M.40[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1416($p7, NULL);
    $i9 := $M.41[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1417($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1418($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1419($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1420($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1421($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1422($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1423($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ1424($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1425($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ1426($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1427($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ1428($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1429($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1430($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ1431($p15 + 49, NULL);
    $M.4[$p15 + 49] := NULL;
    assert !aliasQ1432($p15 + 50, NULL);
    $M.4[$p15 + 50] := NULL;
    assert !aliasQ1433($p15 + 51, NULL);
    $M.4[$p15 + 51] := NULL;
    assert !aliasQ1434($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ1435($p15 + 53, NULL);
    $M.4[$p15 + 53] := NULL;
    assert !aliasQ1436($p15 + 54, NULL);
    $M.4[$p15 + 54] := NULL;
    assert !aliasQ1437($p15 + 55, NULL);
    $M.4[$p15 + 55] := NULL;
    assert !aliasQ1438($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ1439($p15 + 57, NULL);
    $M.4[$p15 + 57] := NULL;
    assert !aliasQ1440($p15 + 58, NULL);
    $M.4[$p15 + 58] := NULL;
    assert !aliasQ1441($p15 + 59, NULL);
    $M.4[$p15 + 59] := NULL;
    assert !aliasQ1442($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ1443($p15 + 61, NULL);
    $M.4[$p15 + 61] := NULL;
    assert !aliasQ1444($p15 + 62, NULL);
    $M.4[$p15 + 62] := NULL;
    assert !aliasQ1445($p15 + 63, NULL);
    $M.4[$p15 + 63] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev == NULL - 6720;

procedure _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED1Ev == NULL - 6728;

procedure _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25manual_control_setpoint_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI25manual_control_setpoint_sED0Ev == NULL - 6736;

procedure _ZN4uORB12SubscriptionI25manual_control_setpoint_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI25manual_control_setpoint_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED0Ev == NULL - 6744;

procedure _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI25manual_control_setpoint_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25manual_control_setpoint_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI25manual_control_setpoint_sE6updateEv == NULL - 6752;

procedure _ZN4uORB12SubscriptionI25manual_control_setpoint_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI25manual_control_setpoint_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25manual_control_setpoint_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI25manual_control_setpoint_sE13check_updatedEv == NULL - 6760;

procedure _ZN4uORB12SubscriptionI25manual_control_setpoint_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI25manual_control_setpoint_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI25manual_control_setpoint_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI25manual_control_setpoint_sE3getEv == NULL - 6768;

procedure _ZN4uORB12SubscriptionI25manual_control_setpoint_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI25manual_control_setpoint_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13mavlink_log_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI13mavlink_log_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6776;

procedure _ZN4uORB12SubscriptionI13mavlink_log_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI13mavlink_log_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1446($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1447($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1448($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1449($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1450($p6 + 9, NULL);
    $M.4[$p6 + 9] := NULL;
    assert !aliasQ1451($p6 + 10, NULL);
    $M.4[$p6 + 10] := NULL;
    assert !aliasQ1452($p6 + 11, NULL);
    $M.4[$p6 + 11] := NULL;
    assert !aliasQ1453($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1454($p6 + 13, NULL);
    $M.4[$p6 + 13] := NULL;
    assert !aliasQ1455($p6 + 14, NULL);
    $M.4[$p6 + 14] := NULL;
    assert !aliasQ1456($p6 + 15, NULL);
    $M.4[$p6 + 15] := NULL;
    assert !aliasQ1457($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1458($p6 + 17, NULL);
    $M.4[$p6 + 17] := NULL;
    assert !aliasQ1459($p6 + 18, NULL);
    $M.4[$p6 + 18] := NULL;
    assert !aliasQ1460($p6 + 19, NULL);
    $M.4[$p6 + 19] := NULL;
    assert !aliasQ1461($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ1462($p6 + 21, NULL);
    $M.4[$p6 + 21] := NULL;
    assert !aliasQ1463($p6 + 22, NULL);
    $M.4[$p6 + 22] := NULL;
    assert !aliasQ1464($p6 + 23, NULL);
    $M.4[$p6 + 23] := NULL;
    assert !aliasQ1465($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1466($p6 + 25, NULL);
    $M.4[$p6 + 25] := NULL;
    assert !aliasQ1467($p6 + 26, NULL);
    $M.4[$p6 + 26] := NULL;
    assert !aliasQ1468($p6 + 27, NULL);
    $M.4[$p6 + 27] := NULL;
    assert !aliasQ1469($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ1470($p6 + 29, NULL);
    $M.4[$p6 + 29] := NULL;
    assert !aliasQ1471($p6 + 30, NULL);
    $M.4[$p6 + 30] := NULL;
    assert !aliasQ1472($p6 + 31, NULL);
    $M.4[$p6 + 31] := NULL;
    assert !aliasQ1473($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1474($p6 + 33, NULL);
    $M.4[$p6 + 33] := NULL;
    assert !aliasQ1475($p6 + 34, NULL);
    $M.4[$p6 + 34] := NULL;
    assert !aliasQ1476($p6 + 35, NULL);
    $M.4[$p6 + 35] := NULL;
    assert !aliasQ1477($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ1478($p6 + 37, NULL);
    $M.4[$p6 + 37] := NULL;
    assert !aliasQ1479($p6 + 38, NULL);
    $M.4[$p6 + 38] := NULL;
    assert !aliasQ1480($p6 + 39, NULL);
    $M.4[$p6 + 39] := NULL;
    assert !aliasQ1481($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1482($p6 + 41, NULL);
    $M.4[$p6 + 41] := NULL;
    assert !aliasQ1483($p6 + 42, NULL);
    $M.4[$p6 + 42] := NULL;
    assert !aliasQ1484($p6 + 43, NULL);
    $M.4[$p6 + 43] := NULL;
    assert !aliasQ1485($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ1486($p6 + 45, NULL);
    $M.4[$p6 + 45] := NULL;
    assert !aliasQ1487($p6 + 46, NULL);
    $M.4[$p6 + 46] := NULL;
    assert !aliasQ1488($p6 + 47, NULL);
    $M.4[$p6 + 47] := NULL;
    assert !aliasQ1489($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ1490($p6 + 49, NULL);
    $M.4[$p6 + 49] := NULL;
    assert !aliasQ1491($p6 + 50, NULL);
    $M.4[$p6 + 50] := NULL;
    assert !aliasQ1492($p6 + 51, NULL);
    $M.4[$p6 + 51] := NULL;
    assert !aliasQ1493($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ1494($p6 + 53, NULL);
    $M.4[$p6 + 53] := NULL;
    assert !aliasQ1495($p6 + 54, NULL);
    $M.4[$p6 + 54] := NULL;
    assert !aliasQ1496($p6 + 55, NULL);
    $M.4[$p6 + 55] := NULL;
    assert !aliasQ1497($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ1498($p6 + 57, NULL);
    $M.4[$p6 + 57] := NULL;
    assert !aliasQ1499($p6 + 58, NULL);
    $M.4[$p6 + 58] := NULL;
    assert !aliasQ1500($p6 + 59, NULL);
    $M.4[$p6 + 59] := NULL;
    assert !aliasQ1501($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ1502($p6 + 61, NULL);
    $M.4[$p6 + 61] := NULL;
    assert !aliasQ1503($p6 + 62, NULL);
    $M.4[$p6 + 62] := NULL;
    assert !aliasQ1504($p6 + 63, NULL);
    $M.4[$p6 + 63] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13mavlink_log_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI13mavlink_log_sEC2ERKS2_ == NULL - 6784;

procedure _ZN4uORB12SubscriptionI13mavlink_log_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI13mavlink_log_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1505($p1, NULL);
    $p3 := $M.42[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1506($p4, NULL);
    $i6 := $M.43[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1507($p7, NULL);
    $i9 := $M.44[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1508($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1509($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1510($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1511($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1512($p15 + 9, NULL);
    $M.4[$p15 + 9] := NULL;
    assert !aliasQ1513($p15 + 10, NULL);
    $M.4[$p15 + 10] := NULL;
    assert !aliasQ1514($p15 + 11, NULL);
    $M.4[$p15 + 11] := NULL;
    assert !aliasQ1515($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1516($p15 + 13, NULL);
    $M.4[$p15 + 13] := NULL;
    assert !aliasQ1517($p15 + 14, NULL);
    $M.4[$p15 + 14] := NULL;
    assert !aliasQ1518($p15 + 15, NULL);
    $M.4[$p15 + 15] := NULL;
    assert !aliasQ1519($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1520($p15 + 17, NULL);
    $M.4[$p15 + 17] := NULL;
    assert !aliasQ1521($p15 + 18, NULL);
    $M.4[$p15 + 18] := NULL;
    assert !aliasQ1522($p15 + 19, NULL);
    $M.4[$p15 + 19] := NULL;
    assert !aliasQ1523($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ1524($p15 + 21, NULL);
    $M.4[$p15 + 21] := NULL;
    assert !aliasQ1525($p15 + 22, NULL);
    $M.4[$p15 + 22] := NULL;
    assert !aliasQ1526($p15 + 23, NULL);
    $M.4[$p15 + 23] := NULL;
    assert !aliasQ1527($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1528($p15 + 25, NULL);
    $M.4[$p15 + 25] := NULL;
    assert !aliasQ1529($p15 + 26, NULL);
    $M.4[$p15 + 26] := NULL;
    assert !aliasQ1530($p15 + 27, NULL);
    $M.4[$p15 + 27] := NULL;
    assert !aliasQ1531($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ1532($p15 + 29, NULL);
    $M.4[$p15 + 29] := NULL;
    assert !aliasQ1533($p15 + 30, NULL);
    $M.4[$p15 + 30] := NULL;
    assert !aliasQ1534($p15 + 31, NULL);
    $M.4[$p15 + 31] := NULL;
    assert !aliasQ1535($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1536($p15 + 33, NULL);
    $M.4[$p15 + 33] := NULL;
    assert !aliasQ1537($p15 + 34, NULL);
    $M.4[$p15 + 34] := NULL;
    assert !aliasQ1538($p15 + 35, NULL);
    $M.4[$p15 + 35] := NULL;
    assert !aliasQ1539($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ1540($p15 + 37, NULL);
    $M.4[$p15 + 37] := NULL;
    assert !aliasQ1541($p15 + 38, NULL);
    $M.4[$p15 + 38] := NULL;
    assert !aliasQ1542($p15 + 39, NULL);
    $M.4[$p15 + 39] := NULL;
    assert !aliasQ1543($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1544($p15 + 41, NULL);
    $M.4[$p15 + 41] := NULL;
    assert !aliasQ1545($p15 + 42, NULL);
    $M.4[$p15 + 42] := NULL;
    assert !aliasQ1546($p15 + 43, NULL);
    $M.4[$p15 + 43] := NULL;
    assert !aliasQ1547($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1548($p15 + 45, NULL);
    $M.4[$p15 + 45] := NULL;
    assert !aliasQ1549($p15 + 46, NULL);
    $M.4[$p15 + 46] := NULL;
    assert !aliasQ1550($p15 + 47, NULL);
    $M.4[$p15 + 47] := NULL;
    assert !aliasQ1551($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ1552($p15 + 49, NULL);
    $M.4[$p15 + 49] := NULL;
    assert !aliasQ1553($p15 + 50, NULL);
    $M.4[$p15 + 50] := NULL;
    assert !aliasQ1554($p15 + 51, NULL);
    $M.4[$p15 + 51] := NULL;
    assert !aliasQ1555($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ1556($p15 + 53, NULL);
    $M.4[$p15 + 53] := NULL;
    assert !aliasQ1557($p15 + 54, NULL);
    $M.4[$p15 + 54] := NULL;
    assert !aliasQ1558($p15 + 55, NULL);
    $M.4[$p15 + 55] := NULL;
    assert !aliasQ1559($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ1560($p15 + 57, NULL);
    $M.4[$p15 + 57] := NULL;
    assert !aliasQ1561($p15 + 58, NULL);
    $M.4[$p15 + 58] := NULL;
    assert !aliasQ1562($p15 + 59, NULL);
    $M.4[$p15 + 59] := NULL;
    assert !aliasQ1563($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ1564($p15 + 61, NULL);
    $M.4[$p15 + 61] := NULL;
    assert !aliasQ1565($p15 + 62, NULL);
    $M.4[$p15 + 62] := NULL;
    assert !aliasQ1566($p15 + 63, NULL);
    $M.4[$p15 + 63] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev == NULL - 6792;

procedure _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED1Ev == NULL - 6800;

procedure _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13mavlink_log_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI13mavlink_log_sED0Ev == NULL - 6808;

procedure _ZN4uORB12SubscriptionI13mavlink_log_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI13mavlink_log_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED0Ev == NULL - 6816;

procedure _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI13mavlink_log_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13mavlink_log_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI13mavlink_log_sE6updateEv == NULL - 6824;

procedure _ZN4uORB12SubscriptionI13mavlink_log_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI13mavlink_log_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13mavlink_log_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI13mavlink_log_sE13check_updatedEv == NULL - 6832;

procedure _ZN4uORB12SubscriptionI13mavlink_log_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI13mavlink_log_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13mavlink_log_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI13mavlink_log_sE3getEv == NULL - 6840;

procedure _ZN4uORB12SubscriptionI13mavlink_log_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI13mavlink_log_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6848;

procedure _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1567($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1568($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1569($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1570($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1571($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1572($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1573($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ1574($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1575($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ1576($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1577($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ1578($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1579($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEC2ERKS2_ == NULL - 6856;

procedure _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1580($p1, NULL);
    $p3 := $M.45[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1581($p4, NULL);
    $i6 := $M.46[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1582($p7, NULL);
    $i9 := $M.47[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1583($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1584($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1585($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1586($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1587($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1588($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1589($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ1590($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1591($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ1592($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1593($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ1594($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1595($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev == NULL - 6864;

procedure _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED1Ev == NULL - 6872;

procedure _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev == NULL - 6880;

procedure _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev == NULL - 6888;

procedure _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE6updateEv == NULL - 6896;

procedure _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE13check_updatedEv == NULL - 6904;

procedure _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE3getEv == NULL - 6912;

procedure _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_local_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI24vehicle_local_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6920;

procedure _ZN4uORB12SubscriptionI24vehicle_local_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI24vehicle_local_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1596($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1597($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1598($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1599($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1600($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1601($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1602($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1603($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1604($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ1605($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ1606($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ1607($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ1608($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ1609($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ1610($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assert !aliasQ1611($p6 + 72, NULL);
    $M.4[$p6 + 72] := NULL;
    assert !aliasQ1612($p6 + 76, NULL);
    $M.4[$p6 + 76] := NULL;
    assert !aliasQ1613($p6 + 80, NULL);
    $M.4[$p6 + 80] := NULL;
    assert !aliasQ1614($p6 + 84, NULL);
    $M.4[$p6 + 84] := NULL;
    assert !aliasQ1615($p6 + 88, NULL);
    $M.4[$p6 + 88] := NULL;
    assert !aliasQ1616($p6 + 89, NULL);
    $M.4[$p6 + 89] := NULL;
    assert !aliasQ1617($p6 + 90, NULL);
    $M.4[$p6 + 90] := NULL;
    assert !aliasQ1618($p6 + 91, NULL);
    $M.4[$p6 + 91] := NULL;
    assert !aliasQ1619($p6 + 92, NULL);
    $M.4[$p6 + 92] := NULL;
    assert !aliasQ1620($p6 + 93, NULL);
    $M.4[$p6 + 93] := NULL;
    assert !aliasQ1621($p6 + 94, NULL);
    $M.4[$p6 + 94] := NULL;
    assert !aliasQ1622($p6 + 95, NULL);
    $M.4[$p6 + 95] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_local_position_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI24vehicle_local_position_sEC2ERKS2_ == NULL - 6928;

procedure _ZN4uORB12SubscriptionI24vehicle_local_position_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI24vehicle_local_position_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1623($p1, NULL);
    $p3 := $M.48[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1624($p4, NULL);
    $i6 := $M.49[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1625($p7, NULL);
    $i9 := $M.50[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1626($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1627($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1628($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1629($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1630($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1631($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1632($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1633($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1634($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1635($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ1636($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ1637($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ1638($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ1639($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ1640($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assert !aliasQ1641($p15 + 72, NULL);
    $M.4[$p15 + 72] := NULL;
    assert !aliasQ1642($p15 + 76, NULL);
    $M.4[$p15 + 76] := NULL;
    assert !aliasQ1643($p15 + 80, NULL);
    $M.4[$p15 + 80] := NULL;
    assert !aliasQ1644($p15 + 84, NULL);
    $M.4[$p15 + 84] := NULL;
    assert !aliasQ1645($p15 + 88, NULL);
    $M.4[$p15 + 88] := NULL;
    assert !aliasQ1646($p15 + 89, NULL);
    $M.4[$p15 + 89] := NULL;
    assert !aliasQ1647($p15 + 90, NULL);
    $M.4[$p15 + 90] := NULL;
    assert !aliasQ1648($p15 + 91, NULL);
    $M.4[$p15 + 91] := NULL;
    assert !aliasQ1649($p15 + 92, NULL);
    $M.4[$p15 + 92] := NULL;
    assert !aliasQ1650($p15 + 93, NULL);
    $M.4[$p15 + 93] := NULL;
    assert !aliasQ1651($p15 + 94, NULL);
    $M.4[$p15 + 94] := NULL;
    assert !aliasQ1652($p15 + 95, NULL);
    $M.4[$p15 + 95] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev == NULL - 6936;

procedure _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED1Ev == NULL - 6944;

procedure _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_local_position_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI24vehicle_local_position_sED0Ev == NULL - 6952;

procedure _ZN4uORB12SubscriptionI24vehicle_local_position_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI24vehicle_local_position_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED0Ev == NULL - 6960;

procedure _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI24vehicle_local_position_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_local_position_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI24vehicle_local_position_sE6updateEv == NULL - 6968;

procedure _ZN4uORB12SubscriptionI24vehicle_local_position_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI24vehicle_local_position_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_local_position_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI24vehicle_local_position_sE13check_updatedEv == NULL - 6976;

procedure _ZN4uORB12SubscriptionI24vehicle_local_position_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI24vehicle_local_position_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_local_position_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI24vehicle_local_position_sE3getEv == NULL - 6984;

procedure _ZN4uORB12SubscriptionI24vehicle_local_position_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI24vehicle_local_position_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 6992;

procedure _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1653($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1654($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1655($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1656($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1657($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1658($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1659($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ1660($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1661($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ1662($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1663($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ1664($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1665($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ1666($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ1667($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ1668($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ1669($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ1670($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ1671($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assert !aliasQ1672($p6 + 72, NULL);
    $M.4[$p6 + 72] := NULL;
    assert !aliasQ1673($p6 + 76, NULL);
    $M.4[$p6 + 76] := NULL;
    assert !aliasQ1674($p6 + 80, NULL);
    $M.4[$p6 + 80] := NULL;
    assert !aliasQ1675($p6 + 84, NULL);
    $M.4[$p6 + 84] := NULL;
    assert !aliasQ1676($p6 + 88, NULL);
    $M.4[$p6 + 88] := NULL;
    assert !aliasQ1677($p6 + 92, NULL);
    $M.4[$p6 + 92] := NULL;
    assert !aliasQ1678($p6 + 96, NULL);
    $M.4[$p6 + 96] := NULL;
    assert !aliasQ1679($p6 + 97, NULL);
    $M.4[$p6 + 97] := NULL;
    assert !aliasQ1680($p6 + 98, NULL);
    $M.4[$p6 + 98] := NULL;
    assert !aliasQ1681($p6 + 99, NULL);
    $M.4[$p6 + 99] := NULL;
    assert !aliasQ1682($p6 + 100, NULL);
    $M.4[$p6 + 100] := NULL;
    assert !aliasQ1683($p6 + 101, NULL);
    $M.4[$p6 + 101] := NULL;
    assert !aliasQ1684($p6 + 102, NULL);
    $M.4[$p6 + 102] := NULL;
    assert !aliasQ1685($p6 + 103, NULL);
    $M.4[$p6 + 103] := NULL;
    assert !aliasQ1686($p6 + 104, NULL);
    $M.4[$p6 + 104] := NULL;
    assert !aliasQ1687($p6 + 105, NULL);
    $M.4[$p6 + 105] := NULL;
    assert !aliasQ1688($p6 + 106, NULL);
    $M.4[$p6 + 106] := NULL;
    assert !aliasQ1689($p6 + 107, NULL);
    $M.4[$p6 + 107] := NULL;
    assert !aliasQ1690($p6 + 108, NULL);
    $M.4[$p6 + 108] := NULL;
    assert !aliasQ1691($p6 + 109, NULL);
    $M.4[$p6 + 109] := NULL;
    assert !aliasQ1692($p6 + 110, NULL);
    $M.4[$p6 + 110] := NULL;
    assert !aliasQ1693($p6 + 111, NULL);
    $M.4[$p6 + 111] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEC2ERKS2_ == NULL - 7000;

procedure _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1694($p1, NULL);
    $p3 := $M.51[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1695($p4, NULL);
    $i6 := $M.52[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1696($p7, NULL);
    $i9 := $M.53[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1697($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1698($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1699($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1700($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1701($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1702($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1703($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ1704($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1705($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ1706($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1707($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ1708($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1709($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1710($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ1711($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ1712($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ1713($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ1714($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ1715($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assert !aliasQ1716($p15 + 72, NULL);
    $M.4[$p15 + 72] := NULL;
    assert !aliasQ1717($p15 + 76, NULL);
    $M.4[$p15 + 76] := NULL;
    assert !aliasQ1718($p15 + 80, NULL);
    $M.4[$p15 + 80] := NULL;
    assert !aliasQ1719($p15 + 84, NULL);
    $M.4[$p15 + 84] := NULL;
    assert !aliasQ1720($p15 + 88, NULL);
    $M.4[$p15 + 88] := NULL;
    assert !aliasQ1721($p15 + 92, NULL);
    $M.4[$p15 + 92] := NULL;
    assert !aliasQ1722($p15 + 96, NULL);
    $M.4[$p15 + 96] := NULL;
    assert !aliasQ1723($p15 + 97, NULL);
    $M.4[$p15 + 97] := NULL;
    assert !aliasQ1724($p15 + 98, NULL);
    $M.4[$p15 + 98] := NULL;
    assert !aliasQ1725($p15 + 99, NULL);
    $M.4[$p15 + 99] := NULL;
    assert !aliasQ1726($p15 + 100, NULL);
    $M.4[$p15 + 100] := NULL;
    assert !aliasQ1727($p15 + 101, NULL);
    $M.4[$p15 + 101] := NULL;
    assert !aliasQ1728($p15 + 102, NULL);
    $M.4[$p15 + 102] := NULL;
    assert !aliasQ1729($p15 + 103, NULL);
    $M.4[$p15 + 103] := NULL;
    assert !aliasQ1730($p15 + 104, NULL);
    $M.4[$p15 + 104] := NULL;
    assert !aliasQ1731($p15 + 105, NULL);
    $M.4[$p15 + 105] := NULL;
    assert !aliasQ1732($p15 + 106, NULL);
    $M.4[$p15 + 106] := NULL;
    assert !aliasQ1733($p15 + 107, NULL);
    $M.4[$p15 + 107] := NULL;
    assert !aliasQ1734($p15 + 108, NULL);
    $M.4[$p15 + 108] := NULL;
    assert !aliasQ1735($p15 + 109, NULL);
    $M.4[$p15 + 109] := NULL;
    assert !aliasQ1736($p15 + 110, NULL);
    $M.4[$p15 + 110] := NULL;
    assert !aliasQ1737($p15 + 111, NULL);
    $M.4[$p15 + 111] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev == NULL - 7008;

procedure _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED1Ev == NULL - 7016;

procedure _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev == NULL - 7024;

procedure _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev == NULL - 7032;

procedure _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE6updateEv == NULL - 7040;

procedure _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE13check_updatedEv == NULL - 7048;

procedure _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE3getEv == NULL - 7056;

procedure _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7064;

procedure _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1738($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1739($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1740($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1741($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1742($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1743($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1744($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sEC2ERKS2_ == NULL - 7072;

procedure _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1745($p1, NULL);
    $p3 := $M.54[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1746($p4, NULL);
    $i6 := $M.55[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1747($p7, NULL);
    $i9 := $M.56[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1748($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1749($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1750($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1751($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1752($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1753($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1754($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev == NULL - 7080;

procedure _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED1Ev == NULL - 7088;

procedure _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev == NULL - 7096;

procedure _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev == NULL - 7104;

procedure _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE6updateEv == NULL - 7112;

procedure _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE13check_updatedEv == NULL - 7120;

procedure _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE3getEv == NULL - 7128;

procedure _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13rc_channels_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI13rc_channels_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7136;

procedure _ZN4uORB12SubscriptionI13rc_channels_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI13rc_channels_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1755($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI13rc_channels_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1756($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI13rc_channels_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1757($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1758($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1759($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1760($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ1761($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1762($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ1763($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1764($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ1765($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1766($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ1767($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ1768($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ1769($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ1770($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ1771($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ1772($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assert !aliasQ1773($p6 + 72, NULL);
    $M.4[$p6 + 72] := NULL;
    assert !aliasQ1774($p6 + 76, NULL);
    $M.4[$p6 + 76] := NULL;
    assert !aliasQ1775($p6 + 80, NULL);
    $M.4[$p6 + 80] := NULL;
    assert !aliasQ1776($p6 + 84, NULL);
    $M.4[$p6 + 84] := NULL;
    assert !aliasQ1777($p6 + 88, NULL);
    $M.4[$p6 + 88] := NULL;
    assert !aliasQ1778($p6 + 92, NULL);
    $M.4[$p6 + 92] := NULL;
    assert !aliasQ1779($p6 + 93, NULL);
    $M.4[$p6 + 93] := NULL;
    assert !aliasQ1780($p6 + 94, NULL);
    $M.4[$p6 + 94] := NULL;
    assert !aliasQ1781($p6 + 95, NULL);
    $M.4[$p6 + 95] := NULL;
    assert !aliasQ1782($p6 + 96, NULL);
    $M.4[$p6 + 96] := NULL;
    assert !aliasQ1783($p6 + 97, NULL);
    $M.4[$p6 + 97] := NULL;
    assert !aliasQ1784($p6 + 98, NULL);
    $M.4[$p6 + 98] := NULL;
    assert !aliasQ1785($p6 + 99, NULL);
    $M.4[$p6 + 99] := NULL;
    assert !aliasQ1786($p6 + 100, NULL);
    $M.4[$p6 + 100] := NULL;
    assert !aliasQ1787($p6 + 101, NULL);
    $M.4[$p6 + 101] := NULL;
    assert !aliasQ1788($p6 + 102, NULL);
    $M.4[$p6 + 102] := NULL;
    assert !aliasQ1789($p6 + 103, NULL);
    $M.4[$p6 + 103] := NULL;
    assert !aliasQ1790($p6 + 104, NULL);
    $M.4[$p6 + 104] := NULL;
    assert !aliasQ1791($p6 + 105, NULL);
    $M.4[$p6 + 105] := NULL;
    assert !aliasQ1792($p6 + 106, NULL);
    $M.4[$p6 + 106] := NULL;
    assert !aliasQ1793($p6 + 107, NULL);
    $M.4[$p6 + 107] := NULL;
    assert !aliasQ1794($p6 + 108, NULL);
    $M.4[$p6 + 108] := NULL;
    assert !aliasQ1795($p6 + 109, NULL);
    $M.4[$p6 + 109] := NULL;
    assert !aliasQ1796($p6 + 110, NULL);
    $M.4[$p6 + 110] := NULL;
    assert !aliasQ1797($p6 + 111, NULL);
    $M.4[$p6 + 111] := NULL;
    assert !aliasQ1798($p6 + 112, NULL);
    $M.4[$p6 + 112] := NULL;
    assert !aliasQ1799($p6 + 113, NULL);
    $M.4[$p6 + 113] := NULL;
    assert !aliasQ1800($p6 + 114, NULL);
    $M.4[$p6 + 114] := NULL;
    assert !aliasQ1801($p6 + 115, NULL);
    $M.4[$p6 + 115] := NULL;
    assert !aliasQ1802($p6 + 116, NULL);
    $M.4[$p6 + 116] := NULL;
    assert !aliasQ1803($p6 + 117, NULL);
    $M.4[$p6 + 117] := NULL;
    assert !aliasQ1804($p6 + 118, NULL);
    $M.4[$p6 + 118] := NULL;
    assert !aliasQ1805($p6 + 119, NULL);
    $M.4[$p6 + 119] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13rc_channels_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI13rc_channels_sEC2ERKS2_ == NULL - 7144;

procedure _ZN4uORB12SubscriptionI13rc_channels_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI13rc_channels_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1806($p1, NULL);
    $p3 := $M.57[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1807($p4, NULL);
    $i6 := $M.58[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1808($p7, NULL);
    $i9 := $M.59[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1809($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI13rc_channels_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1810($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI13rc_channels_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1811($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1812($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1813($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1814($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ1815($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1816($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ1817($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1818($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ1819($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1820($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1821($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ1822($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ1823($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ1824($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ1825($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ1826($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assert !aliasQ1827($p15 + 72, NULL);
    $M.4[$p15 + 72] := NULL;
    assert !aliasQ1828($p15 + 76, NULL);
    $M.4[$p15 + 76] := NULL;
    assert !aliasQ1829($p15 + 80, NULL);
    $M.4[$p15 + 80] := NULL;
    assert !aliasQ1830($p15 + 84, NULL);
    $M.4[$p15 + 84] := NULL;
    assert !aliasQ1831($p15 + 88, NULL);
    $M.4[$p15 + 88] := NULL;
    assert !aliasQ1832($p15 + 92, NULL);
    $M.4[$p15 + 92] := NULL;
    assert !aliasQ1833($p15 + 93, NULL);
    $M.4[$p15 + 93] := NULL;
    assert !aliasQ1834($p15 + 94, NULL);
    $M.4[$p15 + 94] := NULL;
    assert !aliasQ1835($p15 + 95, NULL);
    $M.4[$p15 + 95] := NULL;
    assert !aliasQ1836($p15 + 96, NULL);
    $M.4[$p15 + 96] := NULL;
    assert !aliasQ1837($p15 + 97, NULL);
    $M.4[$p15 + 97] := NULL;
    assert !aliasQ1838($p15 + 98, NULL);
    $M.4[$p15 + 98] := NULL;
    assert !aliasQ1839($p15 + 99, NULL);
    $M.4[$p15 + 99] := NULL;
    assert !aliasQ1840($p15 + 100, NULL);
    $M.4[$p15 + 100] := NULL;
    assert !aliasQ1841($p15 + 101, NULL);
    $M.4[$p15 + 101] := NULL;
    assert !aliasQ1842($p15 + 102, NULL);
    $M.4[$p15 + 102] := NULL;
    assert !aliasQ1843($p15 + 103, NULL);
    $M.4[$p15 + 103] := NULL;
    assert !aliasQ1844($p15 + 104, NULL);
    $M.4[$p15 + 104] := NULL;
    assert !aliasQ1845($p15 + 105, NULL);
    $M.4[$p15 + 105] := NULL;
    assert !aliasQ1846($p15 + 106, NULL);
    $M.4[$p15 + 106] := NULL;
    assert !aliasQ1847($p15 + 107, NULL);
    $M.4[$p15 + 107] := NULL;
    assert !aliasQ1848($p15 + 108, NULL);
    $M.4[$p15 + 108] := NULL;
    assert !aliasQ1849($p15 + 109, NULL);
    $M.4[$p15 + 109] := NULL;
    assert !aliasQ1850($p15 + 110, NULL);
    $M.4[$p15 + 110] := NULL;
    assert !aliasQ1851($p15 + 111, NULL);
    $M.4[$p15 + 111] := NULL;
    assert !aliasQ1852($p15 + 112, NULL);
    $M.4[$p15 + 112] := NULL;
    assert !aliasQ1853($p15 + 113, NULL);
    $M.4[$p15 + 113] := NULL;
    assert !aliasQ1854($p15 + 114, NULL);
    $M.4[$p15 + 114] := NULL;
    assert !aliasQ1855($p15 + 115, NULL);
    $M.4[$p15 + 115] := NULL;
    assert !aliasQ1856($p15 + 116, NULL);
    $M.4[$p15 + 116] := NULL;
    assert !aliasQ1857($p15 + 117, NULL);
    $M.4[$p15 + 117] := NULL;
    assert !aliasQ1858($p15 + 118, NULL);
    $M.4[$p15 + 118] := NULL;
    assert !aliasQ1859($p15 + 119, NULL);
    $M.4[$p15 + 119] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13rc_channels_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI13rc_channels_sED2Ev == NULL - 7152;

procedure _ZN4uORB12SubscriptionI13rc_channels_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI13rc_channels_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI13rc_channels_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI13rc_channels_sED1Ev == NULL - 7160;

procedure _ZThn24_N4uORB12SubscriptionI13rc_channels_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI13rc_channels_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI13rc_channels_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13rc_channels_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI13rc_channels_sED0Ev == NULL - 7168;

procedure _ZN4uORB12SubscriptionI13rc_channels_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI13rc_channels_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI13rc_channels_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI13rc_channels_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI13rc_channels_sED0Ev == NULL - 7176;

procedure _ZThn24_N4uORB12SubscriptionI13rc_channels_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI13rc_channels_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI13rc_channels_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13rc_channels_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI13rc_channels_sE6updateEv == NULL - 7184;

procedure _ZN4uORB12SubscriptionI13rc_channels_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI13rc_channels_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13rc_channels_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI13rc_channels_sE13check_updatedEv == NULL - 7192;

procedure _ZN4uORB12SubscriptionI13rc_channels_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI13rc_channels_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI13rc_channels_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI13rc_channels_sE3getEv == NULL - 7200;

procedure _ZN4uORB12SubscriptionI13rc_channels_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI13rc_channels_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_control_mode_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI22vehicle_control_mode_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7208;

procedure _ZN4uORB12SubscriptionI22vehicle_control_mode_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI22vehicle_control_mode_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1860($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1861($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1862($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1863($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1864($p6 + 9, NULL);
    $M.4[$p6 + 9] := NULL;
    assert !aliasQ1865($p6 + 10, NULL);
    $M.4[$p6 + 10] := NULL;
    assert !aliasQ1866($p6 + 11, NULL);
    $M.4[$p6 + 11] := NULL;
    assert !aliasQ1867($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1868($p6 + 13, NULL);
    $M.4[$p6 + 13] := NULL;
    assert !aliasQ1869($p6 + 14, NULL);
    $M.4[$p6 + 14] := NULL;
    assert !aliasQ1870($p6 + 15, NULL);
    $M.4[$p6 + 15] := NULL;
    assert !aliasQ1871($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1872($p6 + 17, NULL);
    $M.4[$p6 + 17] := NULL;
    assert !aliasQ1873($p6 + 18, NULL);
    $M.4[$p6 + 18] := NULL;
    assert !aliasQ1874($p6 + 19, NULL);
    $M.4[$p6 + 19] := NULL;
    assert !aliasQ1875($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ1876($p6 + 21, NULL);
    $M.4[$p6 + 21] := NULL;
    assert !aliasQ1877($p6 + 22, NULL);
    $M.4[$p6 + 22] := NULL;
    assert !aliasQ1878($p6 + 23, NULL);
    $M.4[$p6 + 23] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_control_mode_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI22vehicle_control_mode_sEC2ERKS2_ == NULL - 7216;

procedure _ZN4uORB12SubscriptionI22vehicle_control_mode_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI22vehicle_control_mode_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1879($p1, NULL);
    $p3 := $M.60[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1880($p4, NULL);
    $i6 := $M.61[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1881($p7, NULL);
    $i9 := $M.62[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1882($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1883($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1884($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1885($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1886($p15 + 9, NULL);
    $M.4[$p15 + 9] := NULL;
    assert !aliasQ1887($p15 + 10, NULL);
    $M.4[$p15 + 10] := NULL;
    assert !aliasQ1888($p15 + 11, NULL);
    $M.4[$p15 + 11] := NULL;
    assert !aliasQ1889($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1890($p15 + 13, NULL);
    $M.4[$p15 + 13] := NULL;
    assert !aliasQ1891($p15 + 14, NULL);
    $M.4[$p15 + 14] := NULL;
    assert !aliasQ1892($p15 + 15, NULL);
    $M.4[$p15 + 15] := NULL;
    assert !aliasQ1893($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1894($p15 + 17, NULL);
    $M.4[$p15 + 17] := NULL;
    assert !aliasQ1895($p15 + 18, NULL);
    $M.4[$p15 + 18] := NULL;
    assert !aliasQ1896($p15 + 19, NULL);
    $M.4[$p15 + 19] := NULL;
    assert !aliasQ1897($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ1898($p15 + 21, NULL);
    $M.4[$p15 + 21] := NULL;
    assert !aliasQ1899($p15 + 22, NULL);
    $M.4[$p15 + 22] := NULL;
    assert !aliasQ1900($p15 + 23, NULL);
    $M.4[$p15 + 23] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev == NULL - 7224;

procedure _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED1Ev == NULL - 7232;

procedure _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_control_mode_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI22vehicle_control_mode_sED0Ev == NULL - 7240;

procedure _ZN4uORB12SubscriptionI22vehicle_control_mode_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI22vehicle_control_mode_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED0Ev == NULL - 7248;

procedure _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI22vehicle_control_mode_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_control_mode_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI22vehicle_control_mode_sE6updateEv == NULL - 7256;

procedure _ZN4uORB12SubscriptionI22vehicle_control_mode_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI22vehicle_control_mode_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_control_mode_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI22vehicle_control_mode_sE13check_updatedEv == NULL - 7264;

procedure _ZN4uORB12SubscriptionI22vehicle_control_mode_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI22vehicle_control_mode_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI22vehicle_control_mode_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI22vehicle_control_mode_sE3getEv == NULL - 7272;

procedure _ZN4uORB12SubscriptionI22vehicle_control_mode_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI22vehicle_control_mode_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16actuator_armed_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI16actuator_armed_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7280;

procedure _ZN4uORB12SubscriptionI16actuator_armed_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI16actuator_armed_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1901($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1902($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1903($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1904($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1905($p6 + 9, NULL);
    $M.4[$p6 + 9] := NULL;
    assert !aliasQ1906($p6 + 10, NULL);
    $M.4[$p6 + 10] := NULL;
    assert !aliasQ1907($p6 + 11, NULL);
    $M.4[$p6 + 11] := NULL;
    assert !aliasQ1908($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1909($p6 + 13, NULL);
    $M.4[$p6 + 13] := NULL;
    assert !aliasQ1910($p6 + 14, NULL);
    $M.4[$p6 + 14] := NULL;
    assert !aliasQ1911($p6 + 15, NULL);
    $M.4[$p6 + 15] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16actuator_armed_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI16actuator_armed_sEC2ERKS2_ == NULL - 7288;

procedure _ZN4uORB12SubscriptionI16actuator_armed_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI16actuator_armed_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1912($p1, NULL);
    $p3 := $M.63[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1913($p4, NULL);
    $i6 := $M.64[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1914($p7, NULL);
    $i9 := $M.65[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1915($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1916($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1917($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1918($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1919($p15 + 9, NULL);
    $M.4[$p15 + 9] := NULL;
    assert !aliasQ1920($p15 + 10, NULL);
    $M.4[$p15 + 10] := NULL;
    assert !aliasQ1921($p15 + 11, NULL);
    $M.4[$p15 + 11] := NULL;
    assert !aliasQ1922($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1923($p15 + 13, NULL);
    $M.4[$p15 + 13] := NULL;
    assert !aliasQ1924($p15 + 14, NULL);
    $M.4[$p15 + 14] := NULL;
    assert !aliasQ1925($p15 + 15, NULL);
    $M.4[$p15 + 15] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev == NULL - 7296;

procedure _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED1Ev == NULL - 7304;

procedure _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16actuator_armed_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI16actuator_armed_sED0Ev == NULL - 7312;

procedure _ZN4uORB12SubscriptionI16actuator_armed_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI16actuator_armed_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED0Ev == NULL - 7320;

procedure _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI16actuator_armed_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16actuator_armed_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI16actuator_armed_sE6updateEv == NULL - 7328;

procedure _ZN4uORB12SubscriptionI16actuator_armed_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI16actuator_armed_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16actuator_armed_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI16actuator_armed_sE13check_updatedEv == NULL - 7336;

procedure _ZN4uORB12SubscriptionI16actuator_armed_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI16actuator_armed_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16actuator_armed_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI16actuator_armed_sE3getEv == NULL - 7344;

procedure _ZN4uORB12SubscriptionI16actuator_armed_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI16actuator_armed_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16battery_status_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI16battery_status_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7352;

procedure _ZN4uORB12SubscriptionI16battery_status_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI16battery_status_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1926($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI16battery_status_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1927($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI16battery_status_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1928($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1929($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1930($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1931($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1932($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ1933($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1934($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ1935($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1936($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ1937($p6 + 37, NULL);
    $M.4[$p6 + 37] := NULL;
    assert !aliasQ1938($p6 + 38, NULL);
    $M.4[$p6 + 38] := NULL;
    assert !aliasQ1939($p6 + 39, NULL);
    $M.4[$p6 + 39] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16battery_status_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI16battery_status_sEC2ERKS2_ == NULL - 7360;

procedure _ZN4uORB12SubscriptionI16battery_status_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI16battery_status_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1940($p1, NULL);
    $p3 := $M.66[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1941($p4, NULL);
    $i6 := $M.67[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1942($p7, NULL);
    $i9 := $M.68[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1943($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI16battery_status_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1944($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI16battery_status_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1945($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1946($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1947($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ1948($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1949($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ1950($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1951($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ1952($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1953($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ1954($p15 + 37, NULL);
    $M.4[$p15 + 37] := NULL;
    assert !aliasQ1955($p15 + 38, NULL);
    $M.4[$p15 + 38] := NULL;
    assert !aliasQ1956($p15 + 39, NULL);
    $M.4[$p15 + 39] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16battery_status_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI16battery_status_sED2Ev == NULL - 7368;

procedure _ZN4uORB12SubscriptionI16battery_status_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI16battery_status_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI16battery_status_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI16battery_status_sED1Ev == NULL - 7376;

procedure _ZThn24_N4uORB12SubscriptionI16battery_status_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI16battery_status_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI16battery_status_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16battery_status_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI16battery_status_sED0Ev == NULL - 7384;

procedure _ZN4uORB12SubscriptionI16battery_status_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI16battery_status_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI16battery_status_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI16battery_status_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI16battery_status_sED0Ev == NULL - 7392;

procedure _ZThn24_N4uORB12SubscriptionI16battery_status_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI16battery_status_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI16battery_status_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16battery_status_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI16battery_status_sE6updateEv == NULL - 7400;

procedure _ZN4uORB12SubscriptionI16battery_status_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI16battery_status_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16battery_status_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI16battery_status_sE13check_updatedEv == NULL - 7408;

procedure _ZN4uORB12SubscriptionI16battery_status_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI16battery_status_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI16battery_status_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI16battery_status_sE3getEv == NULL - 7416;

procedure _ZN4uORB12SubscriptionI16battery_status_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI16battery_status_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15home_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI15home_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7424;

procedure _ZN4uORB12SubscriptionI15home_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI15home_position_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1957($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI15home_position_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1958($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI15home_position_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1959($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1960($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1961($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1962($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1963($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ1964($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1965($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ1966($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1967($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ1968($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ1969($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15home_position_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI15home_position_sEC2ERKS2_ == NULL - 7432;

procedure _ZN4uORB12SubscriptionI15home_position_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI15home_position_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ1970($p1, NULL);
    $p3 := $M.69[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ1971($p4, NULL);
    $i6 := $M.70[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ1972($p7, NULL);
    $i9 := $M.71[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1973($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI15home_position_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ1974($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI15home_position_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ1975($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ1976($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ1977($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ1978($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ1979($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ1980($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ1981($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ1982($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ1983($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ1984($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ1985($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15home_position_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI15home_position_sED2Ev == NULL - 7440;

procedure _ZN4uORB12SubscriptionI15home_position_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI15home_position_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI15home_position_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI15home_position_sED1Ev == NULL - 7448;

procedure _ZThn24_N4uORB12SubscriptionI15home_position_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI15home_position_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI15home_position_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15home_position_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI15home_position_sED0Ev == NULL - 7456;

procedure _ZN4uORB12SubscriptionI15home_position_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI15home_position_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI15home_position_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI15home_position_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI15home_position_sED0Ev == NULL - 7464;

procedure _ZThn24_N4uORB12SubscriptionI15home_position_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI15home_position_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI15home_position_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15home_position_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI15home_position_sE6updateEv == NULL - 7472;

procedure _ZN4uORB12SubscriptionI15home_position_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI15home_position_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15home_position_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI15home_position_sE13check_updatedEv == NULL - 7480;

procedure _ZN4uORB12SubscriptionI15home_position_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI15home_position_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15home_position_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI15home_position_sE3getEv == NULL - 7488;

procedure _ZN4uORB12SubscriptionI15home_position_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI15home_position_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI14optical_flow_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI14optical_flow_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7496;

procedure _ZN4uORB12SubscriptionI14optical_flow_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI14optical_flow_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1986($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI14optical_flow_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ1987($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI14optical_flow_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ1988($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ1989($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ1990($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ1991($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ1992($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ1993($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ1994($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ1995($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ1996($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ1997($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ1998($p6 + 42, NULL);
    $M.4[$p6 + 42] := NULL;
    assert !aliasQ1999($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ2000($p6 + 45, NULL);
    $M.4[$p6 + 45] := NULL;
    assert !aliasQ2001($p6 + 46, NULL);
    $M.4[$p6 + 46] := NULL;
    assert !aliasQ2002($p6 + 47, NULL);
    $M.4[$p6 + 47] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI14optical_flow_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI14optical_flow_sEC2ERKS2_ == NULL - 7504;

procedure _ZN4uORB12SubscriptionI14optical_flow_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI14optical_flow_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ2003($p1, NULL);
    $p3 := $M.72[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ2004($p4, NULL);
    $i6 := $M.73[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ2005($p7, NULL);
    $i9 := $M.74[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ2006($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI14optical_flow_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ2007($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI14optical_flow_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ2008($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ2009($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ2010($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ2011($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ2012($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ2013($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ2014($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ2015($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ2016($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ2017($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ2018($p15 + 42, NULL);
    $M.4[$p15 + 42] := NULL;
    assert !aliasQ2019($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ2020($p15 + 45, NULL);
    $M.4[$p15 + 45] := NULL;
    assert !aliasQ2021($p15 + 46, NULL);
    $M.4[$p15 + 46] := NULL;
    assert !aliasQ2022($p15 + 47, NULL);
    $M.4[$p15 + 47] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI14optical_flow_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI14optical_flow_sED2Ev == NULL - 7512;

procedure _ZN4uORB12SubscriptionI14optical_flow_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI14optical_flow_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI14optical_flow_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI14optical_flow_sED1Ev == NULL - 7520;

procedure _ZThn24_N4uORB12SubscriptionI14optical_flow_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI14optical_flow_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI14optical_flow_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI14optical_flow_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI14optical_flow_sED0Ev == NULL - 7528;

procedure _ZN4uORB12SubscriptionI14optical_flow_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI14optical_flow_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI14optical_flow_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI14optical_flow_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI14optical_flow_sED0Ev == NULL - 7536;

procedure _ZThn24_N4uORB12SubscriptionI14optical_flow_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI14optical_flow_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI14optical_flow_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI14optical_flow_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI14optical_flow_sE6updateEv == NULL - 7544;

procedure _ZN4uORB12SubscriptionI14optical_flow_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI14optical_flow_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI14optical_flow_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI14optical_flow_sE13check_updatedEv == NULL - 7552;

procedure _ZN4uORB12SubscriptionI14optical_flow_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI14optical_flow_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI14optical_flow_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI14optical_flow_sE3getEv == NULL - 7560;

procedure _ZN4uORB12SubscriptionI14optical_flow_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI14optical_flow_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17distance_sensor_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI17distance_sensor_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7568;

procedure _ZN4uORB12SubscriptionI17distance_sensor_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI17distance_sensor_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ2023($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ2024($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ2025($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ2026($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ2027($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ2028($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ2029($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ2030($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ2031($p6 + 25, NULL);
    $M.4[$p6 + 25] := NULL;
    assert !aliasQ2032($p6 + 26, NULL);
    $M.4[$p6 + 26] := NULL;
    assert !aliasQ2033($p6 + 27, NULL);
    $M.4[$p6 + 27] := NULL;
    assert !aliasQ2034($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ2035($p6 + 29, NULL);
    $M.4[$p6 + 29] := NULL;
    assert !aliasQ2036($p6 + 30, NULL);
    $M.4[$p6 + 30] := NULL;
    assert !aliasQ2037($p6 + 31, NULL);
    $M.4[$p6 + 31] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17distance_sensor_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI17distance_sensor_sEC2ERKS2_ == NULL - 7576;

procedure _ZN4uORB12SubscriptionI17distance_sensor_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI17distance_sensor_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ2038($p1, NULL);
    $p3 := $M.75[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ2039($p4, NULL);
    $i6 := $M.76[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ2040($p7, NULL);
    $i9 := $M.77[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ2041($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ2042($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ2043($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ2044($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ2045($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ2046($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ2047($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ2048($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ2049($p15 + 25, NULL);
    $M.4[$p15 + 25] := NULL;
    assert !aliasQ2050($p15 + 26, NULL);
    $M.4[$p15 + 26] := NULL;
    assert !aliasQ2051($p15 + 27, NULL);
    $M.4[$p15 + 27] := NULL;
    assert !aliasQ2052($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ2053($p15 + 29, NULL);
    $M.4[$p15 + 29] := NULL;
    assert !aliasQ2054($p15 + 30, NULL);
    $M.4[$p15 + 30] := NULL;
    assert !aliasQ2055($p15 + 31, NULL);
    $M.4[$p15 + 31] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev == NULL - 7584;

procedure _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED1Ev == NULL - 7592;

procedure _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17distance_sensor_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI17distance_sensor_sED0Ev == NULL - 7600;

procedure _ZN4uORB12SubscriptionI17distance_sensor_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI17distance_sensor_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED0Ev == NULL - 7608;

procedure _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI17distance_sensor_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17distance_sensor_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI17distance_sensor_sE6updateEv == NULL - 7616;

procedure _ZN4uORB12SubscriptionI17distance_sensor_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI17distance_sensor_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17distance_sensor_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI17distance_sensor_sE13check_updatedEv == NULL - 7624;

procedure _ZN4uORB12SubscriptionI17distance_sensor_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI17distance_sensor_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI17distance_sensor_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI17distance_sensor_sE3getEv == NULL - 7632;

procedure _ZN4uORB12SubscriptionI17distance_sensor_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI17distance_sensor_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15att_pos_mocap_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI15att_pos_mocap_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7640;

procedure _ZN4uORB12SubscriptionI15att_pos_mocap_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI15att_pos_mocap_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ2056($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ2057($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ2058($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ2059($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ2060($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ2061($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ2062($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ2063($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ2064($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ2065($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ2066($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ2067($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ2068($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15att_pos_mocap_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI15att_pos_mocap_sEC2ERKS2_ == NULL - 7648;

procedure _ZN4uORB12SubscriptionI15att_pos_mocap_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI15att_pos_mocap_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ2069($p1, NULL);
    $p3 := $M.78[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ2070($p4, NULL);
    $i6 := $M.79[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ2071($p7, NULL);
    $i9 := $M.80[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ2072($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ2073($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ2074($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ2075($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ2076($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ2077($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ2078($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ2079($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ2080($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ2081($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ2082($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ2083($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ2084($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev == NULL - 7656;

procedure _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED1Ev == NULL - 7664;

procedure _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15att_pos_mocap_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI15att_pos_mocap_sED0Ev == NULL - 7672;

procedure _ZN4uORB12SubscriptionI15att_pos_mocap_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI15att_pos_mocap_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED0Ev == NULL - 7680;

procedure _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI15att_pos_mocap_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15att_pos_mocap_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI15att_pos_mocap_sE6updateEv == NULL - 7688;

procedure _ZN4uORB12SubscriptionI15att_pos_mocap_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI15att_pos_mocap_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15att_pos_mocap_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI15att_pos_mocap_sE13check_updatedEv == NULL - 7696;

procedure _ZN4uORB12SubscriptionI15att_pos_mocap_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI15att_pos_mocap_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15att_pos_mocap_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI15att_pos_mocap_sE3getEv == NULL - 7704;

procedure _ZN4uORB12SubscriptionI15att_pos_mocap_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI15att_pos_mocap_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI26vision_position_estimate_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI26vision_position_estimate_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7712;

procedure _ZN4uORB12SubscriptionI26vision_position_estimate_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI26vision_position_estimate_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ2085($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ2086($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ2087($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ2088($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ2089($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ2090($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ2091($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ2092($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ2093($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ2094($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ2095($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ2096($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ2097($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ2098($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ2099($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ2100($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ2101($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assert !aliasQ2102($p6 + 72, NULL);
    $M.4[$p6 + 72] := NULL;
    assert !aliasQ2103($p6 + 76, NULL);
    $M.4[$p6 + 76] := NULL;
    assert !aliasQ2104($p6 + 77, NULL);
    $M.4[$p6 + 77] := NULL;
    assert !aliasQ2105($p6 + 78, NULL);
    $M.4[$p6 + 78] := NULL;
    assert !aliasQ2106($p6 + 79, NULL);
    $M.4[$p6 + 79] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI26vision_position_estimate_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI26vision_position_estimate_sEC2ERKS2_ == NULL - 7720;

procedure _ZN4uORB12SubscriptionI26vision_position_estimate_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI26vision_position_estimate_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ2107($p1, NULL);
    $p3 := $M.81[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ2108($p4, NULL);
    $i6 := $M.82[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ2109($p7, NULL);
    $i9 := $M.83[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ2110($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ2111($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ2112($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ2113($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ2114($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ2115($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ2116($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ2117($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ2118($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ2119($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ2120($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ2121($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ2122($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ2123($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ2124($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ2125($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ2126($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assert !aliasQ2127($p15 + 72, NULL);
    $M.4[$p15 + 72] := NULL;
    assert !aliasQ2128($p15 + 76, NULL);
    $M.4[$p15 + 76] := NULL;
    assert !aliasQ2129($p15 + 77, NULL);
    $M.4[$p15 + 77] := NULL;
    assert !aliasQ2130($p15 + 78, NULL);
    $M.4[$p15 + 78] := NULL;
    assert !aliasQ2131($p15 + 79, NULL);
    $M.4[$p15 + 79] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev == NULL - 7728;

procedure _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED1Ev == NULL - 7736;

procedure _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI26vision_position_estimate_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI26vision_position_estimate_sED0Ev == NULL - 7744;

procedure _ZN4uORB12SubscriptionI26vision_position_estimate_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI26vision_position_estimate_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED0Ev == NULL - 7752;

procedure _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI26vision_position_estimate_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI26vision_position_estimate_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI26vision_position_estimate_sE6updateEv == NULL - 7760;

procedure _ZN4uORB12SubscriptionI26vision_position_estimate_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI26vision_position_estimate_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI26vision_position_estimate_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI26vision_position_estimate_sE13check_updatedEv == NULL - 7768;

procedure _ZN4uORB12SubscriptionI26vision_position_estimate_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI26vision_position_estimate_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI26vision_position_estimate_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI26vision_position_estimate_sE3getEv == NULL - 7776;

procedure _ZN4uORB12SubscriptionI26vision_position_estimate_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI26vision_position_estimate_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15control_state_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE: int;

axiom _ZN4uORB12SubscriptionI15control_state_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE == NULL - 7784;

procedure _ZN4uORB12SubscriptionI15control_state_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB12SubscriptionI15control_state_sEC2EPK12orb_metadatajiP4ListIPNS_16SubscriptionNodeEE(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, meta, interval, instance, list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ2132($p1, NULL);
    $M.3 := $M.3[$p1 := _ZTVN4uORB12SubscriptionI15control_state_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p2 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 127, 1} true;
    assert !aliasQ2133($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB12SubscriptionI15control_state_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p5 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 126, 2} true;
    assert !aliasQ2134($p6, NULL);
    $M.4[$p6] := NULL;
    assert !aliasQ2135($p6 + 8, NULL);
    $M.4[$p6 + 8] := NULL;
    assert !aliasQ2136($p6 + 12, NULL);
    $M.4[$p6 + 12] := NULL;
    assert !aliasQ2137($p6 + 16, NULL);
    $M.4[$p6 + 16] := NULL;
    assert !aliasQ2138($p6 + 20, NULL);
    $M.4[$p6 + 20] := NULL;
    assert !aliasQ2139($p6 + 24, NULL);
    $M.4[$p6 + 24] := NULL;
    assert !aliasQ2140($p6 + 28, NULL);
    $M.4[$p6 + 28] := NULL;
    assert !aliasQ2141($p6 + 32, NULL);
    $M.4[$p6 + 32] := NULL;
    assert !aliasQ2142($p6 + 36, NULL);
    $M.4[$p6 + 36] := NULL;
    assert !aliasQ2143($p6 + 40, NULL);
    $M.4[$p6 + 40] := NULL;
    assert !aliasQ2144($p6 + 44, NULL);
    $M.4[$p6 + 44] := NULL;
    assert !aliasQ2145($p6 + 48, NULL);
    $M.4[$p6 + 48] := NULL;
    assert !aliasQ2146($p6 + 52, NULL);
    $M.4[$p6 + 52] := NULL;
    assert !aliasQ2147($p6 + 56, NULL);
    $M.4[$p6 + 56] := NULL;
    assert !aliasQ2148($p6 + 60, NULL);
    $M.4[$p6 + 60] := NULL;
    assert !aliasQ2149($p6 + 64, NULL);
    $M.4[$p6 + 64] := NULL;
    assert !aliasQ2150($p6 + 68, NULL);
    $M.4[$p6 + 68] := NULL;
    assert !aliasQ2151($p6 + 72, NULL);
    $M.4[$p6 + 72] := NULL;
    assert !aliasQ2152($p6 + 76, NULL);
    $M.4[$p6 + 76] := NULL;
    assert !aliasQ2153($p6 + 80, NULL);
    $M.4[$p6 + 80] := NULL;
    assert !aliasQ2154($p6 + 84, NULL);
    $M.4[$p6 + 84] := NULL;
    assert !aliasQ2155($p6 + 88, NULL);
    $M.4[$p6 + 88] := NULL;
    assert !aliasQ2156($p6 + 92, NULL);
    $M.4[$p6 + 92] := NULL;
    assert !aliasQ2157($p6 + 96, NULL);
    $M.4[$p6 + 96] := NULL;
    assert !aliasQ2158($p6 + 100, NULL);
    $M.4[$p6 + 100] := NULL;
    assert !aliasQ2159($p6 + 104, NULL);
    $M.4[$p6 + 104] := NULL;
    assert !aliasQ2160($p6 + 105, NULL);
    $M.4[$p6 + 105] := NULL;
    assert !aliasQ2161($p6 + 106, NULL);
    $M.4[$p6 + 106] := NULL;
    assert !aliasQ2162($p6 + 107, NULL);
    $M.4[$p6 + 107] := NULL;
    assert !aliasQ2163($p6 + 108, NULL);
    $M.4[$p6 + 108] := NULL;
    assert !aliasQ2164($p6 + 109, NULL);
    $M.4[$p6 + 109] := NULL;
    assert !aliasQ2165($p6 + 110, NULL);
    $M.4[$p6 + 110] := NULL;
    assert !aliasQ2166($p6 + 111, NULL);
    $M.4[$p6 + 111] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 128, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15control_state_sEC2ERKS2_: int;

axiom _ZN4uORB12SubscriptionI15control_state_sEC2ERKS2_ == NULL - 7792;

procedure _ZN4uORB12SubscriptionI15control_state_sEC2ERKS2_(this: int, other: int);



implementation _ZN4uORB12SubscriptionI15control_state_sEC2ERKS2_(this: int, other: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p4"} $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var $p15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "other"} boogie_si_record_ref(other);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p1 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 19} true;
    assert !aliasQ2167($p1, NULL);
    $p3 := $M.84[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p4 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    $p5 := $p4 + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 32} true;
    assert !aliasQ2168($p4, NULL);
    $i6 := $M.85[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p7 := other;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 132, 49} true;
    assert !aliasQ2169($p7, NULL);
    $i9 := $M.86[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    call _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E($p0, $p3, $i6, $i9, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ2170($p10, NULL);
    $M.3 := $M.3[$p10 := _ZTVN4uORB12SubscriptionI15control_state_sEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p11 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p12 := $p11 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 134, 1} true;
    assert !aliasQ2171($p13, NULL);
    $M.3 := $M.3[$p13 := _ZTVN4uORB12SubscriptionI15control_state_sEE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p14 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 133, 2} true;
    assert !aliasQ2172($p15, NULL);
    $M.4[$p15] := NULL;
    assert !aliasQ2173($p15 + 8, NULL);
    $M.4[$p15 + 8] := NULL;
    assert !aliasQ2174($p15 + 12, NULL);
    $M.4[$p15 + 12] := NULL;
    assert !aliasQ2175($p15 + 16, NULL);
    $M.4[$p15 + 16] := NULL;
    assert !aliasQ2176($p15 + 20, NULL);
    $M.4[$p15 + 20] := NULL;
    assert !aliasQ2177($p15 + 24, NULL);
    $M.4[$p15 + 24] := NULL;
    assert !aliasQ2178($p15 + 28, NULL);
    $M.4[$p15 + 28] := NULL;
    assert !aliasQ2179($p15 + 32, NULL);
    $M.4[$p15 + 32] := NULL;
    assert !aliasQ2180($p15 + 36, NULL);
    $M.4[$p15 + 36] := NULL;
    assert !aliasQ2181($p15 + 40, NULL);
    $M.4[$p15 + 40] := NULL;
    assert !aliasQ2182($p15 + 44, NULL);
    $M.4[$p15 + 44] := NULL;
    assert !aliasQ2183($p15 + 48, NULL);
    $M.4[$p15 + 48] := NULL;
    assert !aliasQ2184($p15 + 52, NULL);
    $M.4[$p15 + 52] := NULL;
    assert !aliasQ2185($p15 + 56, NULL);
    $M.4[$p15 + 56] := NULL;
    assert !aliasQ2186($p15 + 60, NULL);
    $M.4[$p15 + 60] := NULL;
    assert !aliasQ2187($p15 + 64, NULL);
    $M.4[$p15 + 64] := NULL;
    assert !aliasQ2188($p15 + 68, NULL);
    $M.4[$p15 + 68] := NULL;
    assert !aliasQ2189($p15 + 72, NULL);
    $M.4[$p15 + 72] := NULL;
    assert !aliasQ2190($p15 + 76, NULL);
    $M.4[$p15 + 76] := NULL;
    assert !aliasQ2191($p15 + 80, NULL);
    $M.4[$p15 + 80] := NULL;
    assert !aliasQ2192($p15 + 84, NULL);
    $M.4[$p15 + 84] := NULL;
    assert !aliasQ2193($p15 + 88, NULL);
    $M.4[$p15 + 88] := NULL;
    assert !aliasQ2194($p15 + 92, NULL);
    $M.4[$p15 + 92] := NULL;
    assert !aliasQ2195($p15 + 96, NULL);
    $M.4[$p15 + 96] := NULL;
    assert !aliasQ2196($p15 + 100, NULL);
    $M.4[$p15 + 100] := NULL;
    assert !aliasQ2197($p15 + 104, NULL);
    $M.4[$p15 + 104] := NULL;
    assert !aliasQ2198($p15 + 105, NULL);
    $M.4[$p15 + 105] := NULL;
    assert !aliasQ2199($p15 + 106, NULL);
    $M.4[$p15 + 106] := NULL;
    assert !aliasQ2200($p15 + 107, NULL);
    $M.4[$p15 + 107] := NULL;
    assert !aliasQ2201($p15 + 108, NULL);
    $M.4[$p15 + 108] := NULL;
    assert !aliasQ2202($p15 + 109, NULL);
    $M.4[$p15 + 109] := NULL;
    assert !aliasQ2203($p15 + 110, NULL);
    $M.4[$p15 + 110] := NULL;
    assert !aliasQ2204($p15 + 111, NULL);
    $M.4[$p15 + 111] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 135, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15control_state_sED2Ev: int;

axiom _ZN4uORB12SubscriptionI15control_state_sED2Ev == NULL - 7800;

procedure _ZN4uORB12SubscriptionI15control_state_sED2Ev(this: int);



implementation _ZN4uORB12SubscriptionI15control_state_sED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI15control_state_sED1Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI15control_state_sED1Ev == NULL - 7808;

procedure _ZThn24_N4uORB12SubscriptionI15control_state_sED1Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI15control_state_sED1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI15control_state_sED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15control_state_sED0Ev: int;

axiom _ZN4uORB12SubscriptionI15control_state_sED0Ev == NULL - 7816;

procedure _ZN4uORB12SubscriptionI15control_state_sED0Ev(this: int);



implementation _ZN4uORB12SubscriptionI15control_state_sED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZN4uORB12SubscriptionI15control_state_sED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 139, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 140, 1} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB12SubscriptionI15control_state_sED0Ev: int;

axiom _ZThn24_N4uORB12SubscriptionI15control_state_sED0Ev == NULL - 7824;

procedure _ZThn24_N4uORB12SubscriptionI15control_state_sED0Ev(this: int);



implementation _ZThn24_N4uORB12SubscriptionI15control_state_sED0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    call _ZN4uORB12SubscriptionI15control_state_sED0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 180, 10} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15control_state_sE6updateEv: int;

axiom _ZN4uORB12SubscriptionI15control_state_sE6updateEv == NULL - 7832;

procedure _ZN4uORB12SubscriptionI15control_state_sE6updateEv(this: int);



implementation _ZN4uORB12SubscriptionI15control_state_sE6updateEv(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 36} true;
    $p1 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 35} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 145, 20} true;
    call _ZN4uORB16SubscriptionBase6updateEPv($p0, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 146, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15control_state_sE13check_updatedEv: int;

axiom _ZN4uORB12SubscriptionI15control_state_sE13check_updatedEv == NULL - 7840;

procedure _ZN4uORB12SubscriptionI15control_state_sE13check_updatedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12SubscriptionI15control_state_sE13check_updatedEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 27} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 9} true;
    call $i1 := _ZN4uORB16SubscriptionBase7updatedEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 151, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB12SubscriptionI15control_state_sE3getEv: int;

axiom _ZN4uORB12SubscriptionI15control_state_sE3getEv == NULL - 7848;

procedure _ZN4uORB12SubscriptionI15control_state_sE3getEv(this: int) returns ($r: int);



implementation _ZN4uORB12SubscriptionI15control_state_sE3getEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $p0 := this + 48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 155, 35} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB16SubscriptionBaseC2EPK12orb_metadatajj: int;

axiom _ZN4uORB16SubscriptionBaseC2EPK12orb_metadatajj == NULL - 7856;

procedure _ZN4uORB16SubscriptionBaseC2EPK12orb_metadatajj(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int);



implementation _ZN4uORB16SubscriptionBaseC2EPK12orb_metadatajj(this: int, meta: int, interval: int, instance: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var {:base "this"} $p3: int;
  var {:base "this"} $p4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:scalar} $i8: int;
  var {:base "this"} $p9: int;
  var {:scalar} $i10: int;
  var {:base "this"} $p11: int;
  var {:base "this"} $p12: int;
  var {:scalar} $i13: int;
  var {:scalar} $i14: int;
  var {:scalar} $i15: int;
  var {:scalar} $i16: int;
  var {:scalar} $i17: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 78, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 78, 1} true;
    assert !aliasQ2205($p0, NULL);
    $M.3 := $M.3[$p0 := _ZTVN4uORB16SubscriptionBaseE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 75, 2} true;
    $p1 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 75, 2} true;
    assert !aliasQ2206(this, NULL);
    $M.3 := $M.3[$p1 := meta];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 76, 2} true;
    $p2 := this + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 76, 2} true;
    assert !aliasQ2207(this, NULL);
    $M.3 := $M.3[$p2 := instance];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 77, 2} true;
    $p3 := this + 20;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 77, 2} true;
    assert !aliasQ2208(this, NULL);
    $M.3 := $M.3[$p3 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 79, 6} true;
    $p4 := this + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 79, 6} true;
    assert !aliasQ2209(this, NULL);
    $i5 := $M.3[$p4];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 79, 6} true;
    $i6 := (if $i5 > NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 81, 8} true;
    call $p7 := _ZN4uORB16SubscriptionBase7getMetaEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 79, 6} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i6 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 80, 14} true;
    call $i8 := orb_subscribe_multi($p7, instance);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 80, 3} true;
    $p9 := this + 20;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 80, 3} true;
    assert !aliasQ2210(this, NULL);
    $M.3 := $M.3[$p9 := $i8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 83, 2} true;
    goto $bb3;

  $bb2:
    assume {:partition} !($i6 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 84, 14} true;
    call $i10 := orb_subscribe($p7);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 84, 3} true;
    $p11 := this + 20;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 84, 3} true;
    assert !aliasQ2211(this, NULL);
    $M.3 := $M.3[$p11 := $i10];
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 87, 6} true;
    $p12 := this + 20;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 87, 6} true;
    assert !aliasQ2212(this, NULL);
    $i13 := $M.3[$p12];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 87, 6} true;
    $i14 := (if $i13 < NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 87, 6} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb4:
    assume {:partition} $i14 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 87, 21} true;
    call px4_log_modulename.i32.ref.ref(2, .str31416, .str161419);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 87, 42} true;
    goto $bb6;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 87, 6} true;
    assume {:partition} !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 89, 6} true;
    $i15 := (if interval > NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 89, 6} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb7:
    assume {:partition} $i15 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 90, 20} true;
    call $i16 := _ZN4uORB16SubscriptionBase9getHandleEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 90, 3} true;
    call $i17 := orb_set_interval($i16, interval);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 91, 2} true;
    goto $bb9;

  $bb8:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 89, 6} true;
    assume {:partition} !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 92, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB16SubscriptionBaseD2Ev: int;

axiom _ZN4uORB16SubscriptionBaseD2Ev == NULL - 7864;

procedure _ZN4uORB16SubscriptionBaseD2Ev(this: int);



implementation _ZN4uORB16SubscriptionBaseD2Ev(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 114, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 114, 1} true;
    assert !aliasQ2213($p0, NULL);
    $M.2 := $M.2[$p0 := _ZTVN4uORB16SubscriptionBaseE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 115, 28} true;
    $p1 := this + 20;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 115, 28} true;
    assert !aliasQ2214(this, NULL);
    $i2 := $M.2[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 115, 12} true;
    call $i3 := orb_unsubscribe($i2);
    call {:cexpr "ret"} boogie_si_record_i32($i3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 117, 6} true;
    $i4 := (if $i3 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 117, 6} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i4 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 117, 23} true;
    call px4_log_modulename.i32.ref.ref(2, .str31416, .str41420);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 117, 56} true;
    goto $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 117, 6} true;
    assume {:partition} !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 118, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB16SubscriptionBaseD0Ev: int;

axiom _ZN4uORB16SubscriptionBaseD0Ev == NULL - 7872;

procedure _ZN4uORB16SubscriptionBaseD0Ev(this: int);



implementation _ZN4uORB16SubscriptionBaseD0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 114, 1} true;
    call _ZN4uORB16SubscriptionBaseD2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 114, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 114, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.cpp", 118, 1} true;
    $exn := false;
    return;
}



const orb_advertise: int;

axiom orb_advertise == NULL - 7880;

procedure orb_advertise(meta: int, data: int) returns ($r: int);



implementation orb_advertise(meta: int, data: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "data"} boogie_si_record_ref(data);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 45, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 45, 9} true;
    call $p1 := _ZN4uORB7Manager13orb_advertiseEPK12orb_metadataPKvj($p0, meta, data, 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 45, 2} true;
    $r := $p1;
    $exn := false;
    return;
}



const orb_advertise_queue: int;

axiom orb_advertise_queue == NULL - 7888;

procedure orb_advertise_queue(meta: int, data: int, {:scalar} queue_size: int) returns ($r: int);



implementation orb_advertise_queue(meta: int, data: int, queue_size: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "data"} boogie_si_record_ref(data);
    call {:cexpr "queue_size"} boogie_si_record_i32(queue_size);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 50, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 50, 9} true;
    call $p1 := _ZN4uORB7Manager13orb_advertiseEPK12orb_metadataPKvj($p0, meta, data, queue_size);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 50, 2} true;
    $r := $p1;
    $exn := false;
    return;
}



const orb_advertise_multi: int;

axiom orb_advertise_multi == NULL - 7896;

procedure orb_advertise_multi(meta: int, data: int, instance: int, {:scalar} priority: int) returns ($r: int);



implementation orb_advertise_multi(meta: int, data: int, instance: int, priority: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "data"} boogie_si_record_ref(data);
    call {:cexpr "instance"} boogie_si_record_ref(instance);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 56, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 56, 9} true;
    call $p1 := _ZN4uORB7Manager19orb_advertise_multiEPK12orb_metadataPKvPiij($p0, meta, data, instance, priority, 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 56, 2} true;
    $r := $p1;
    $exn := false;
    return;
}



const orb_advertise_multi_queue: int;

axiom orb_advertise_multi_queue == NULL - 7904;

procedure orb_advertise_multi_queue(meta: int, data: int, instance: int, {:scalar} priority: int, {:scalar} queue_size: int) returns ($r: int);



implementation orb_advertise_multi_queue(meta: int, data: int, instance: int, priority: int, queue_size: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "data"} boogie_si_record_ref(data);
    call {:cexpr "instance"} boogie_si_record_ref(instance);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "queue_size"} boogie_si_record_i32(queue_size);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 62, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 62, 9} true;
    call $p1 := _ZN4uORB7Manager19orb_advertise_multiEPK12orb_metadataPKvPiij($p0, meta, data, instance, priority, queue_size);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 62, 2} true;
    $r := $p1;
    $exn := false;
    return;
}



const orb_unadvertise: int;

axiom orb_unadvertise == NULL - 7912;

procedure orb_unadvertise(handle: int) returns ({:scalar} $r: int);



implementation orb_unadvertise(handle: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "handle"} boogie_si_record_ref(handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 67, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 67, 9} true;
    call $i1 := _ZN4uORB7Manager15orb_unadvertiseEPv($p0, handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 67, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_publish_auto: int;

axiom orb_publish_auto == NULL - 7920;

procedure orb_publish_auto(meta: int, handle: int, data: int, instance: int, {:scalar} priority: int) returns ({:scalar} $r: int);



implementation orb_publish_auto(meta: int, handle: int, data: int, instance: int, priority: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;
  var $p6: int;
  var {:scalar} $i7: int;
  var {:scalar} $i5: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "handle"} boogie_si_record_ref(handle);
    call {:cexpr "data"} boogie_si_record_ref(data);
    call {:cexpr "instance"} boogie_si_record_ref(instance);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 73, 6} true;
    assert !aliasQ2215(handle, NULL);
    $p0 := $M.88[handle];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 73, 6} true;
    $i1 := (if $p0 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 73, 6} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i1 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 74, 13} true;
    call $p2 := orb_advertise_multi(meta, data, instance, priority);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 74, 3} true;
    assert !aliasQ2216(handle, NULL);
    $M.88 := $M.88[handle := $p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 76, 7} true;
    assert !aliasQ2217(handle, NULL);
    $p3 := $M.88[handle];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 76, 7} true;
    $i4 := (if $p3 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 76, 7} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb2:
    assume {:partition} !($i1 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 81, 28} true;
    assert !aliasQ2218(handle, NULL);
    $p6 := $M.88[handle];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 81, 10} true;
    call $i7 := orb_publish(meta, $p6, data);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 81, 3} true;
    $i5 := $i7;
    goto $bb5;

  $bb3:
    assume {:partition} $i4 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 77, 4} true;
    $i5 := NULL;
    goto $bb5;

  $bb4:
    assume {:partition} !($i4 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 84, 2} true;
    $i5 := NULL - 1;
    goto $bb5;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 85, 1} true;
    $r := $i5;
    $exn := false;
    return;
}



const orb_publish: int;

axiom orb_publish == NULL - 7928;

procedure orb_publish(meta: int, handle: int, data: int) returns ({:scalar} $r: int);



implementation orb_publish(meta: int, handle: int, data: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "handle"} boogie_si_record_ref(handle);
    call {:cexpr "data"} boogie_si_record_ref(data);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 89, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 89, 9} true;
    call $i1 := _ZN4uORB7Manager11orb_publishEPK12orb_metadataPvPKv($p0, meta, handle, data);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 89, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_subscribe: int;

axiom orb_subscribe == NULL - 7936;

procedure orb_subscribe(meta: int) returns ({:scalar} $r: int);



implementation orb_subscribe(meta: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 94, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 94, 9} true;
    call $i1 := _ZN4uORB7Manager13orb_subscribeEPK12orb_metadata($p0, meta);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 94, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_subscribe_multi: int;

axiom orb_subscribe_multi == NULL - 7944;

procedure orb_subscribe_multi(meta: int, {:scalar} instance: int) returns ({:scalar} $r: int);



implementation orb_subscribe_multi(meta: int, instance: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 99, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 99, 9} true;
    call $i1 := _ZN4uORB7Manager19orb_subscribe_multiEPK12orb_metadataj($p0, meta, instance);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 99, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_unsubscribe: int;

axiom orb_unsubscribe == NULL - 7952;

procedure orb_unsubscribe({:scalar} handle: int) returns ({:scalar} $r: int);



implementation orb_unsubscribe(handle: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 104, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 104, 9} true;
    call $i1 := _ZN4uORB7Manager15orb_unsubscribeEi($p0, handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 104, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_copy: int;

axiom orb_copy == NULL - 7960;

procedure orb_copy(meta: int, {:scalar} handle: int, buffer: int) returns ({:scalar} $r: int);



implementation orb_copy(meta: int, handle: int, buffer: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "buffer"} boogie_si_record_ref(buffer);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 109, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 109, 9} true;
    call $i1 := _ZN4uORB7Manager8orb_copyEPK12orb_metadataiPv($p0, meta, handle, buffer);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 109, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_check: int;

axiom orb_check == NULL - 7968;

procedure orb_check({:scalar} handle: int, updated: int) returns ({:scalar} $r: int);



implementation orb_check(handle: int, updated: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "updated"} boogie_si_record_ref(updated);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 114, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 114, 9} true;
    call $i1 := _ZN4uORB7Manager9orb_checkEiPb($p0, handle, updated);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 114, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_stat: int;

axiom orb_stat == NULL - 7976;

procedure orb_stat({:scalar} handle: int, time: int) returns ({:scalar} $r: int);



implementation orb_stat(handle: int, time: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "time"} boogie_si_record_ref(time);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 119, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 119, 9} true;
    call $i1 := _ZN4uORB7Manager8orb_statEiPm($p0, handle, time);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 119, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_exists: int;

axiom orb_exists == NULL - 7984;

procedure orb_exists(meta: int, {:scalar} instance: int) returns ({:scalar} $r: int);



implementation orb_exists(meta: int, instance: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 124, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 124, 9} true;
    call $i1 := _ZN4uORB7Manager10orb_existsEPK12orb_metadatai($p0, meta, instance);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 124, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_group_count: int;

axiom orb_group_count == NULL - 7992;

procedure orb_group_count(meta: int) returns ({:scalar} $r: int);



implementation orb_group_count(meta: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var $p1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "instance"} boogie_si_record_i32(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 131, 2} true;
    $i0 := NULL;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 131, 9} true;
    call $p1 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 131, 9} true;
    call $i2 := _ZN4uORB7Manager10orb_existsEPK12orb_metadatai($p1, meta, $i0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 131, 9} true;
    $i3 := (if $i2 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 131, 2} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 132, 3} true;
    $i4 := $i0 + 1;
    call {:cexpr "instance"} boogie_si_record_i32($i4);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 131, 2} true;
    $i0 := $i4;
    goto $bb1;

  $bb3:
    assume {:partition} !($i3 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 135, 2} true;
    $r := $i0;
    $exn := false;
    return;
}



const orb_priority: int;

axiom orb_priority == NULL - 8000;

procedure orb_priority({:scalar} handle: int, priority: int) returns ({:scalar} $r: int);



implementation orb_priority(handle: int, priority: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "priority"} boogie_si_record_ref(priority);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 140, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 140, 9} true;
    call $i1 := _ZN4uORB7Manager12orb_priorityEiPi($p0, handle, priority);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 140, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_set_interval: int;

axiom orb_set_interval == NULL - 8008;

procedure orb_set_interval({:scalar} handle: int, {:scalar} interval: int) returns ({:scalar} $r: int);



implementation orb_set_interval(handle: int, interval: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 145, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 145, 9} true;
    call $i1 := _ZN4uORB7Manager16orb_set_intervalEij($p0, handle, interval);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 145, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const orb_get_interval: int;

axiom orb_get_interval == NULL - 8016;

procedure orb_get_interval({:scalar} handle: int, interval: int) returns ({:scalar} $r: int);



implementation orb_get_interval(handle: int, interval: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "interval"} boogie_si_record_ref(interval);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 150, 9} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 150, 9} true;
    call $i1 := _ZN4uORB7Manager16orb_get_intervalEiPj($p0, handle, interval);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORB.cpp", 150, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const __cxa_atexit: int;

axiom __cxa_atexit == NULL - 8024;

procedure __cxa_atexit($p0: int, $p1: int, $p2: int) returns ($r: int);



const _ZN4uORB10DeviceNode10filp_to_sdEPN6device6file_tE: int;

axiom _ZN4uORB10DeviceNode10filp_to_sdEPN6device6file_tE == NULL - 8032;

procedure _ZN4uORB10DeviceNode10filp_to_sdEPN6device6file_tE(filp: int) returns ($r: int);



implementation _ZN4uORB10DeviceNode10filp_to_sdEPN6device6file_tE(filp: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:base "filp"} $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;

  $bb0:
    call {:cexpr "filp"} boogie_si_record_ref(filp);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 54, 6} true;
    $i0 := (if filp != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 54, 6} true;
    assume {:branchcond $i0} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i0 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 55, 45} true;
    $p1 := filp + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 55, 45} true;
    assert !aliasQ2219(filp, NULL);
    $p2 := $M.2[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 55, 8} true;
    $p3 := $p2;
    call {:cexpr "sd"} boogie_si_record_ref($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 57, 2} true;
    $p4 := $p2;
    goto $bb3;

  $bb2:
    assume {:partition} !($i0 == 1);
    call {:cexpr "sd"} boogie_si_record_ref(NULL);
    $p4 := NULL;
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 61, 2} true;
    $r := $p4;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNodeC2EPK12orb_metadataPKcS5_ij: int;

axiom _ZN4uORB10DeviceNodeC2EPK12orb_metadataPKcS5_ij == NULL - 8040;

procedure _ZN4uORB10DeviceNodeC2EPK12orb_metadataPKcS5_ij(this: int, meta: int, name: int, path: int, {:scalar} priority: int, {:scalar} queue_size: int);



implementation _ZN4uORB10DeviceNodeC2EPK12orb_metadataPKcS5_ij(this: int, meta: int, name: int, path: int, priority: int, queue_size: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "this"} $p2: int;
  var {:base "this"} $p3: int;
  var {:base "this"} $p4: int;
  var {:base "this"} $p5: int;
  var {:base "this"} $p6: int;
  var {:base "this"} $p7: int;
  var {:base "this"} $p8: int;
  var {:base "this"} $p9: int;
  var {:base "this"} $p10: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "name"} boogie_si_record_ref(name);
    call {:cexpr "path"} boogie_si_record_ref(path);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "queue_size"} boogie_si_record_i32(queue_size);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 76, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 76, 1} true;
    call _ZN6device4VDevC2EPKcS2_($p0, name, path);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 76, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 76, 1} true;
    assert !aliasQ2220($p1, NULL);
    $M.2 := $M.2[$p1 := _ZTVN4uORB10DeviceNodeE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 67, 2} true;
    $p2 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 67, 2} true;
    assert !aliasQ2221(this, NULL);
    $M.2 := $M.2[$p2 := meta];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 68, 2} true;
    $p3 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 68, 2} true;
    assert !aliasQ2222(this, NULL);
    $M.2 := $M.2[$p3 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 69, 2} true;
    $p4 := this + 168;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 69, 2} true;
    assert !aliasQ2223(this, NULL);
    $M.2 := $M.2[$p4 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 70, 2} true;
    $p5 := this + 176;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 70, 2} true;
    assert !aliasQ2224(this, NULL);
    $M.2 := $M.2[$p5 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 71, 2} true;
    $p6 := this + 184;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 71, 2} true;
    assert !aliasQ2225(this, NULL);
    $M.2 := $M.2[$p6 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 72, 2} true;
    $p7 := this + 192;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 72, 2} true;
    assert !aliasQ2226(this, NULL);
    $M.2 := $M.2[$p7 := priority];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 73, 2} true;
    $p8 := this + 196;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 73, 2} true;
    assert !aliasQ2227(this, NULL);
    $M.2 := $M.2[$p8 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 74, 2} true;
    $p9 := this + 200;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 74, 2} true;
    assert !aliasQ2228(this, NULL);
    $M.2 := $M.2[$p9 := queue_size];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 75, 2} true;
    $p10 := this + 204;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 75, 2} true;
    assert !aliasQ2229(this, NULL);
    $M.2 := $M.2[$p10 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 79, 1} true;
    $exn := false;
    return;
}



const _ZN6device4VDevC2EPKcS2_: int;

axiom _ZN6device4VDevC2EPKcS2_ == NULL - 8048;

procedure _ZN6device4VDevC2EPKcS2_($p0: int, $p1: int, $p2: int);



const _ZN4uORB10DeviceNodeD2Ev: int;

axiom _ZN4uORB10DeviceNodeD2Ev == NULL - 8056;

procedure _ZN4uORB10DeviceNodeD2Ev(this: int);



implementation _ZN4uORB10DeviceNodeD2Ev(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:scalar} $i3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 82, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 82, 1} true;
    assert !aliasQ2230($p0, NULL);
    $M.2 := $M.2[$p0 := _ZTVN4uORB10DeviceNodeE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 83, 6} true;
    $p1 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 83, 6} true;
    assert !aliasQ2231(this, NULL);
    $p2 := $M.2[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 83, 6} true;
    $i3 := (if $p2 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 83, 6} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 84, 12} true;
    $p4 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 84, 12} true;
    assert !aliasQ2232(this, NULL);
    $p5 := $M.2[$p4];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 84, 3} true;
    $i6 := (if $p5 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 84, 3} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 83, 6} true;
    assume {:partition} !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 87, 1} true;
    $p7 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 87, 1} true;
    call _ZN6device4VDevD2Ev($p7);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 87, 1} true;
    $exn := false;
    return;

  $bb4:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 84, 3} true;
    assume {:partition} $i6 == 1;
    goto $bb3;

  $bb5:
    assume {:partition} !($i6 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 84, 3} true;
    call _ZdaPv($p5);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 84, 3} true;
    goto $bb3;
}



const _ZdaPv: int;

axiom _ZdaPv == NULL - 8064;

procedure _ZdaPv($p0: int);



const _ZN6device4VDevD2Ev: int;

axiom _ZN6device4VDevD2Ev == NULL - 8072;

procedure _ZN6device4VDevD2Ev($p0: int);



const _ZN4uORB10DeviceNodeD0Ev: int;

axiom _ZN4uORB10DeviceNodeD0Ev == NULL - 8080;

procedure _ZN4uORB10DeviceNodeD0Ev(this: int);



implementation _ZN4uORB10DeviceNodeD0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 82, 1} true;
    call _ZN4uORB10DeviceNodeD2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 82, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 82, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 87, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNode4openEPN6device6file_tE: int;

axiom _ZN4uORB10DeviceNode4openEPN6device6file_tE == NULL - 8088;

procedure _ZN4uORB10DeviceNode4openEPN6device6file_tE(this: int, filp: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode4openEPN6device6file_tE(this: int, filp: int) returns ($r: int)
{
  var {:base "filp"} $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var $p3: int;
  var {:base "this"} $p4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;
  var {:scalar} $i7: int;
  var {:base "this"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var {:scalar} $i11: int;
  var $p13: int;
  var {:scalar} $i14: int;
  var {:scalar} $i15: int;
  var {:base "this"} $p16: int;
  var {:scalar} $i12: int;
  var {:base "filp"} $p18: int;
  var {:scalar} $i19: int;
  var {:scalar} $i20: int;
  var $p21: int;
  var $p22: int;
  var {:scalar} $i23: int;
  var $p24: int;
  var {:base "this"} $p25: int;
  var {:scalar} $i26: int;
  var {:base "$p22"} $p27: int;
  var {:base "this"} $p28: int;
  var {:scalar} $i29: int;
  var {:scalar} $i30: int;
  var $p31: int;
  var {:base "filp"} $p32: int;
  var $p33: int;
  var {:scalar} $i34: int;
  var {:scalar} $i35: int;
  var {:scalar} $i36: int;
  var $p37: int;
  var {:scalar} $i17: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "filp"} boogie_si_record_ref(filp);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 95, 6} true;
    $p0 := filp + 4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 95, 6} true;
    assert !aliasQ2233(filp, NULL);
    $i1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 95, 6} true;
    $i2 := (if $i1 == 1 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 95, 6} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i2 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 98, 3} true;
    $p3 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 98, 3} true;
    call _ZN6device6Device4lockEv($p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 100, 7} true;
    $p4 := this + 184;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 100, 7} true;
    assert !aliasQ2234(this, NULL);
    $i5 := $M.2[$p4];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 100, 7} true;
    $i6 := (if $i5 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 100, 7} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb2:
    assume {:partition} !($i2 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 124, 6} true;
    $p18 := filp + 4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 124, 6} true;
    assert !aliasQ2235(filp, NULL);
    $i19 := $M.2[$p18];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 124, 6} true;
    $i20 := (if $i19 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 124, 6} true;
    assume {:branchcond $i20} true;
    goto $bb12, $bb13;

  $bb3:
    assume {:partition} $i6 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 101, 17} true;
    call $i7 := px4_getpid();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 101, 4} true;
    $p8 := this + 184;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 101, 4} true;
    assert !aliasQ2236(this, NULL);
    $M.2 := $M.2[$p8 := $i7];
    call {:cexpr "ret"} boogie_si_record_i32(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 104, 3} true;
    $i9 := NULL;
    goto $bb5;

  $bb4:
    assume {:partition} !($i6 == 1);
    call {:cexpr "ret"} boogie_si_record_i32(NULL - 16);
    $i9 := NULL - 16;
    goto $bb5;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 108, 3} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 108, 3} true;
    call _ZN6device6Device6unlockEv($p10);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 111, 7} true;
    $i11 := (if $i9 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 111, 7} true;
    $i12 := $i9;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb6:
    assume {:partition} $i11 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 112, 16} true;
    $p13 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 112, 16} true;
    call $i14 := _ZN6device4VDev4openEPNS_6file_tE($p13, filp);
    call {:cexpr "ret"} boogie_si_record_i32($i14);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 115, 8} true;
    $i15 := (if $i14 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 115, 8} true;
    $i12 := $i14;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb7:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 111, 7} true;
    assume {:partition} !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 120, 3} true;
    $i17 := $i12;
    goto $bb11;

  $bb9:
    assume {:partition} $i15 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 116, 5} true;
    $p16 := this + 184;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 116, 5} true;
    assert !aliasQ2237(this, NULL);
    $M.2 := $M.2[$p16 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 117, 4} true;
    $i12 := $i14;
    goto $bb8;

  $bb10:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 115, 8} true;
    assume {:partition} !($i15 == 1);
    goto $bb8;

  $bb11:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 158, 1} true;
    $r := $i17;
    $exn := false;
    return;

  $bb12:
    assume {:partition} $i20 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 127, 24} true;
    call $p21 := _Znwm(16);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 127, 24} true;
    $p22 := $p21;
    call {:cexpr "sd"} boogie_si_record_ref($p21);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 129, 7} true;
    $i23 := (if NULL == $p22 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 129, 7} true;
    assume {:branchcond $i23} true;
    goto $bb14, $bb15;

  $bb13:
    assume {:partition} !($i20 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 157, 2} true;
    $i17 := NULL - 22;
    goto $bb11;

  $bb14:
    assume {:partition} $i23 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 130, 4} true;
    $i17 := NULL - 12;
    goto $bb11;

  $bb15:
    assume {:partition} !($i23 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 133, 3} true;
    $p24 := $p22;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 133, 3} true;
    assert !aliasQ2238($p24, NULL);
    $M.2[$p24] := NULL;
    assert !aliasQ2239($p24 + 4, NULL);
    $M.2[$p24 + 4] := NULL;
    assert !aliasQ2240($p24 + 8, NULL);
    $M.2[$p24 + 8] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 136, 20} true;
    $p25 := this + 176;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 136, 20} true;
    assert !aliasQ2241(this, NULL);
    $i26 := $M.2[$p25];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 136, 3} true;
    $p27 := $p22;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 136, 3} true;
    assert !aliasQ2242($p22, NULL);
    $M.2 := $M.2[$p27 := $i26];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 139, 20} true;
    $p28 := this + 192;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 139, 20} true;
    assert !aliasQ2243(this, NULL);
    $i29 := $M.2[$p28];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 139, 20} true;
    $i30 := $i29;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 139, 3} true;
    call _ZN4uORB10DeviceNode14SubscriberData12set_priorityEh($p22, $i30);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 141, 24} true;
    $p31 := $p22;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 141, 3} true;
    $p32 := filp + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 141, 3} true;
    assert !aliasQ2244(filp, NULL);
    $M.2 := $M.2[$p32 := $p21];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 143, 15} true;
    $p33 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 143, 15} true;
    call $i34 := _ZN6device4VDev4openEPNS_6file_tE($p33, filp);
    call {:cexpr "ret"} boogie_si_record_i32($i34);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 145, 3} true;
    call _ZN4uORB10DeviceNode23add_internal_subscriberEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 147, 7} true;
    $i35 := (if $i34 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 147, 7} true;
    assume {:branchcond $i35} true;
    goto $bb16, $bb17;

  $bb16:
    assume {:partition} $i35 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 148, 4} true;
    call px4_log_modulename.i32.ref.ref(2, .str271421, .str1281422);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 149, 4} true;
    $i36 := (if $p22 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 149, 4} true;
    assume {:branchcond $i36} true;
    goto $bb19, $bb20;

  $bb17:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 147, 7} true;
    assume {:partition} !($i35 == 1);
    goto $bb18;

  $bb18:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 153, 3} true;
    $i17 := $i34;
    goto $bb11;

  $bb19:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 149, 4} true;
    assume {:partition} $i36 == 1;
    goto $bb18;

  $bb20:
    assume {:partition} !($i36 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 149, 4} true;
    call _ZN4uORB10DeviceNode14SubscriberDataD2Ev($p22);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 149, 4} true;
    $p37 := $p22;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 149, 4} true;
    call _ZdlPv($p37);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 149, 4} true;
    goto $bb18;
}



const px4_getpid: int;

axiom px4_getpid == NULL - 8096;

procedure px4_getpid() returns ($r: int);



const _ZN6device4VDev4openEPNS_6file_tE: int;

axiom _ZN6device4VDev4openEPNS_6file_tE == NULL - 8104;

procedure _ZN6device4VDev4openEPNS_6file_tE($p0: int, $p1: int) returns ($r: int);



const _Znwm: int;

axiom _Znwm == NULL - 8112;

procedure _Znwm({:scalar} $i0: int) returns ($r: int);



const _ZN4uORB10DeviceNode23add_internal_subscriberEv: int;

axiom _ZN4uORB10DeviceNode23add_internal_subscriberEv == NULL - 8120;

procedure _ZN4uORB10DeviceNode23add_internal_subscriberEv(this: int);



implementation _ZN4uORB10DeviceNode23add_internal_subscriberEv(this: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var $p3: int;
  var $p4: int;
  var {:scalar} $i5: int;
  var {:base "this"} $p6: int;
  var {:scalar} $i7: int;
  var {:scalar} $i8: int;
  var $p9: int;
  var $p10: int;
  var {:base "$p10"} $p11: int;
  var $p12: int;
  var {:base "this"} $p13: int;
  var $p14: int;
  var {:base "$p14"} $p15: int;
  var $p16: int;
  var {:scalar} $i17: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 562, 2} true;
    $p0 := this + 204;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 562, 2} true;
    assert !aliasQ2245(this, NULL);
    $i1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 562, 2} true;
    $i2 := $i1 + 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 562, 2} true;
    assert !aliasQ2246(this, NULL);
    $M.2 := $M.2[$p0 := $i2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 563, 35} true;
    call $p3 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 563, 35} true;
    call $p4 := _ZN4uORB7Manager21get_uorb_communicatorEv($p3);
    call {:cexpr "ch"} boogie_si_record_ref($p4);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 565, 6} true;
    $i5 := (if $p4 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 565, 6} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i5 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 565, 23} true;
    $p6 := this + 204;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 565, 23} true;
    assert !aliasQ2247(this, NULL);
    $i7 := $M.2[$p6];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 565, 23} true;
    $i8 := (if $i7 > NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 565, 6} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 565, 6} true;
    assume {:partition} !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 568, 1} true;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i8 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 566, 3} true;
    $p9 := $p4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 566, 3} true;
    assert !aliasQ2248($p9, NULL);
    $p10 := $M.2[$p9];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 566, 3} true;
    $p11 := $p10;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 566, 3} true;
    assert !aliasQ2249($p10, NULL);
    $p12 := $M.2[$p11];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 566, 24} true;
    $p13 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 566, 24} true;
    assert !aliasQ2250(this, NULL);
    $p14 := $M.2[$p13];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 566, 24} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 566, 24} true;
    assert !aliasQ2251($p14, NULL);
    $p16 := $M.2[$p15];
    call $i17 := devirtbounce($p12, $p4, $p16, 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 567, 2} true;
    goto $bb3;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 565, 6} true;
    assume {:partition} !($i8 == 1);
    goto $bb3;
}



const _ZN4uORB10DeviceNode5closeEPN6device6file_tE: int;

axiom _ZN4uORB10DeviceNode5closeEPN6device6file_tE == NULL - 8128;

procedure _ZN4uORB10DeviceNode5closeEPN6device6file_tE(this: int, filp: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode5closeEPN6device6file_tE(this: int, filp: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:base "this"} $p1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var {:scalar} $i6: int;
  var {:base "$p5"} $p7: int;
  var $p8: int;
  var {:scalar} $i9: int;
  var {:base "$p5"} $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var {:scalar} $i13: int;
  var $p14: int;
  var $p15: int;
  var {:scalar} $i16: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "filp"} boogie_si_record_ref(filp);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 165, 6} true;
    call $i0 := px4_getpid();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 165, 22} true;
    $p1 := this + 184;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 165, 22} true;
    assert !aliasQ2252(this, NULL);
    $i2 := $M.2[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 165, 6} true;
    $i3 := (if $i0 == $i2 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 165, 6} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 166, 3} true;
    $p4 := this + 184;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 166, 3} true;
    assert !aliasQ2253(this, NULL);
    $M.2 := $M.2[$p4 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 168, 2} true;
    goto $bb3;

  $bb2:
    assume {:partition} !($i3 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 169, 24} true;
    call $p5 := _ZN4uORB10DeviceNode10filp_to_sdEPN6device6file_tE(filp);
    call {:cexpr "sd"} boogie_si_record_ref($p5);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 171, 7} true;
    $i6 := (if $p5 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 171, 7} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 182, 15} true;
    $p15 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 182, 15} true;
    call $i16 := _ZN6device4VDev5closeEPNS_6file_tE($p15, filp);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 182, 2} true;
    $r := $i16;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i6 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 172, 8} true;
    $p7 := $p5 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 172, 8} true;
    assert !aliasQ2254($p5, NULL);
    $p8 := $M.2[$p7];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 172, 8} true;
    $i9 := (if $p8 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 172, 8} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 171, 7} true;
    assume {:partition} !($i6 == 1);
    goto $bb3;

  $bb6:
    assume {:partition} $i9 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 173, 17} true;
    $p10 := $p5 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 173, 17} true;
    assert !aliasQ2255($p5, NULL);
    $p11 := $M.2[$p10];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 173, 16} true;
    $p12 := $p11 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 173, 5} true;
    call hrt_cancel($p12);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 174, 4} true;
    goto $bb8;

  $bb7:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 172, 8} true;
    assume {:partition} !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 176, 4} true;
    call _ZN4uORB10DeviceNode26remove_internal_subscriberEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 177, 4} true;
    $i13 := (if $p5 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 177, 4} true;
    assume {:branchcond $i13} true;
    goto $bb9, $bb11;

  $bb9:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 177, 4} true;
    assume {:partition} $i13 == 1;
    goto $bb10;

  $bb10:
    call {:cexpr "sd"} boogie_si_record_ref(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 179, 3} true;
    goto $bb3;

  $bb11:
    assume {:partition} !($i13 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 177, 4} true;
    call _ZN4uORB10DeviceNode14SubscriberDataD2Ev($p5);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 177, 4} true;
    $p14 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 177, 4} true;
    call _ZdlPv($p14);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 177, 4} true;
    goto $bb10;
}



const hrt_cancel: int;

axiom hrt_cancel == NULL - 8136;

procedure hrt_cancel($p0: int);



const _ZN4uORB10DeviceNode26remove_internal_subscriberEv: int;

axiom _ZN4uORB10DeviceNode26remove_internal_subscriberEv == NULL - 8144;

procedure _ZN4uORB10DeviceNode26remove_internal_subscriberEv(this: int);



implementation _ZN4uORB10DeviceNode26remove_internal_subscriberEv(this: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var $p3: int;
  var $p4: int;
  var {:scalar} $i5: int;
  var {:base "this"} $p6: int;
  var {:scalar} $i7: int;
  var {:scalar} $i8: int;
  var $p9: int;
  var $p10: int;
  var {:base "$p10"} $p11: int;
  var $p12: int;
  var {:base "this"} $p13: int;
  var $p14: int;
  var {:base "$p14"} $p15: int;
  var $p16: int;
  var {:scalar} $i17: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 574, 2} true;
    $p0 := this + 204;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 574, 2} true;
    assert !aliasQ2256(this, NULL);
    $i1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 574, 2} true;
    $i2 := $i1 + NULL - 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 574, 2} true;
    assert !aliasQ2257(this, NULL);
    $M.2 := $M.2[$p0 := $i2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 575, 35} true;
    call $p3 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 575, 35} true;
    call $p4 := _ZN4uORB7Manager21get_uorb_communicatorEv($p3);
    call {:cexpr "ch"} boogie_si_record_ref($p4);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 577, 6} true;
    $i5 := (if $p4 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 577, 6} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i5 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 577, 23} true;
    $p6 := this + 204;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 577, 23} true;
    assert !aliasQ2258(this, NULL);
    $i7 := $M.2[$p6];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 577, 23} true;
    $i8 := (if $i7 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 577, 6} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 577, 6} true;
    assume {:partition} !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 580, 1} true;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i8 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 578, 3} true;
    $p9 := $p4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 578, 3} true;
    assert !aliasQ2259($p9, NULL);
    $p10 := $M.2[$p9];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 578, 3} true;
    $p11 := $p10 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 578, 3} true;
    assert !aliasQ2260($p10, NULL);
    $p12 := $M.2[$p11];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 578, 27} true;
    $p13 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 578, 27} true;
    assert !aliasQ2261(this, NULL);
    $p14 := $M.2[$p13];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 578, 27} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 578, 27} true;
    assert !aliasQ2262($p14, NULL);
    $p16 := $M.2[$p15];
    call $i17 := devirtbounce7($p12, $p4, $p16);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 579, 2} true;
    goto $bb3;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 577, 6} true;
    assume {:partition} !($i8 == 1);
    goto $bb3;
}



const _ZN6device4VDev5closeEPNS_6file_tE: int;

axiom _ZN6device4VDev5closeEPNS_6file_tE == NULL - 8152;

procedure _ZN6device4VDev5closeEPNS_6file_tE($p0: int, $p1: int) returns ($r: int);



const _ZN4uORB10DeviceNode4readEPN6device6file_tEPcm: int;

axiom _ZN4uORB10DeviceNode4readEPN6device6file_tEPcm == NULL - 8160;

procedure _ZN4uORB10DeviceNode4readEPN6device6file_tEPcm(this: int, filp: int, buffer: int, {:scalar} buflen: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode4readEPN6device6file_tEPcm(this: int, filp: int, buffer: int, buflen: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:scalar} $i3: int;
  var {:base "this"} $p5: int;
  var $p6: int;
  var {:base "$p6"} $p7: int;
  var {:scalar} $i8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var {:base "this"} $p11: int;
  var {:scalar} $i12: int;
  var {:base "$p0"} $p13: int;
  var {:scalar} $i14: int;
  var {:base "this"} $p15: int;
  var {:scalar} $i16: int;
  var {:scalar} $i17: int;
  var {:scalar} $i18: int;
  var {:base "this"} $p19: int;
  var {:scalar} $i20: int;
  var {:base "this"} $p21: int;
  var {:scalar} $i22: int;
  var {:scalar} $i23: int;
  var {:base "$p0"} $p24: int;
  var {:base "this"} $p25: int;
  var {:scalar} $i26: int;
  var {:base "$p0"} $p27: int;
  var {:scalar} $i28: int;
  var {:scalar} $i29: int;
  var {:base "$p0"} $p30: int;
  var {:scalar} $i31: int;
  var {:scalar} $i32: int;
  var {:base "$p0"} $p33: int;
  var {:scalar} $i34: int;
  var {:scalar} $i35: int;
  var {:scalar} $i36: int;
  var {:base "this"} $p37: int;
  var $p38: int;
  var {:base "this"} $p39: int;
  var $p40: int;
  var {:base "$p40"} $p41: int;
  var {:scalar} $i42: int;
  var {:base "$p0"} $p43: int;
  var {:scalar} $i44: int;
  var {:base "this"} $p45: int;
  var {:scalar} $i46: int;
  var {:scalar} $i47: int;
  var {:scalar} $i48: int;
  var {:scalar} $i49: int;
  var {:base "$p38"} $p50: int;
  var {:base "this"} $p51: int;
  var $p52: int;
  var {:base "$p52"} $p53: int;
  var {:scalar} $i54: int;
  var {:base "$p0"} $p55: int;
  var {:scalar} $i56: int;
  var {:base "this"} $p57: int;
  var {:scalar} $i58: int;
  var {:scalar} $i59: int;
  var {:base "$p0"} $p60: int;
  var {:scalar} $i61: int;
  var {:scalar} $i62: int;
  var {:base "this"} $p63: int;
  var {:scalar} $i64: int;
  var {:scalar} $i65: int;
  var $p66: int;
  var {:base "this"} $p67: int;
  var $p68: int;
  var {:base "$p68"} $p69: int;
  var {:scalar} $i70: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "filp"} boogie_si_record_ref(filp);
    call {:cexpr "buffer"} boogie_si_record_ref(buffer);
    call {:cexpr "buflen"} boogie_si_record_i64(buflen);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 189, 41} true;
    call $p0 := _ZN4uORB10DeviceNode10filp_to_sdEPN6device6file_tE(filp);
    call {:cexpr "sd"} boogie_si_record_ref($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 192, 6} true;
    $p1 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 192, 6} true;
    assert !aliasQ2263(this, NULL);
    $p2 := $M.2[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 192, 6} true;
    $i3 := (if $p2 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 192, 6} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 193, 3} true;
    $i4 := NULL;
    goto $bb3;

  $bb2:
    assume {:partition} !($i3 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 197, 16} true;
    $p5 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 197, 16} true;
    assert !aliasQ2264(this, NULL);
    $p6 := $M.2[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 197, 16} true;
    $p7 := $p6 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 197, 16} true;
    assert !aliasQ2265($p6, NULL);
    $i8 := $M.2[$p7];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 197, 6} true;
    $i9 := (if buflen != $i8 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 197, 6} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 239, 1} true;
    $r := $i4;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i9 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 198, 3} true;
    $i4 := NULL - 5;
    goto $bb3;

  $bb5:
    assume {:partition} !($i9 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 204, 2} true;
    $p10 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 204, 2} true;
    call _ZN6device6Device4lockEv($p10);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 206, 6} true;
    $p11 := this + 176;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 206, 6} true;
    assert !aliasQ2266(this, NULL);
    $i12 := $M.2[$p11];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 206, 20} true;
    $p13 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 206, 20} true;
    assert !aliasQ2267($p0, NULL);
    $i14 := $M.2[$p13];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 206, 37} true;
    $p15 := this + 200;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 206, 37} true;
    assert !aliasQ2268(this, NULL);
    $i16 := $M.2[$p15];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 206, 20} true;
    $i17 := $i14 + $i16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 206, 6} true;
    $i18 := (if $i12 > $i17 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 206, 6} true;
    assume {:branchcond $i18} true;
    goto $bb6, $bb7;

  $bb6:
    assume {:partition} $i18 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 208, 20} true;
    $p19 := this + 176;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 208, 20} true;
    assert !aliasQ2269(this, NULL);
    $i20 := $M.2[$p19];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 208, 34} true;
    $p21 := this + 200;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 208, 34} true;
    assert !aliasQ2270(this, NULL);
    $i22 := $M.2[$p21];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 208, 20} true;
    $i23 := $i20 - $i22;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 208, 3} true;
    $p24 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 208, 3} true;
    assert !aliasQ2271($p0, NULL);
    $M.2 := $M.2[$p24 := $i23];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 209, 2} true;
    goto $bb8;

  $bb7:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 206, 6} true;
    assume {:partition} !($i18 == 1);
    goto $bb8;

  $bb8:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 6} true;
    $p25 := this + 176;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 6} true;
    assert !aliasQ2272(this, NULL);
    $i26 := $M.2[$p25];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 21} true;
    $p27 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 21} true;
    assert !aliasQ2273($p0, NULL);
    $i28 := $M.2[$p27];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 6} true;
    $i29 := (if $i26 == $i28 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 6} true;
    assume {:branchcond $i29} true;
    goto $bb9, $bb10;

  $bb9:
    assume {:partition} $i29 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 39} true;
    $p30 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 39} true;
    assert !aliasQ2274($p0, NULL);
    $i31 := $M.2[$p30];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 39} true;
    $i32 := (if $i31 > NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 6} true;
    assume {:branchcond $i32} true;
    goto $bb12, $bb13;

  $bb10:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 6} true;
    assume {:partition} !($i29 == 1);
    goto $bb11;

  $bb11:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 219, 6} true;
    $i36 := (if NULL != buffer then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 219, 6} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb12:
    assume {:partition} $i32 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 215, 3} true;
    $p33 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 215, 3} true;
    assert !aliasQ2275($p0, NULL);
    $i34 := $M.2[$p33];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 215, 3} true;
    $i35 := $i34 + NULL - 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 215, 3} true;
    assert !aliasQ2276($p0, NULL);
    $M.2 := $M.2[$p33 := $i35];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 216, 2} true;
    goto $bb11;

  $bb13:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 211, 6} true;
    assume {:partition} !($i32 == 1);
    goto $bb11;

  $bb14:
    assume {:partition} $i36 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 18} true;
    $p37 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 18} true;
    assert !aliasQ2277(this, NULL);
    $p38 := $M.2[$p37];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 27} true;
    $p39 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 27} true;
    assert !aliasQ2278(this, NULL);
    $p40 := $M.2[$p39];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 27} true;
    $p41 := $p40 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 27} true;
    assert !aliasQ2279($p40, NULL);
    $i42 := $M.2[$p41];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 44} true;
    $p43 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 44} true;
    assert !aliasQ2280($p0, NULL);
    $i44 := $M.2[$p43];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 61} true;
    $p45 := this + 200;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 61} true;
    assert !aliasQ2281(this, NULL);
    $i46 := $M.2[$p45];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 44} true;
    $i47 := $urem.i32($i44, $i46);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 43} true;
    $i48 := $i47;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 27} true;
    $i49 := $i42 * $i48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 18} true;
    $p50 := $p38 + $i49 * 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 76} true;
    $p51 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 76} true;
    assert !aliasQ2282(this, NULL);
    $p52 := $M.2[$p51];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 76} true;
    $p53 := $p52 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 76} true;
    assert !aliasQ2283($p52, NULL);
    $i54 := $M.2[$p53];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 220, 3} true;
    call $M.2 := $memcpy.i8($M.2, $M.2, buffer, $p50, $i54, 1, NULL == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 221, 2} true;
    goto $bb16;

  $bb15:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 219, 6} true;
    assume {:partition} !($i36 == 1);
    goto $bb16;

  $bb16:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 223, 6} true;
    $p55 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 223, 6} true;
    assert !aliasQ2284($p0, NULL);
    $i56 := $M.2[$p55];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 223, 23} true;
    $p57 := this + 176;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 223, 23} true;
    assert !aliasQ2285(this, NULL);
    $i58 := $M.2[$p57];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 223, 6} true;
    $i59 := (if $i56 < $i58 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 223, 6} true;
    assume {:branchcond $i59} true;
    goto $bb17, $bb18;

  $bb17:
    assume {:partition} $i59 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 224, 3} true;
    $p60 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 224, 3} true;
    assert !aliasQ2286($p0, NULL);
    $i61 := $M.2[$p60];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 224, 3} true;
    $i62 := $i61 + 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 224, 3} true;
    assert !aliasQ2287($p0, NULL);
    $M.2 := $M.2[$p60 := $i62];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 225, 2} true;
    goto $bb19;

  $bb18:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 223, 6} true;
    assume {:partition} !($i59 == 1);
    goto $bb19;

  $bb19:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 228, 19} true;
    $p63 := this + 192;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 228, 19} true;
    assert !aliasQ2288(this, NULL);
    $i64 := $M.2[$p63];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 228, 19} true;
    $i65 := $i64;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 228, 2} true;
    call _ZN4uORB10DeviceNode14SubscriberData12set_priorityEh($p0, $i65);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 234, 2} true;
    call _ZN4uORB10DeviceNode14SubscriberData19set_update_reportedEb($p0, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 236, 2} true;
    $p66 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 236, 2} true;
    call _ZN6device6Device6unlockEv($p66);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 238, 9} true;
    $p67 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 238, 9} true;
    assert !aliasQ2289(this, NULL);
    $p68 := $M.2[$p67];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 238, 9} true;
    $p69 := $p68 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 238, 9} true;
    assert !aliasQ2290($p68, NULL);
    $i70 := $M.2[$p69];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 238, 2} true;
    $i4 := $i70;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: int;

axiom llvm.memcpy.p0i8.p0i8.i64 == NULL - 8168;

procedure llvm.memcpy.p0i8.p0i8.i64($p0: int, $p1: int, {:scalar} $i2: int, {:scalar} $i3: int, {:scalar} $i4: int);



const _ZN4uORB10DeviceNode5writeEPN6device6file_tEPKcm: int;

axiom _ZN4uORB10DeviceNode5writeEPN6device6file_tEPKcm == NULL - 8176;

procedure _ZN4uORB10DeviceNode5writeEPN6device6file_tEPKcm(this: int, filp: int, buffer: int, {:scalar} buflen: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode5writeEPN6device6file_tEPKcm(this: int, filp: int, buffer: int, buflen: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:scalar} $i2: int;
  var $p3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var {:scalar} $i6: int;
  var {:base "this"} $p7: int;
  var $p8: int;
  var {:base "$p8"} $p9: int;
  var {:scalar} $i10: int;
  var {:base "this"} $p11: int;
  var {:scalar} $i12: int;
  var {:scalar} $i13: int;
  var {:scalar} $i14: int;
  var $p15: int;
  var {:base "this"} $p16: int;
  var $p17: int;
  var {:base "this"} $p18: int;
  var $p19: int;
  var {:scalar} $i20: int;
  var {:base "this"} $p22: int;
  var $p23: int;
  var {:base "$p23"} $p24: int;
  var {:scalar} $i25: int;
  var {:scalar} $i26: int;
  var $p27: int;
  var {:base "this"} $p28: int;
  var $p29: int;
  var {:base "this"} $p30: int;
  var $p31: int;
  var {:base "$p31"} $p32: int;
  var {:scalar} $i33: int;
  var {:base "this"} $p34: int;
  var {:scalar} $i35: int;
  var {:base "this"} $p36: int;
  var {:scalar} $i37: int;
  var {:scalar} $i38: int;
  var {:scalar} $i39: int;
  var {:scalar} $i40: int;
  var {:base "$p29"} $p41: int;
  var {:base "this"} $p42: int;
  var $p43: int;
  var {:base "$p43"} $p44: int;
  var {:scalar} $i45: int;
  var {:scalar} $i46: int;
  var {:base "this"} $p47: int;
  var {:base "this"} $p48: int;
  var {:scalar} $i49: int;
  var {:scalar} $i50: int;
  var {:base "this"} $p51: int;
  var $p52: int;
  var $p53: int;
  var $p54: int;
  var $p55: int;
  var {:base "$p55"} $p56: int;
  var $p57: int;
  var {:base "this"} $p58: int;
  var $p59: int;
  var {:base "$p59"} $p60: int;
  var {:scalar} $i61: int;
  var {:scalar} $i21: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "filp"} boogie_si_record_ref(filp);
    call {:cexpr "buffer"} boogie_si_record_ref(buffer);
    call {:cexpr "buflen"} boogie_si_record_i64(buflen);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 254, 17} true;
    $p0 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 254, 17} true;
    assert !aliasQ2291(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 254, 6} true;
    $i2 := (if NULL == $p1 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 254, 6} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i2 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 255, 3} true;
    $p3 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 255, 3} true;
    call _ZN6device6Device4lockEv($p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 258, 18} true;
    $p4 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 258, 18} true;
    assert !aliasQ2292(this, NULL);
    $p5 := $M.2[$p4];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 258, 7} true;
    $i6 := (if NULL == $p5 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 258, 7} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 254, 6} true;
    assume {:partition} !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 271, 6} true;
    $p22 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 271, 6} true;
    assert !aliasQ2293(this, NULL);
    $p23 := $M.2[$p22];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 271, 6} true;
    $p24 := $p23 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 271, 6} true;
    assert !aliasQ2294($p23, NULL);
    $i25 := $M.2[$p24];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 271, 6} true;
    $i26 := (if $i25 != buflen then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 271, 6} true;
    assume {:branchcond $i26} true;
    goto $bb10, $bb11;

  $bb4:
    assume {:partition} $i6 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 24} true;
    $p7 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 24} true;
    assert !aliasQ2295(this, NULL);
    $p8 := $M.2[$p7];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 24} true;
    $p9 := $p8 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 24} true;
    assert !aliasQ2296($p8, NULL);
    $i10 := $M.2[$p9];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 40} true;
    $p11 := this + 200;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 40} true;
    assert !aliasQ2297(this, NULL);
    $i12 := $M.2[$p11];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 40} true;
    $i13 := $i12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 24} true;
    $i14 := $i10 * $i13;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 12} true;
    call $p15 := _Znam($i14);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 4} true;
    $p16 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 259, 4} true;
    assert !aliasQ2298(this, NULL);
    $M.2 := $M.2[$p16 := $p15];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 260, 3} true;
    goto $bb6;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 258, 7} true;
    assume {:partition} !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 262, 3} true;
    $p17 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 262, 3} true;
    call _ZN6device6Device6unlockEv($p17);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 265, 18} true;
    $p18 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 265, 18} true;
    assert !aliasQ2299(this, NULL);
    $p19 := $M.2[$p18];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 265, 7} true;
    $i20 := (if NULL == $p19 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 265, 7} true;
    assume {:branchcond $i20} true;
    goto $bb7, $bb8;

  $bb7:
    assume {:partition} $i20 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 266, 4} true;
    $i21 := NULL - 12;
    goto $bb9;

  $bb8:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 265, 7} true;
    assume {:partition} !($i20 == 1);
    goto $bb3;

  $bb9:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 291, 1} true;
    $r := $i21;
    $exn := false;
    return;

  $bb10:
    assume {:partition} $i26 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 272, 3} true;
    $i21 := NULL - 5;
    goto $bb9;

  $bb11:
    assume {:partition} !($i26 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 275, 2} true;
    $p27 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 275, 2} true;
    call _ZN6device6Device4lockEv($p27);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 9} true;
    $p28 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 9} true;
    assert !aliasQ2300(this, NULL);
    $p29 := $M.2[$p28];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 18} true;
    $p30 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 18} true;
    assert !aliasQ2301(this, NULL);
    $p31 := $M.2[$p30];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 18} true;
    $p32 := $p31 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 18} true;
    assert !aliasQ2302($p31, NULL);
    $i33 := $M.2[$p32];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 35} true;
    $p34 := this + 176;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 35} true;
    assert !aliasQ2303(this, NULL);
    $i35 := $M.2[$p34];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 49} true;
    $p36 := this + 200;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 49} true;
    assert !aliasQ2304(this, NULL);
    $i37 := $M.2[$p36];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 35} true;
    $i38 := $urem.i32($i35, $i37);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 34} true;
    $i39 := $i38;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 18} true;
    $i40 := $i33 * $i39;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 9} true;
    $p41 := $p29 + $i40 * 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 72} true;
    $p42 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 72} true;
    assert !aliasQ2305(this, NULL);
    $p43 := $M.2[$p42];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 72} true;
    $p44 := $p43 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 72} true;
    assert !aliasQ2306($p43, NULL);
    $i45 := $M.2[$p44];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 276, 2} true;
    call $M.2 := $memcpy.i8($M.2, $M.2, $p41, buffer, $i45, 1, NULL == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 279, 17} true;
    call $i46 := hrt_absolute_time();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 279, 2} true;
    $p47 := this + 168;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 279, 2} true;
    assert !aliasQ2307(this, NULL);
    $M.2 := $M.2[$p47 := $i46];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 281, 2} true;
    $p48 := this + 176;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 281, 2} true;
    assert !aliasQ2308(this, NULL);
    $i49 := $M.2[$p48];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 281, 2} true;
    $i50 := $i49 + 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 281, 2} true;
    assert !aliasQ2309(this, NULL);
    $M.2 := $M.2[$p48 := $i50];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 283, 2} true;
    $p51 := this + 196;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 283, 2} true;
    assert !aliasQ2310(this, NULL);
    $M.2 := $M.2[$p51 := 1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 285, 2} true;
    $p52 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 285, 2} true;
    call _ZN6device6Device6unlockEv($p52);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 288, 2} true;
    $p53 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 288, 2} true;
    $p54 := $p53;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 288, 2} true;
    assert !aliasQ2311($p54, NULL);
    $p55 := $M.2[$p54];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 288, 2} true;
    $p56 := $p55 + 112;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 288, 2} true;
    assert !aliasQ2312($p55, NULL);
    $p57 := $M.2[$p56];
    call devirtbounce8($p57, $p53, 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 290, 9} true;
    $p58 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 290, 9} true;
    assert !aliasQ2313(this, NULL);
    $p59 := $M.2[$p58];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 290, 9} true;
    $p60 := $p59 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 290, 9} true;
    assert !aliasQ2314($p59, NULL);
    $i61 := $M.2[$p60];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 290, 2} true;
    $i21 := $i61;
    goto $bb9;
}



const _Znam: int;

axiom _Znam == NULL - 8184;

procedure _Znam({:scalar} $i0: int) returns ($r: int);



const hrt_absolute_time: int;

axiom hrt_absolute_time == NULL - 8192;

procedure hrt_absolute_time() returns ($r: int);



const _ZN4uORB10DeviceNode5ioctlEPN6device6file_tEim: int;

axiom _ZN4uORB10DeviceNode5ioctlEPN6device6file_tEim == NULL - 8200;

procedure _ZN4uORB10DeviceNode5ioctlEPN6device6file_tEim(this: int, filp: int, {:scalar} cmd: int, {:scalar} arg: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode5ioctlEPN6device6file_tEim(this: int, filp: int, cmd: int, arg: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;
  var {:scalar} $i7: int;
  var {:scalar} $i8: int;
  var $p9: int;
  var {:base "this"} $p10: int;
  var {:scalar} $i11: int;
  var $p12: int;
  var $p13: int;
  var $p15: int;
  var {:scalar} $i16: int;
  var $p17: int;
  var {:scalar} $i18: int;
  var $p19: int;
  var $p20: int;
  var {:scalar} $i21: int;
  var {:base "$p0"} $p22: int;
  var $p23: int;
  var {:scalar} $i24: int;
  var {:base "$p0"} $p26: int;
  var $p27: int;
  var {:scalar} $i28: int;
  var $p29: int;
  var {:base "$p0"} $p30: int;
  var {:scalar} $i31: int;
  var {:base "$p0"} $p32: int;
  var $p33: int;
  var {:base "$p33"} $p34: int;
  var {:scalar} $i35: int;
  var {:base "$p0"} $p36: int;
  var $p37: int;
  var {:base "$p37"} $p38: int;
  var $p39: int;
  var $p40: int;
  var $p41: int;
  var {:base "$p0"} $p42: int;
  var {:base "$p0"} $p43: int;
  var $p44: int;
  var {:scalar} $i45: int;
  var {:base "$p0"} $p46: int;
  var $p47: int;
  var {:base "$p47"} $p48: int;
  var $p49: int;
  var {:scalar} $i50: int;
  var {:base "$p0"} $p51: int;
  var $p52: int;
  var {:base "$p52"} $p53: int;
  var {:scalar} $i54: int;
  var {:base "$p0"} $p55: int;
  var $p56: int;
  var {:base "$p56"} $p57: int;
  var {:scalar} $i25: int;
  var $p58: int;
  var {:scalar} $i59: int;
  var $p60: int;
  var {:scalar} $i61: int;
  var $p62: int;
  var {:scalar} $i63: int;
  var {:scalar} $i64: int;
  var {:base "$p0"} $p65: int;
  var $p66: int;
  var {:scalar} $i67: int;
  var {:base "$p0"} $p68: int;
  var $p69: int;
  var {:base "$p69"} $p70: int;
  var {:scalar} $i71: int;
  var $p72: int;
  var $p73: int;
  var $p74: int;
  var {:scalar} $i75: int;
  var {:scalar} $i14: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "filp"} boogie_si_record_ref(filp);
    call {:cexpr "cmd"} boogie_si_record_i32(cmd);
    call {:cexpr "arg"} boogie_si_record_i64(arg);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 297, 23} true;
    call $p0 := _ZN4uORB10DeviceNode10filp_to_sdEPN6device6file_tE(filp);
    call {:cexpr "sd"} boogie_si_record_ref($p0);
    $i1 := (if cmd < 2490381 then 1 else NULL);
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i1 == 1;
    $i6 := (if cmd < 2490379 then 1 else NULL);
    assume {:branchcond $i6} true;
    goto $bb12, $bb13;

  $bb2:
    assume {:partition} !($i1 == 1);
    $i2 := (if cmd < 2490383 then 1 else NULL);
    assume {:branchcond $i2} true;
    goto $bb3, $bb4;

  $bb3:
    assume {:partition} $i2 == 1;
    $i5 := (if cmd < 2490382 then 1 else NULL);
    assume {:branchcond $i5} true;
    goto $bb10, $bb11;

  $bb4:
    assume {:partition} !($i2 == 1);
    $i3 := (if cmd < 2490384 then 1 else NULL);
    assume {:branchcond $i3} true;
    goto $bb5, $bb6;

  $bb5:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 356, 28} true;
    $i63 := arg;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 356, 10} true;
    call $i64 := _ZN4uORB10DeviceNode17update_queue_sizeEj(this, $i63);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 356, 3} true;
    $i14 := $i64;
    goto $bb18;

  $bb6:
    assume {:partition} !($i3 == 1);
    $i4 := (if cmd == 2490384 then 1 else NULL);
    assume {:branchcond $i4} true;
    goto $bb7, $bb8;

  $bb7:
    assume {:partition} $i4 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 359, 7} true;
    $p65 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 359, 7} true;
    assert !aliasQ2315($p0, NULL);
    $p66 := $M.2[$p65];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 359, 7} true;
    $i67 := (if $p66 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 359, 7} true;
    assume {:branchcond $i67} true;
    goto $bb31, $bb32;

  $bb8:
    assume {:partition} !($i4 == 1);
    goto $bb9;

  $bb9:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 370, 16} true;
    $p74 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 370, 16} true;
    call $i75 := _ZN6device4VDev5ioctlEPNS_6file_tEim($p74, filp, cmd, arg);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 370, 3} true;
    $i14 := $i75;
    goto $bb18;

  $bb10:
    assume {:partition} $i5 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 346, 23} true;
    $i59 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 346, 4} true;
    $p60 := arg;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 346, 3} true;
    assert !aliasQ2316($p60, NULL);
    $M.2 := $M.2[$p60 := $i59];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 347, 3} true;
    $i14 := NULL;
    goto $bb18;

  $bb11:
    assume {:partition} !($i5 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 350, 17} true;
    call $i61 := _ZNK4uORB10DeviceNode14SubscriberData8priorityEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 350, 4} true;
    $p62 := arg;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 350, 3} true;
    assert !aliasQ2317($p62, NULL);
    $M.2 := $M.2[$p62 := $i61];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 351, 3} true;
    $i14 := NULL;
    goto $bb18;

  $bb12:
    assume {:partition} $i6 == 1;
    $i8 := (if cmd == 2490378 then 1 else NULL);
    assume {:branchcond $i8} true;
    goto $bb16, $bb17;

  $bb13:
    assume {:partition} !($i6 == 1);
    $i7 := (if cmd < 2490380 then 1 else NULL);
    assume {:branchcond $i7} true;
    goto $bb14, $bb15;

  $bb14:
    assume {:partition} $i7 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 307, 3} true;
    $p15 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 307, 3} true;
    call _ZN6device6Device4lockEv($p15);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 308, 18} true;
    call $i16 := _ZN4uORB10DeviceNode15appears_updatedEPNS0_14SubscriberDataE(this, $p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 308, 4} true;
    $p17 := arg;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 308, 3} true;
    $i18 := $i16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 308, 3} true;
    assert !aliasQ2318($p17, NULL);
    $M.2 := $M.2[$p17 := $i18];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 309, 3} true;
    $p19 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 309, 3} true;
    call _ZN6device6Device6unlockEv($p19);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 310, 3} true;
    $i14 := NULL;
    goto $bb18;

  $bb15:
    assume {:partition} !($i7 == 1);
    call {:cexpr "ret"} boogie_si_record_i32(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 314, 4} true;
    $p20 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 314, 4} true;
    call _ZN6device6Device4lockEv($p20);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 316, 8} true;
    $i21 := (if arg == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 317, 9} true;
    $p22 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 317, 9} true;
    assert !aliasQ2319($p0, NULL);
    $p23 := $M.2[$p22];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 317, 9} true;
    $i24 := (if $p23 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 316, 8} true;
    assume {:branchcond $i21} true;
    goto $bb19, $bb20;

  $bb16:
    assume {:partition} $i8 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 301, 3} true;
    $p9 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 301, 3} true;
    call _ZN6device6Device4lockEv($p9);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 302, 25} true;
    $p10 := this + 168;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 302, 25} true;
    assert !aliasQ2320(this, NULL);
    $i11 := $M.2[$p10];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 302, 4} true;
    $p12 := arg;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 302, 3} true;
    assert !aliasQ2321($p12, NULL);
    $M.2 := $M.2[$p12 := $i11];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 303, 3} true;
    $p13 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 303, 3} true;
    call _ZN6device6Device6unlockEv($p13);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 304, 3} true;
    $i14 := NULL;
    goto $bb18;

  $bb17:
    assume {:partition} !($i8 == 1);
    goto $bb9;

  $bb18:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 372, 1} true;
    $r := $i14;
    $exn := false;
    return;

  $bb19:
    assume {:partition} $i21 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 317, 9} true;
    $i25 := NULL;
    assume {:branchcond $i24} true;
    goto $bb21, $bb22;

  $bb20:
    assume {:partition} !($i21 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 323, 9} true;
    assume {:branchcond $i24} true;
    goto $bb27, $bb28;

  $bb21:
    assume {:partition} $i24 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 318, 13} true;
    $p26 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 318, 13} true;
    assert !aliasQ2322($p0, NULL);
    $p27 := $M.2[$p26];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 318, 6} true;
    $i28 := (if $p27 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 318, 6} true;
    assume {:branchcond $i28} true;
    goto $bb24, $bb26;

  $bb22:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 317, 9} true;
    assume {:partition} !($i24 == 1);
    goto $bb23;

  $bb23:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 341, 4} true;
    $p58 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 341, 4} true;
    call _ZN6device6Device6unlockEv($p58);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 342, 4} true;
    $i14 := $i25;
    goto $bb18;

  $bb24:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 318, 6} true;
    assume {:partition} $i28 == 1;
    goto $bb25;

  $bb25:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 319, 6} true;
    $p30 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 319, 6} true;
    assert !aliasQ2323($p0, NULL);
    $M.2 := $M.2[$p30 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 320, 5} true;
    $i25 := NULL;
    goto $bb23;

  $bb26:
    assume {:partition} !($i28 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 318, 6} true;
    $p29 := $p27;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 318, 6} true;
    call _ZdlPv($p29);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 318, 6} true;
    goto $bb25;

  $bb27:
    assume {:partition} $i24 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 324, 38} true;
    $i31 := arg;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 324, 6} true;
    $p32 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 324, 6} true;
    assert !aliasQ2324($p0, NULL);
    $p33 := $M.2[$p32];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 324, 6} true;
    $p34 := $p33;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 324, 6} true;
    assert !aliasQ2325($p33, NULL);
    $M.2 := $M.2[$p34 := $i31];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 325, 41} true;
    call $i35 := hrt_absolute_time();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 325, 6} true;
    $p36 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 325, 6} true;
    assert !aliasQ2326($p0, NULL);
    $p37 := $M.2[$p36];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 325, 6} true;
    $p38 := $p37 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 325, 6} true;
    assert !aliasQ2327($p37, NULL);
    $M.2 := $M.2[$p38 := $i35];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 327, 5} true;
    $i25 := NULL;
    goto $bb23;

  $bb28:
    assume {:partition} !($i24 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 328, 28} true;
    call $p39 := _Znwm(56);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 328, 28} true;
    $p40 := $p39;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 328, 28} true;
    $p41 := $p40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 328, 28} true;
    assert !aliasQ2328($p41, NULL);
    $M.2[$p41] := NULL;
    assert !aliasQ2329($p41 + 8, NULL);
    $M.2[$p41 + 8] := NULL;
    assert !aliasQ2330($p41 + 16, NULL);
    $M.2[$p41 + 16] := NULL;
    assert !aliasQ2331($p41 + 24, NULL);
    $M.2[$p41 + 24] := NULL;
    assert !aliasQ2332($p41 + 32, NULL);
    $M.2[$p41 + 32] := NULL;
    assert !aliasQ2333($p41 + 40, NULL);
    $M.2[$p41 + 40] := NULL;
    assert !aliasQ2334($p41 + 48, NULL);
    $M.2[$p41 + 48] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 328, 6} true;
    $p42 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 328, 6} true;
    assert !aliasQ2335($p0, NULL);
    $M.2 := $M.2[$p42 := $p39];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 330, 10} true;
    $p43 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 330, 10} true;
    assert !aliasQ2336($p0, NULL);
    $p44 := $M.2[$p43];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 330, 10} true;
    $i45 := (if $p44 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 330, 10} true;
    assume {:branchcond $i45} true;
    goto $bb29, $bb30;

  $bb29:
    assume {:partition} $i45 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 331, 15} true;
    $p46 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 331, 15} true;
    assert !aliasQ2337($p0, NULL);
    $p47 := $M.2[$p46];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 331, 7} true;
    $p48 := $p47 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 331, 7} true;
    $p49 := $p48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 331, 7} true;
    assert !aliasQ2338($p49, NULL);
    $M.2[$p49] := NULL;
    assert !aliasQ2339($p49 + 8, NULL);
    $M.2[$p49 + 8] := NULL;
    assert !aliasQ2340($p49 + 16, NULL);
    $M.2[$p49 + 16] := NULL;
    assert !aliasQ2341($p49 + 24, NULL);
    $M.2[$p49 + 24] := NULL;
    assert !aliasQ2342($p49 + 32, NULL);
    $M.2[$p49 + 32] := NULL;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 332, 39} true;
    $i50 := arg;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 332, 7} true;
    $p51 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 332, 7} true;
    assert !aliasQ2343($p0, NULL);
    $p52 := $M.2[$p51];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 332, 7} true;
    $p53 := $p52;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 332, 7} true;
    assert !aliasQ2344($p52, NULL);
    $M.2 := $M.2[$p53 := $i50];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 333, 42} true;
    call $i54 := hrt_absolute_time();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 333, 7} true;
    $p55 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 333, 7} true;
    assert !aliasQ2345($p0, NULL);
    $p56 := $M.2[$p55];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 333, 7} true;
    $p57 := $p56 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 333, 7} true;
    assert !aliasQ2346($p56, NULL);
    $M.2 := $M.2[$p57 := $i54];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 335, 6} true;
    $i25 := NULL;
    goto $bb23;

  $bb30:
    assume {:partition} !($i45 == 1);
    call {:cexpr "ret"} boogie_si_record_i32(NULL - 12);
    $i25 := NULL - 12;
    goto $bb23;

  $bb31:
    assume {:partition} $i67 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 360, 23} true;
    $p68 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 360, 23} true;
    assert !aliasQ2347($p0, NULL);
    $p69 := $M.2[$p68];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 360, 23} true;
    $p70 := $p69;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 360, 23} true;
    assert !aliasQ2348($p69, NULL);
    $i71 := $M.2[$p70];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 360, 5} true;
    $p72 := arg;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 360, 4} true;
    assert !aliasQ2349($p72, NULL);
    $M.2 := $M.2[$p72 := $i71];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 362, 3} true;
    goto $bb33;

  $bb32:
    assume {:partition} !($i67 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 363, 5} true;
    $p73 := arg;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 363, 4} true;
    assert !aliasQ2350($p73, NULL);
    $M.2 := $M.2[$p73 := NULL];
    goto $bb33;

  $bb33:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 366, 3} true;
    $i14 := NULL;
    goto $bb18;
}



const _ZN4uORB10DeviceNode15appears_updatedEPNS0_14SubscriberDataE: int;

axiom _ZN4uORB10DeviceNode15appears_updatedEPNS0_14SubscriberDataE == NULL - 8208;

procedure _ZN4uORB10DeviceNode15appears_updatedEPNS0_14SubscriberDataE(this: int, sd: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode15appears_updatedEPNS0_14SubscriberDataE(this: int, sd: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:scalar} $i1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;
  var {:base "sd"} $p6: int;
  var {:scalar} $i7: int;
  var {:base "this"} $p8: int;
  var {:scalar} $i9: int;
  var {:scalar} $i10: int;
  var {:base "sd"} $p12: int;
  var $p13: int;
  var {:scalar} $i14: int;
  var {:scalar} $i15: int;
  var {:base "sd"} $p16: int;
  var $p17: int;
  var {:base "$p17"} $p18: int;
  var {:scalar} $i19: int;
  var {:base "sd"} $p20: int;
  var $p21: int;
  var {:base "$p21"} $p22: int;
  var {:scalar} $i23: int;
  var {:scalar} $i24: int;
  var {:scalar} $i25: int;
  var {:scalar} $i26: int;
  var {:scalar} $i27: int;
  var {:scalar} $i28: int;
  var {:base "sd"} $p29: int;
  var $p30: int;
  var {:base "$p30"} $p31: int;
  var {:scalar} $i11: int;
  var {:scalar} $i32: int;
  var {:scalar} $i5: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "sd"} boogie_si_record_ref(sd);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 481, 2} true;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 481, 9} true;
    call $i0 := px4_sim_delay_enabled();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 481, 2} true;
    assume {:branchcond $i0} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i0 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 482, 3} true;
    call $i1 := usleep(100);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 481, 2} true;
    goto $bb1;

  $bb3:
    assume {:partition} !($i0 == 1);
    call {:cexpr "ret"} boogie_si_record_i8(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 490, 6} true;
    $p2 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 490, 6} true;
    assert !aliasQ2351(this, NULL);
    $p3 := $M.2[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 490, 6} true;
    $i4 := (if $p3 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 490, 6} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb4:
    assume {:partition} $i4 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 491, 3} true;
    $i5 := NULL;
    goto $bb6;

  $bb5:
    assume {:partition} !($i4 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 499, 9} true;
    $p6 := sd;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 499, 9} true;
    assert !aliasQ2352(sd, NULL);
    $i7 := $M.2[$p6];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 499, 27} true;
    $p8 := this + 176;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 499, 27} true;
    assert !aliasQ2353(this, NULL);
    $i9 := $M.2[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 499, 9} true;
    $i10 := (if $i7 != $i9 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 499, 2} true;
    $i11 := NULL;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb6:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 538, 1} true;
    $r := $i5;
    $exn := false;
    return;

  $bb7:
    assume {:partition} $i10 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 504, 7} true;
    $p12 := sd + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 504, 7} true;
    assert !aliasQ2354(sd, NULL);
    $p13 := $M.2[$p12];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 504, 7} true;
    $i14 := (if $p13 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 504, 7} true;
    assume {:branchcond $i14} true;
    goto $bb10, $bb11;

  $bb8:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 499, 2} true;
    assume {:partition} !($i10 == 1);
    goto $bb9;

  $bb9:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 537, 9} true;
    $i32 := $i11;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 537, 2} true;
    $i5 := $i32;
    goto $bb6;

  $bb10:
    assume {:partition} $i14 == 1;
    call {:cexpr "ret"} boogie_si_record_i8(1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 506, 4} true;
    $i11 := 1;
    goto $bb9;

  $bb11:
    assume {:partition} !($i14 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 516, 7} true;
    call $i15 := _ZNK4uORB10DeviceNode14SubscriberData15update_reportedEv(sd);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 516, 7} true;
    assume {:branchcond $i15} true;
    goto $bb12, $bb13;

  $bb12:
    assume {:partition} $i15 == 1;
    call {:cexpr "ret"} boogie_si_record_i8(1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 518, 4} true;
    $i11 := 1;
    goto $bb9;

  $bb13:
    assume {:partition} !($i15 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 7} true;
    $p16 := sd + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 7} true;
    assert !aliasQ2355(sd, NULL);
    $p17 := $M.2[$p16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 7} true;
    $p18 := $p17 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 7} true;
    assert !aliasQ2356($p17, NULL);
    $i19 := $M.2[$p18];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 42} true;
    $p20 := sd + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 42} true;
    assert !aliasQ2357(sd, NULL);
    $p21 := $M.2[$p20];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 42} true;
    $p22 := $p21;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 42} true;
    assert !aliasQ2358($p21, NULL);
    $i23 := $M.2[$p22];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 42} true;
    $i24 := $i23;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 7} true;
    $i25 := $i19 + $i24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 74} true;
    call $i26 := hrt_absolute_time();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 7} true;
    $i27 := (if $i25 > $i26 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 7} true;
    $i11 := NULL;
    assume {:branchcond $i27} true;
    goto $bb14, $bb15;

  $bb14:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 523, 7} true;
    assume {:partition} $i27 == 1;
    goto $bb9;

  $bb15:
    assume {:partition} !($i27 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 530, 3} true;
    call _ZN4uORB10DeviceNode14SubscriberData19set_update_reportedEb(sd, 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 531, 38} true;
    call $i28 := hrt_absolute_time();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 531, 3} true;
    $p29 := sd + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 531, 3} true;
    assert !aliasQ2359(sd, NULL);
    $p30 := $M.2[$p29];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 531, 3} true;
    $p31 := $p30 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 531, 3} true;
    assert !aliasQ2360($p30, NULL);
    $M.2 := $M.2[$p31 := $i28];
    call {:cexpr "ret"} boogie_si_record_i8(1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 534, 3} true;
    $i11 := 1;
    goto $bb9;
}



const _ZN4uORB10DeviceNode17update_queue_sizeEj: int;

axiom _ZN4uORB10DeviceNode17update_queue_sizeEj == NULL - 8216;

procedure _ZN4uORB10DeviceNode17update_queue_sizeEj(this: int, {:scalar} queue_size: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode17update_queue_sizeEj(this: int, queue_size: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var {:scalar} $i6: int;
  var {:base "this"} $p7: int;
  var {:scalar} $i8: int;
  var {:scalar} $i9: int;
  var {:base "this"} $p10: int;
  var {:scalar} $i3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "queue_size"} boogie_si_record_i32(queue_size);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 592, 6} true;
    $p0 := this + 200;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 592, 6} true;
    assert !aliasQ2361(this, NULL);
    $i1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 592, 6} true;
    $i2 := (if $i1 == queue_size then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 592, 6} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i2 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 593, 3} true;
    $i3 := NULL;
    goto $bb3;

  $bb2:
    assume {:partition} !($i2 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 596, 6} true;
    $p4 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 596, 6} true;
    assert !aliasQ2362(this, NULL);
    $p5 := $M.2[$p4];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 596, 6} true;
    $i6 := (if $p5 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 596, 6} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb6;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 602, 1} true;
    $r := $i3;
    $exn := false;
    return;

  $bb4:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 596, 6} true;
    assume {:partition} $i6 == 1;
    goto $bb5;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 597, 3} true;
    $i3 := NULL - 1;
    goto $bb3;

  $bb6:
    assume {:partition} !($i6 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 596, 15} true;
    $p7 := this + 200;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 596, 15} true;
    assert !aliasQ2363(this, NULL);
    $i8 := $M.2[$p7];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 596, 15} true;
    $i9 := (if $i8 > queue_size then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 596, 6} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb7:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 596, 6} true;
    assume {:partition} $i9 == 1;
    goto $bb5;

  $bb8:
    assume {:partition} !($i9 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 600, 2} true;
    $p10 := this + 200;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 600, 2} true;
    assert !aliasQ2364(this, NULL);
    $M.2 := $M.2[$p10 := queue_size];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 601, 2} true;
    $i3 := NULL;
    goto $bb3;
}



const _ZN6device4VDev5ioctlEPNS_6file_tEim: int;

axiom _ZN6device4VDev5ioctlEPNS_6file_tEim == NULL - 8224;

procedure _ZN6device4VDev5ioctlEPNS_6file_tEim($p0: int, $p1: int, {:scalar} $i2: int, {:scalar} $i3: int) returns ($r: int);



const _ZN4uORB10DeviceNode7publishEPK12orb_metadataPvPKv: int;

axiom _ZN4uORB10DeviceNode7publishEPK12orb_metadataPvPKv == NULL - 8232;

procedure _ZN4uORB10DeviceNode7publishEPK12orb_metadataPvPKv(meta: int, handle: int, data: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode7publishEPK12orb_metadataPvPKv(meta: int, handle: int, data: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var $p1: int;
  var $p3: int;
  var {:base "$p3"} $p4: int;
  var $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var $p8: int;
  var $p9: int;
  var {:base "$p9"} $p10: int;
  var $p11: int;
  var {:base "meta"} $p12: int;
  var {:scalar} $i13: int;
  var {:scalar} $i14: int;
  var {:scalar} $i15: int;
  var {:scalar} $i16: int;
  var {:base "meta"} $p17: int;
  var {:scalar} $i18: int;
  var {:scalar} $i19: int;
  var {:scalar} $i20: int;
  var $p21: int;
  var $p22: int;
  var $p23: int;
  var {:scalar} $i24: int;
  var $p25: int;
  var $p26: int;
  var {:base "$p26"} $p27: int;
  var $p28: int;
  var {:base "meta"} $p29: int;
  var $p30: int;
  var {:base "meta"} $p31: int;
  var {:scalar} $i32: int;
  var {:scalar} $i33: int;
  var {:scalar} $i34: int;
  var {:scalar} $i35: int;
  var {:scalar} $i36: int;
  var {:base "meta"} $p37: int;
  var $p38: int;
  var {:scalar} $i2: int;

  $bb0:
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "handle"} boogie_si_record_ref(handle);
    call {:cexpr "data"} boogie_si_record_ref(data);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 379, 6} true;
    $i0 := (if handle == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 379, 6} true;
    assume {:branchcond $i0} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i0 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 380, 3} true;
    call px4_log_modulename.i32.ref.ref(2, .str271421, .str2291423);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 381, 3} true;
    call $p1 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 381, 3} true;
    assert !aliasQ2365($p1, NULL);
    $M.89 := $M.89[$p1 := 22];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 382, 3} true;
    $i2 := NULL - 1;
    goto $bb3;

  $bb2:
    assume {:partition} !($i0 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 385, 30} true;
    $p3 := handle;
    call {:cexpr "devnode"} boogie_si_record_ref(handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 389, 6} true;
    $p4 := $p3 + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 389, 6} true;
    assert !aliasQ2366($p3, NULL);
    $p5 := $M.2[$p4];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 389, 6} true;
    $i6 := (if $p5 != meta then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 389, 6} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 420, 1} true;
    $r := $i2;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i6 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 390, 3} true;
    call $p7 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 390, 3} true;
    assert !aliasQ2367($p7, NULL);
    $M.90 := $M.90[$p7 := 22];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 391, 3} true;
    $i2 := NULL - 1;
    goto $bb3;

  $bb5:
    assume {:partition} !($i6 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 395, 8} true;
    $p8 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 395, 8} true;
    assert !aliasQ2368($p8, NULL);
    $p9 := $M.2[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 395, 8} true;
    $p10 := $p9 + 80;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 395, 8} true;
    assert !aliasQ2369($p9, NULL);
    $p11 := $M.2[$p10];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 395, 52} true;
    $p12 := meta + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 395, 52} true;
    assert !aliasQ2370(meta, NULL);
    $i13 := $M.2[$p12];
    call $i14 := devirtbounce9($p11, $p3, NULL, data, $i13);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 395, 8} true;
    $i15 := $i14;
    call {:cexpr "ret"} boogie_si_record_i32($i15);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 397, 6} true;
    $i16 := (if $i15 < NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 397, 6} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb6:
    assume {:partition} $i16 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 398, 3} true;
    $i2 := NULL - 1;
    goto $bb3;

  $bb7:
    assume {:partition} !($i16 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 401, 18} true;
    $p17 := meta + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 401, 18} true;
    assert !aliasQ2371(meta, NULL);
    $i18 := $M.2[$p17];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 401, 18} true;
    $i19 := $i18;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 401, 6} true;
    $i20 := (if $i15 != $i19 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 401, 6} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb8:
    assume {:partition} $i20 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 402, 3} true;
    call $p21 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 402, 3} true;
    assert !aliasQ2372($p21, NULL);
    $M.91 := $M.91[$p21 := 5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 403, 3} true;
    $i2 := NULL - 1;
    goto $bb3;

  $bb9:
    assume {:partition} !($i20 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 409, 35} true;
    call $p22 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 409, 35} true;
    call $p23 := _ZN4uORB7Manager21get_uorb_communicatorEv($p22);
    call {:cexpr "ch"} boogie_si_record_ref($p23);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 411, 6} true;
    $i24 := (if $p23 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 411, 6} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb10:
    assume {:partition} $i24 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 7} true;
    $p25 := $p23;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 7} true;
    assert !aliasQ2373($p25, NULL);
    $p26 := $M.2[$p25];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 7} true;
    $p27 := $p26 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 7} true;
    assert !aliasQ2374($p26, NULL);
    $p28 := $M.2[$p27];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 24} true;
    $p29 := meta;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 24} true;
    assert !aliasQ2375(meta, NULL);
    $p30 := $M.2[$p29];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 38} true;
    $p31 := meta + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 38} true;
    assert !aliasQ2376(meta, NULL);
    $i32 := $M.2[$p31];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 38} true;
    $i33 := $i32;
    call $i34 := devirtbounce10($p28, $p23, $p30, $i33, data);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 7} true;
    $i35 := $i34;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 7} true;
    $i36 := (if $i35 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 7} true;
    assume {:branchcond $i36} true;
    goto $bb13, $bb14;

  $bb11:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 411, 6} true;
    assume {:partition} !($i24 == 1);
    goto $bb12;

  $bb12:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 419, 2} true;
    $i2 := NULL;
    goto $bb3;

  $bb13:
    assume {:partition} $i36 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 413, 4} true;
    $p37 := meta;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 413, 4} true;
    assert !aliasQ2377(meta, NULL);
    $p38 := $M.2[$p37];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 413, 4} true;
    call px4_log_modulename.i32.ref.ref.i32.ref(2, .str271421, .str3301424, 414, $p38);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 415, 4} true;
    $i2 := NULL - 1;
    goto $bb3;

  $bb14:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 412, 7} true;
    assume {:partition} !($i36 == 1);
    goto $bb12;
}



const __errno_location: int;

axiom __errno_location == NULL - 8240;

procedure __errno_location() returns ($r: int);



const _ZN4uORB10DeviceNode11unadvertiseEPv: int;

axiom _ZN4uORB10DeviceNode11unadvertiseEPv == NULL - 8248;

procedure _ZN4uORB10DeviceNode11unadvertiseEPv(handle: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode11unadvertiseEPv(handle: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "handle"} boogie_si_record_ref(handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 424, 6} true;
    $i0 := (if handle == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 424, 6} true;
    assume {:branchcond $i0} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i0 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 425, 3} true;
    $i1 := NULL - 22;
    goto $bb3;

  $bb2:
    assume {:partition} !($i0 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 428, 30} true;
    $p2 := handle;
    call {:cexpr "devnode"} boogie_si_record_ref(handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 441, 2} true;
    $p3 := $p2 + 196;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 441, 2} true;
    assert !aliasQ2378($p2, NULL);
    $M.2 := $M.2[$p3 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 443, 2} true;
    $i1 := NULL;
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 444, 1} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNode10poll_stateEPN6device6file_tE: int;

axiom _ZN4uORB10DeviceNode10poll_stateEPN6device6file_tE == NULL - 8256;

procedure _ZN4uORB10DeviceNode10poll_stateEPN6device6file_tE(this: int, filp: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode10poll_stateEPN6device6file_tE(this: int, filp: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "filp"} boogie_si_record_ref(filp);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 450, 23} true;
    call $p0 := _ZN4uORB10DeviceNode10filp_to_sdEPN6device6file_tE(filp);
    call {:cexpr "sd"} boogie_si_record_ref($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 455, 6} true;
    call $i1 := _ZN4uORB10DeviceNode15appears_updatedEPNS0_14SubscriberDataE(this, $p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 455, 6} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i1 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 456, 3} true;
    $i2 := 1;
    goto $bb3;

  $bb2:
    assume {:partition} !($i1 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 459, 2} true;
    $i2 := NULL;
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 460, 1} true;
    $r := $i2;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNode15poll_notify_oneEP19px4_pollfd_struct_ts: int;

axiom _ZN4uORB10DeviceNode15poll_notify_oneEP19px4_pollfd_struct_ts == NULL - 8264;

procedure _ZN4uORB10DeviceNode15poll_notify_oneEP19px4_pollfd_struct_ts(this: int, fds: int, {:scalar} events: int);



implementation _ZN4uORB10DeviceNode15poll_notify_oneEP19px4_pollfd_struct_ts(this: int, fds: int, events: int)
{
  var {:base "fds"} $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;
  var $p5: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "fds"} boogie_si_record_ref(fds);
    call {:cexpr "events"} boogie_si_record_i16(events);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 466, 52} true;
    $p0 := fds + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 466, 52} true;
    assert !aliasQ2379(fds, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 466, 34} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 466, 23} true;
    call $p3 := _ZN4uORB10DeviceNode10filp_to_sdEPN6device6file_tE($p2);
    call {:cexpr "sd"} boogie_si_record_ref($p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 471, 6} true;
    call $i4 := _ZN4uORB10DeviceNode15appears_updatedEPNS0_14SubscriberDataE(this, $p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 471, 6} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i4 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 472, 9} true;
    $p5 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 472, 9} true;
    call _ZN6device4VDev15poll_notify_oneEP19px4_pollfd_struct_ts($p5, fds, events);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 473, 2} true;
    goto $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 471, 6} true;
    assume {:partition} !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 474, 1} true;
    $exn := false;
    return;
}



const _ZN6device4VDev15poll_notify_oneEP19px4_pollfd_struct_ts: int;

axiom _ZN6device4VDev15poll_notify_oneEP19px4_pollfd_struct_ts == NULL - 8272;

procedure _ZN6device4VDev15poll_notify_oneEP19px4_pollfd_struct_ts($p0: int, $p1: int, {:scalar} $i2: int);



const px4_sim_delay_enabled: int;

axiom px4_sim_delay_enabled == NULL - 8280;

procedure px4_sim_delay_enabled() returns ($r: int);



const usleep: int;

axiom usleep == NULL - 8288;

procedure usleep({:scalar} $i0: int) returns ($r: int);



const _ZN4uORB10DeviceNode15update_deferredEv: int;

axiom _ZN4uORB10DeviceNode15update_deferredEv == NULL - 8296;

procedure _ZN4uORB10DeviceNode15update_deferredEv(this: int);



implementation _ZN4uORB10DeviceNode15update_deferredEv(this: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 547, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 547, 2} true;
    $p1 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 547, 2} true;
    assert !aliasQ2380($p1, NULL);
    $p2 := $M.2[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 547, 2} true;
    $p3 := $p2 + 112;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 547, 2} true;
    assert !aliasQ2381($p2, NULL);
    $p4 := $M.2[$p3];
    call devirtbounce8($p4, $p0, 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 548, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNode26update_deferred_trampolineEPv: int;

axiom _ZN4uORB10DeviceNode26update_deferred_trampolineEPv == NULL - 8304;

procedure _ZN4uORB10DeviceNode26update_deferred_trampolineEPv(arg: int);



implementation _ZN4uORB10DeviceNode26update_deferred_trampolineEPv(arg: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "arg"} boogie_si_record_ref(arg);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 553, 27} true;
    $p0 := arg;
    call {:cexpr "node"} boogie_si_record_ref(arg);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 555, 2} true;
    call _ZN4uORB10DeviceNode15update_deferredEv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 556, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNode12is_publishedEv: int;

axiom _ZN4uORB10DeviceNode12is_publishedEv == NULL - 8312;

procedure _ZN4uORB10DeviceNode12is_publishedEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode12is_publishedEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 587, 9} true;
    $p0 := this + 196;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 587, 9} true;
    assert !aliasQ2382(this, NULL);
    $i1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 587, 9} true;
    $i2 := $i1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 587, 2} true;
    $r := $i2;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNode24process_add_subscriptionEi: int;

axiom _ZN4uORB10DeviceNode24process_add_subscriptionEi == NULL - 8320;

procedure _ZN4uORB10DeviceNode24process_add_subscriptionEi(this: int, {:scalar} rateInHz: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode24process_add_subscriptionEi(this: int, rateInHz: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var $p8: int;
  var {:base "$p8"} $p9: int;
  var $p10: int;
  var {:base "this"} $p11: int;
  var $p12: int;
  var {:base "$p12"} $p13: int;
  var $p14: int;
  var {:base "this"} $p15: int;
  var $p16: int;
  var {:base "$p16"} $p17: int;
  var {:scalar} $i18: int;
  var {:scalar} $i19: int;
  var {:base "this"} $p20: int;
  var $p21: int;
  var {:scalar} $i22: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "rateInHz"} boogie_si_record_i32(rateInHz);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 611, 35} true;
    call $p0 := _ZN4uORB7Manager12get_instanceEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 611, 35} true;
    call $p1 := _ZN4uORB7Manager21get_uorb_communicatorEv($p0);
    call {:cexpr "ch"} boogie_si_record_ref($p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 613, 6} true;
    $p2 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 613, 6} true;
    assert !aliasQ2383(this, NULL);
    $p3 := $M.2[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 613, 6} true;
    $i4 := (if $p3 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 613, 26} true;
    $i5 := (if $p1 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 613, 6} true;
    $i6 := $and.i1($i4, $i5);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 613, 6} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i6 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 3} true;
    $p7 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 3} true;
    assert !aliasQ2384($p7, NULL);
    $p8 := $M.2[$p7];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 3} true;
    $p9 := $p8 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 3} true;
    assert !aliasQ2385($p8, NULL);
    $p10 := $M.2[$p9];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 20} true;
    $p11 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 20} true;
    assert !aliasQ2386(this, NULL);
    $p12 := $M.2[$p11];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 20} true;
    $p13 := $p12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 20} true;
    assert !aliasQ2387($p12, NULL);
    $p14 := $M.2[$p13];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 35} true;
    $p15 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 35} true;
    assert !aliasQ2388(this, NULL);
    $p16 := $M.2[$p15];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 35} true;
    $p17 := $p16 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 35} true;
    assert !aliasQ2389($p16, NULL);
    $i18 := $M.2[$p17];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 35} true;
    $i19 := $i18;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 50} true;
    $p20 := this + 160;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 614, 50} true;
    assert !aliasQ2390(this, NULL);
    $p21 := $M.2[$p20];
    call $i22 := devirtbounce10($p10, $p1, $p14, $i19, $p21);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 615, 2} true;
    goto $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 613, 6} true;
    assume {:partition} !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 617, 2} true;
    $r := NULL;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNode27process_remove_subscriptionEv: int;

axiom _ZN4uORB10DeviceNode27process_remove_subscriptionEv == NULL - 8328;

procedure _ZN4uORB10DeviceNode27process_remove_subscriptionEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode27process_remove_subscriptionEv(this: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 624, 2} true;
    $r := NULL;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNode24process_received_messageEiPh: int;

axiom _ZN4uORB10DeviceNode24process_received_messageEiPh == NULL - 8336;

procedure _ZN4uORB10DeviceNode24process_received_messageEiPh(this: int, {:scalar} length: int, data: int) returns ({:scalar} $r: int);



implementation _ZN4uORB10DeviceNode24process_received_messageEiPh(this: int, length: int, data: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var {:base "this"} $p6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var $p9: int;
  var {:base "this"} $p10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var {:scalar} $i13: int;
  var {:scalar} $i14: int;
  var $p16: int;
  var $p17: int;
  var {:base "$p17"} $p18: int;
  var $p19: int;
  var {:base "this"} $p20: int;
  var $p21: int;
  var {:base "$p21"} $p22: int;
  var {:scalar} $i23: int;
  var {:scalar} $i24: int;
  var {:scalar} $i25: int;
  var {:scalar} $i26: int;
  var {:scalar} $i27: int;
  var {:scalar} $i28: int;
  var {:base "this"} $p29: int;
  var $p30: int;
  var {:base "$p30"} $p31: int;
  var {:scalar} $i32: int;
  var {:scalar} $i33: int;
  var {:scalar} $i34: int;
  var $p35: int;
  var {:scalar} $i15: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "length"} boogie_si_record_i32(length);
    call {:cexpr "data"} boogie_si_record_ref(data);
    call {:cexpr "ret"} boogie_si_record_i16(NULL - 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 633, 26} true;
    $p0 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 633, 26} true;
    assert !aliasQ2391(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 633, 26} true;
    $p2 := $p1 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 633, 26} true;
    assert !aliasQ2392($p1, NULL);
    $i3 := $M.2[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 633, 25} true;
    $i4 := $i3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 633, 6} true;
    $i5 := (if length != $i4 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 633, 6} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i5 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 634, 3} true;
    $p6 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 634, 3} true;
    assert !aliasQ2393(this, NULL);
    $p7 := $M.2[$p6];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 634, 3} true;
    $p8 := $p7;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 634, 3} true;
    assert !aliasQ2394($p7, NULL);
    $p9 := $M.2[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 634, 3} true;
    $p10 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 634, 3} true;
    assert !aliasQ2395(this, NULL);
    $p11 := $M.2[$p10];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 634, 3} true;
    $p12 := $p11 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 634, 3} true;
    assert !aliasQ2396($p11, NULL);
    $i13 := $M.2[$p12];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 634, 3} true;
    $i14 := $i13;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 634, 3} true;
    call px4_log_modulename.i32.ref.ref.i32.ref.i32.i32(2, .str271421, .str4311425, 635, $p9, length, $i14);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 636, 3} true;
    $i15 := NULL - 1;
    goto $bb3;

  $bb2:
    assume {:partition} !($i5 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 640, 8} true;
    $p16 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 640, 8} true;
    assert !aliasQ2397($p16, NULL);
    $p17 := $M.2[$p16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 640, 8} true;
    $p18 := $p17 + 80;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 640, 8} true;
    assert !aliasQ2398($p17, NULL);
    $p19 := $M.2[$p18];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 640, 43} true;
    $p20 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 640, 43} true;
    assert !aliasQ2399(this, NULL);
    $p21 := $M.2[$p20];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 640, 43} true;
    $p22 := $p21 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 640, 43} true;
    assert !aliasQ2400($p21, NULL);
    $i23 := $M.2[$p22];
    call $i24 := devirtbounce9($p19, this, NULL, data, $i23);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 640, 8} true;
    $i25 := $i24;
    call {:cexpr "ret"} boogie_si_record_i16($i25);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 642, 6} true;
    $i26 := $i25;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 642, 6} true;
    $i27 := (if $i26 < NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 642, 6} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 652, 1} true;
    $r := $i15;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i27 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 643, 3} true;
    $i15 := NULL - 1;
    goto $bb3;

  $bb5:
    assume {:partition} !($i27 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 646, 6} true;
    $i28 := $i25;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 646, 18} true;
    $p29 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 646, 18} true;
    assert !aliasQ2401(this, NULL);
    $p30 := $M.2[$p29];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 646, 18} true;
    $p31 := $p30 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 646, 18} true;
    assert !aliasQ2402($p30, NULL);
    $i32 := $M.2[$p31];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 646, 18} true;
    $i33 := $i32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 646, 6} true;
    $i34 := (if $i28 != $i33 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 646, 6} true;
    assume {:branchcond $i34} true;
    goto $bb6, $bb7;

  $bb6:
    assume {:partition} $i34 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 647, 3} true;
    call $p35 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 647, 3} true;
    assert !aliasQ2403($p35, NULL);
    $M.92 := $M.92[$p35 := 5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 648, 3} true;
    $i15 := NULL - 1;
    goto $bb3;

  $bb7:
    assume {:partition} !($i34 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 651, 2} true;
    $i15 := NULL;
    goto $bb3;
}



const _ZN4uORB12DeviceMasterC2ENS_6FlavorE: int;

axiom _ZN4uORB12DeviceMasterC2ENS_6FlavorE == NULL - 8344;

procedure _ZN4uORB12DeviceMasterC2ENS_6FlavorE(this: int, {:scalar} f: int);



implementation _ZN4uORB12DeviceMasterC2ENS_6FlavorE(this: int, f: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var $p2: int;
  var {:scalar} $i3: int;
  var $p4: int;
  var $p5: int;
  var {:base "this"} $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "f"} boogie_si_record_i32(f);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 659, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 656, 8} true;
    $i1 := (if f == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 656, 7} true;
    $p2 := (if $i1 == 1 then .str51426 else .str61427);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 657, 8} true;
    $i3 := (if f == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 657, 7} true;
    $p4 := (if $i3 == 1 then .str71428 else .str81429);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 659, 1} true;
    call _ZN6device4VDevC2EPKcS2_($p0, $p2, $p4);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 659, 1} true;
    $p5 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 659, 1} true;
    assert !aliasQ2404($p5, NULL);
    $M.2 := $M.2[$p5 := _ZTVN4uORB12DeviceMasterE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 658, 2} true;
    $p6 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 658, 2} true;
    assert !aliasQ2405(this, NULL);
    $M.2 := $M.2[$p6 := f];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 663, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12DeviceMasterD2Ev: int;

axiom _ZN4uORB12DeviceMasterD2Ev == NULL - 8352;

procedure _ZN4uORB12DeviceMasterD2Ev(this: int);



implementation _ZN4uORB12DeviceMasterD2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 667, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 667, 1} true;
    call _ZN6device4VDevD2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 667, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12DeviceMasterD0Ev: int;

axiom _ZN4uORB12DeviceMasterD0Ev == NULL - 8360;

procedure _ZN4uORB12DeviceMasterD0Ev(this: int);



implementation _ZN4uORB12DeviceMasterD0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 666, 1} true;
    call _ZN4uORB12DeviceMasterD2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 666, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 666, 1} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 667, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB12DeviceMaster5ioctlEPN6device6file_tEim: int;

axiom _ZN4uORB12DeviceMaster5ioctlEPN6device6file_tEim == NULL - 8368;

procedure _ZN4uORB12DeviceMaster5ioctlEPN6device6file_tEim(this: int, filp: int, {:scalar} cmd: int, {:scalar} arg: int) returns ({:scalar} $r: int);



implementation _ZN4uORB12DeviceMaster5ioctlEPN6device6file_tEim(this: int, filp: int, cmd: int, arg: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;
  var $p5: int;
  var {:base "$p5"} $p6: int;
  var $p7: int;
  var {:base "$p0"} $p8: int;
  var {:base "this"} $p9: int;
  var {:scalar} $i10: int;
  var {:base "$p5"} $p11: int;
  var $p12: int;
  var {:scalar} $i13: int;
  var {:scalar} $i14: int;
  var {:base "$p5"} $p16: int;
  var $p17: int;
  var {:scalar} $i18: int;
  var {:scalar} $i19: int;
  var {:base "$p5"} $p20: int;
  var $p21: int;
  var {:scalar} $i22: int;
  var {:base "$p5"} $p24: int;
  var $p25: int;
  var {:scalar} $i26: int;
  var {:scalar} $i27: int;
  var {:scalar} $i23: int;
  var $p28: int;
  var {:base "$p28"} $p29: int;
  var {:scalar} $i30: int;
  var {:base "$p5"} $p31: int;
  var $p32: int;
  var {:scalar} $i33: int;
  var {:scalar} $i34: int;
  var {:scalar} $i35: int;
  var {:base "$p0"} $p36: int;
  var {:scalar} $i37: int;
  var {:scalar} $i38: int;
  var {:base "$p0"} $p39: int;
  var {:base "$p5"} $p40: int;
  var $p41: int;
  var {:base "$p7"} $p42: int;
  var $p43: int;
  var {:base "$p0"} $p44: int;
  var $p45: int;
  var {:scalar} $i46: int;
  var $p48: int;
  var $p49: int;
  var {:base "$p5"} $p50: int;
  var {:scalar} $i51: int;
  var {:scalar} $i52: int;
  var $p53: int;
  var $p54: int;
  var $p55: int;
  var {:base "$p55"} $p56: int;
  var $p57: int;
  var {:scalar} $i58: int;
  var {:scalar} $i59: int;
  var {:scalar} $i60: int;
  var $p61: int;
  var $p62: int;
  var {:base "$p62"} $p63: int;
  var $p64: int;
  var {:scalar} $i65: int;
  var $p67: int;
  var {:scalar} $i68: int;
  var {:scalar} $i69: int;
  var {:scalar} $i66: int;
  var {:base "$p0"} $p71: int;
  var $p72: int;
  var {:scalar} $i70: int;
  var {:scalar} $i73: int;
  var {:scalar} $i74: int;
  var {:scalar} $i75: int;
  var {:scalar} $i76: int;
  var {:scalar} $i78: int;
  var {:scalar} $i77: int;
  var {:scalar} $i47: int;
  var $p79: int;
  var {:scalar} $i80: int;
  var {:scalar} $i15: int;

  $bb0:
    call $p0 := $alloc(64 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(1 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "filp"} boogie_si_record_ref(filp);
    call {:cexpr "cmd"} boogie_si_record_i32(cmd);
    call {:cexpr "arg"} boogie_si_record_i64(arg);
    $i4 := (if cmd == 2490368 then 1 else NULL);
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i4 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 676, 39} true;
    $p5 := arg;
    call {:cexpr "adv"} boogie_si_record_ref($p5);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 677, 38} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 677, 38} true;
    assert !aliasQ2406($p5, NULL);
    $p7 := $M.2[$p6];
    call {:cexpr "meta"} boogie_si_record_ref($p7);
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 684, 35} true;
    $p8 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 684, 45} true;
    $p9 := this + 152;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 684, 45} true;
    assert !aliasQ2407(this, NULL);
    $i10 := $M.2[$p9];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 684, 60} true;
    $p11 := $p5 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 684, 60} true;
    assert !aliasQ2408($p5, NULL);
    $p12 := $M.2[$p11];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 684, 10} true;
    call $i13 := _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPK12orb_metadataPi($p8, $i10, $p7, $p12);
    call {:cexpr "ret"} boogie_si_record_i32($i13);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 686, 8} true;
    $i14 := (if $i13 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 686, 8} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb2:
    assume {:partition} !($i4 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 778, 16} true;
    $p79 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 778, 16} true;
    call $i80 := _ZN6device4VDev5ioctlEPNS_6file_tEim($p79, filp, cmd, arg);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 778, 3} true;
    $i15 := $i80;
    goto $bb5;

  $bb3:
    assume {:partition} $i14 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 687, 5} true;
    $i15 := $i13;
    goto $bb5;

  $bb4:
    assume {:partition} !($i14 == 1);
    call {:cexpr "ret"} boogie_si_record_i32(NULL - 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 693, 38} true;
    $p16 := $p5 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 693, 38} true;
    assert !aliasQ2409($p5, NULL);
    $p17 := $M.2[$p16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 693, 38} true;
    $i18 := (if $p17 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 693, 37} true;
    $i19 := (if $i18 == 1 then 4 else 1);
    call {:cexpr "max_group_tries"} boogie_si_record_i32($i19);
    call {:cexpr "group_tries"} boogie_si_record_i32(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 696, 8} true;
    $p20 := $p5 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 696, 8} true;
    assert !aliasQ2410($p5, NULL);
    $p21 := $M.2[$p20];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 696, 8} true;
    $i22 := (if $p21 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 696, 8} true;
    $i23 := NULL;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 780, 1} true;
    $r := $i15;
    $exn := false;
    return;

  $bb6:
    assume {:partition} $i22 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 700, 20} true;
    $p24 := $p5 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 700, 20} true;
    assert !aliasQ2411($p5, NULL);
    $p25 := $M.2[$p24];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 700, 19} true;
    assert !aliasQ2412($p25, NULL);
    $i26 := $M.2[$p25];
    call {:cexpr "group_tries"} boogie_si_record_i32($i26);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 702, 9} true;
    $i27 := (if $i26 >= $i19 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 702, 9} true;
    $i23 := $i26;
    assume {:branchcond $i27} true;
    goto $bb9, $bb10;

  $bb7:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 696, 8} true;
    assume {:partition} !($i22 == 1);
    goto $bb8;

  $bb8:
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 707, 25} true;
    $p28 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 707, 14} true;
    $p29 := $p28 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 707, 14} true;
    call _ZN9SmartLockC2ER5sem_t($p1, $p29);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 709, 4} true;
    $i30 := $i23;
    goto $bb11;

  $bb9:
    assume {:partition} $i27 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 703, 6} true;
    $i15 := NULL - 12;
    goto $bb5;

  $bb10:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 702, 9} true;
    assume {:partition} !($i27 == 1);
    goto $bb8;

  $bb11:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 711, 9} true;
    $p31 := $p5 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 711, 9} true;
    assert !aliasQ2413($p5, NULL);
    $p32 := $M.2[$p31];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 711, 9} true;
    $i33 := (if $p32 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 711, 9} true;
    assume {:branchcond $i33} true;
    goto $bb12, $bb13;

  $bb12:
    assume {:partition} $i33 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 713, 39} true;
    $i34 := 48 + $i30;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 713, 39} true;
    $i35 := $i34;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 713, 22} true;
    $p36 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 713, 15} true;
    call $i37 := strlen($p36);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 713, 15} true;
    $i38 := $i37 - 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 713, 6} true;
    $p39 := $p0 + $i38 * 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 713, 6} true;
    assert !aliasQ2414($p0, NULL);
    $M.2 := $M.2[$p39 := $i35];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 714, 8} true;
    $p40 := $p5 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 714, 8} true;
    assert !aliasQ2415($p5, NULL);
    $p41 := $M.2[$p40];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 714, 6} true;
    assert !aliasQ2416($p41, NULL);
    $M.2 := $M.2[$p41 := $i30];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 715, 5} true;
    goto $bb14;

  $bb13:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 711, 9} true;
    assume {:partition} !($i33 == 1);
    goto $bb14;

  $bb14:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 717, 15} true;
    $p42 := $p7;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 717, 15} true;
    assert !aliasQ2417($p7, NULL);
    $p43 := $M.2[$p42];
    call {:cexpr "objname"} boogie_si_record_ref($p43);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 720, 22} true;
    $p44 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 720, 15} true;
    call $p45 := strdup($p44);
    call {:cexpr "devpath"} boogie_si_record_ref($p45);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 722, 9} true;
    $i46 := (if $p45 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 722, 9} true;
    assume {:branchcond $i46} true;
    goto $bb15, $bb16;

  $bb15:
    assume {:partition} $i46 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 723, 6} true;
    $i47 := NULL - 12;
    goto $bb17;

  $bb16:
    assume {:partition} !($i46 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 727, 12} true;
    call $p48 := _Znwm(208);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 727, 12} true;
    $p49 := $p48;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 727, 57} true;
    $p50 := $p5 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 727, 57} true;
    assert !aliasQ2418($p5, NULL);
    $i51 := $M.2[$p50];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 727, 12} true;
    call _ZN4uORB10DeviceNodeC2EPK12orb_metadataPKcS5_ij($p49, $p7, $p43, $p45, $i51, 1);
    call {:cexpr "node"} boogie_si_record_ref($p48);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 730, 9} true;
    $i52 := (if $p49 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 730, 9} true;
    assume {:branchcond $i52} true;
    goto $bb18, $bb19;

  $bb17:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 774, 3} true;
    call _ZN9SmartLockD2Ev($p1);
    $i15 := $i47;
    goto $bb5;

  $bb18:
    assume {:partition} $i52 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 731, 6} true;
    call free_($p45);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 732, 6} true;
    $i47 := NULL - 12;
    goto $bb17;

  $bb19:
    assume {:partition} !($i52 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 736, 11} true;
    $p53 := $p49;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 736, 11} true;
    $p54 := $p53;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 736, 11} true;
    assert !aliasQ2419($p54, NULL);
    $p55 := $M.2[$p54];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 736, 11} true;
    $p56 := $p55 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 736, 11} true;
    assert !aliasQ2420($p55, NULL);
    $p57 := $M.2[$p56];
    call $i58 := devirtbounce11($p57, $p53);
    call {:cexpr "ret"} boogie_si_record_i32($i58);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 739, 9} true;
    $i59 := (if $i58 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 739, 9} true;
    assume {:branchcond $i59} true;
    goto $bb20, $bb21;

  $bb20:
    assume {:partition} $i59 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 740, 6} true;
    $i60 := (if $p49 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 740, 6} true;
    assume {:branchcond $i60} true;
    goto $bb22, $bb24;

  $bb21:
    assume {:partition} !($i59 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 761, 28} true;
    $p71 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 761, 6} true;
    call _ZNSaIcEC1Ev($p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 761, 6} true;
    call _ZNSsC1EPKcRKSaIcE($p2, $p71, $p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 761, 6} true;
    call $p72 := _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEEixEOSs(_ZN4uORB12DeviceMaster9_node_mapE, $p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 761, 6} true;
    assert !aliasQ2421($p72, NULL);
    $M.2 := $M.2[$p72 := $p48];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 761, 6} true;
    call _ZNSsD1Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 761, 6} true;
    call _ZNSaIcED1Ev($p3);
    $i70 := $i58;
    goto $bb32;

  $bb22:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 740, 6} true;
    assume {:partition} $i60 == 1;
    goto $bb23;

  $bb23:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 742, 10} true;
    $i65 := (if $i58 == NULL - 17 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 742, 10} true;
    $i66 := $i58;
    assume {:branchcond $i65} true;
    goto $bb25, $bb26;

  $bb24:
    assume {:partition} !($i60 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 740, 6} true;
    $p61 := $p49;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 740, 6} true;
    assert !aliasQ2422($p61, NULL);
    $p62 := $M.2[$p61];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 740, 6} true;
    $p63 := $p62 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 740, 6} true;
    assert !aliasQ2423($p62, NULL);
    $p64 := $M.2[$p63];
    call devirtbounce12($p64, $p49);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 740, 6} true;
    goto $bb23;

  $bb25:
    assume {:partition} $i65 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 745, 41} true;
    call $p67 := _ZN4uORB12DeviceMaster13GetDeviceNodeEPKc($p45);
    call {:cexpr "existing_node"} boogie_si_record_ref($p67);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 747, 12} true;
    $i68 := (if $p67 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 747, 11} true;
    $i66 := $i58;
    assume {:branchcond $i68} true;
    goto $bb28, $bb29;

  $bb26:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 742, 10} true;
    assume {:partition} !($i65 == 1);
    goto $bb27;

  $bb27:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 757, 6} true;
    call free_($p45);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 759, 5} true;
    $i70 := $i66;
    goto $bb32;

  $bb28:
    assume {:partition} $i68 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 747, 43} true;
    call $i69 := _ZN4uORB10DeviceNode12is_publishedEv($p67);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 747, 11} true;
    $i66 := $i58;
    assume {:branchcond $i69} true;
    goto $bb30, $bb31;

  $bb29:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 747, 11} true;
    assume {:partition} !($i68 == 1);
    goto $bb27;

  $bb30:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 747, 11} true;
    assume {:partition} $i69 == 1;
    goto $bb27;

  $bb31:
    assume {:partition} !($i69 == 1);
    call {:cexpr "ret"} boogie_si_record_i32(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 751, 7} true;
    $i66 := NULL;
    goto $bb27;

  $bb32:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 765, 5} true;
    $i73 := $i30 + 1;
    call {:cexpr "group_tries"} boogie_si_record_i32($i73);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 767, 13} true;
    $i74 := (if $i70 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 767, 13} true;
    assume {:branchcond $i74} true;
    goto $bb33, $bb34;

  $bb33:
    assume {:partition} $i74 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 767, 31} true;
    $i75 := (if $i73 < $i19 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 767, 4} true;
    $i30 := $i73;
    assume {:branchcond $i75} true;
    goto $bb36, $bb37;

  $bb34:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 767, 13} true;
    assume {:partition} !($i74 == 1);
    goto $bb35;

  $bb35:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 769, 8} true;
    $i76 := (if $i70 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 769, 8} true;
    $i77 := $i70;
    assume {:branchcond $i76} true;
    goto $bb38, $bb39;

  $bb36:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 767, 4} true;
    assume {:partition} $i75 == 1;
    goto $bb11;

  $bb37:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 767, 4} true;
    assume {:partition} !($i75 == 1);
    goto $bb35;

  $bb38:
    assume {:partition} $i76 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 769, 25} true;
    $i78 := (if $i73 >= $i19 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 769, 8} true;
    $i77 := $i70;
    assume {:branchcond $i78} true;
    goto $bb41, $bb42;

  $bb39:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 769, 8} true;
    assume {:partition} !($i76 == 1);
    goto $bb40;

  $bb40:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 773, 4} true;
    $i47 := $i77;
    goto $bb17;

  $bb41:
    assume {:partition} $i78 == 1;
    call {:cexpr "ret"} boogie_si_record_i32(NULL - 12);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 771, 4} true;
    $i77 := NULL - 12;
    goto $bb40;

  $bb42:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 769, 8} true;
    assume {:partition} !($i78 == 1);
    goto $bb40;
}



const strlen: int;

axiom strlen == NULL - 8376;

procedure strlen($p0: int) returns ($r: int);



const strdup: int;

axiom strdup == NULL - 8384;

procedure strdup($p0: int) returns ($r: int);



const free_: int;

axiom free_ == NULL - 8392;

procedure free_($p0: int);



implementation free_($p0: int)
{

  anon0:
    call $free($p0);
    return;
}



const _ZN4uORB12DeviceMaster13GetDeviceNodeEPKc: int;

axiom _ZN4uORB12DeviceMaster13GetDeviceNodeEPKc == NULL - 8400;

procedure _ZN4uORB12DeviceMaster13GetDeviceNodeEPKc(nodepath: int) returns ($r: int);



implementation _ZN4uORB12DeviceMaster13GetDeviceNodeEPKc(nodepath: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p2"} $p5: int;
  var $p6: int;
  var {:base "$p3"} $p7: int;
  var {:scalar} $i8: int;
  var $p10: int;
  var {:base "$p10"} $p11: int;
  var $p12: int;
  var $p9: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(1 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(8 * 1);
    call {:cexpr "nodepath"} boogie_si_record_ref(nodepath);
    call {:cexpr "rc"} boogie_si_record_ref(NULL);
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 785, 14} true;
    call _ZNSaIcEC1Ev($p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 785, 14} true;
    call _ZNSsC1EPKcRKSaIcE($p0, nodepath, $p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 785, 14} true;
    call _ZNSaIcED1Ev($p1);
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 787, 14} true;
    call $p4 := _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE4findERS6_(_ZN4uORB12DeviceMaster9_node_mapE, $p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 787, 14} true;
    $p5 := $p2;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 787, 14} true;
    assert !aliasQ2424($p2, NULL);
    $M.93 := $M.93[$p5 := $p4];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 789, 14} true;
    call $p6 := _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE3endEv(_ZN4uORB12DeviceMaster9_node_mapE);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 789, 14} true;
    $p7 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 789, 14} true;
    assert !aliasQ2425($p3, NULL);
    $M.94 := $M.94[$p7 := $p6];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 789, 6} true;
    call $i8 := _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEneERKS6_($p2, $p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 789, 6} true;
    $p9 := NULL;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i8 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 790, 8} true;
    call $p10 := _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEptEv($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 790, 8} true;
    $p11 := $p10 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 790, 8} true;
    assert !aliasQ2426($p10, NULL);
    $p12 := $M.2[$p11];
    call {:cexpr "rc"} boogie_si_record_ref($p12);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 791, 2} true;
    $p9 := $p12;
    goto $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 789, 6} true;
    assume {:partition} !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 794, 1} true;
    call _ZNSsD1Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 794, 1} true;
    $r := $p9;
    $exn := false;
    return;
}



const _ZNSaIcEC1Ev: int;

axiom _ZNSaIcEC1Ev == NULL - 8408;

procedure _ZNSaIcEC1Ev($p0: int);



const _ZNSsC1EPKcRKSaIcE: int;

axiom _ZNSsC1EPKcRKSaIcE == NULL - 8416;

procedure _ZNSsC1EPKcRKSaIcE($p0: int, $p1: int, $p2: int);



const _ZNSsD1Ev: int;

axiom _ZNSsD1Ev == NULL - 8424;

procedure _ZNSsD1Ev($p0: int);



const _ZNSaIcED1Ev: int;

axiom _ZNSaIcED1Ev == NULL - 8432;

procedure _ZNSaIcED1Ev($p0: int);



const _ZN6device4VDev4initEv: int;

axiom _ZN6device4VDev4initEv == NULL - 8440;

procedure _ZN6device4VDev4initEv($p0: int) returns ($r: int);



const _ZN6device6Device8dev_readEjPvj: int;

axiom _ZN6device6Device8dev_readEjPvj == NULL - 8448;

procedure _ZN6device6Device8dev_readEjPvj($p0: int, {:scalar} $i1: int, $p2: int, {:scalar} $i3: int) returns ($r: int);



const _ZN6device6Device9dev_writeEjPvj: int;

axiom _ZN6device6Device9dev_writeEjPvj == NULL - 8456;

procedure _ZN6device6Device9dev_writeEjPvj($p0: int, {:scalar} $i1: int, $p2: int, {:scalar} $i3: int) returns ($r: int);



const _ZN6device6Device9dev_ioctlEjj: int;

axiom _ZN6device6Device9dev_ioctlEjj == NULL - 8464;

procedure _ZN6device6Device9dev_ioctlEjj($p0: int, {:scalar} $i1: int, {:scalar} $i2: int) returns ($r: int);



const _ZN6device4VDev4pollEPNS_6file_tEP19px4_pollfd_struct_tb: int;

axiom _ZN6device4VDev4pollEPNS_6file_tEP19px4_pollfd_struct_tb == NULL - 8472;

procedure _ZN6device4VDev4pollEPNS_6file_tEP19px4_pollfd_struct_tb($p0: int, $p1: int, $p2: int, {:scalar} $i3: int) returns ($r: int);



const _ZN6device4VDev4seekEPNS_6file_tEli: int;

axiom _ZN6device4VDev4seekEPNS_6file_tEli == NULL - 8480;

procedure _ZN6device4VDev4seekEPNS_6file_tEli($p0: int, $p1: int, {:scalar} $i2: int, {:scalar} $i3: int) returns ($r: int);



const _ZN6device4VDev11poll_notifyEs: int;

axiom _ZN6device4VDev11poll_notifyEs == NULL - 8488;

procedure _ZN6device4VDev11poll_notifyEs($p0: int, {:scalar} $i1: int);



const _ZN6device4VDev10open_firstEPNS_6file_tE: int;

axiom _ZN6device4VDev10open_firstEPNS_6file_tE == NULL - 8496;

procedure _ZN6device4VDev10open_firstEPNS_6file_tE($p0: int, $p1: int) returns ($r: int);



const _ZN6device4VDev10close_lastEPNS_6file_tE: int;

axiom _ZN6device4VDev10close_lastEPNS_6file_tE == NULL - 8504;

procedure _ZN6device4VDev10close_lastEPNS_6file_tE($p0: int, $p1: int) returns ($r: int);



const _ZN6device4VDev22register_class_devnameEPKc: int;

axiom _ZN6device4VDev22register_class_devnameEPKc == NULL - 8512;

procedure _ZN6device4VDev22register_class_devnameEPKc($p0: int, $p1: int) returns ($r: int);



const _ZN6device4VDev24unregister_class_devnameEPKcj: int;

axiom _ZN6device4VDev24unregister_class_devnameEPKcj == NULL - 8520;

procedure _ZN6device4VDev24unregister_class_devnameEPKcj($p0: int, $p1: int, {:scalar} $i2: int) returns ($r: int);



const _ZN6device4VDev4readEPNS_6file_tEPcm: int;

axiom _ZN6device4VDev4readEPNS_6file_tEPcm == NULL - 8528;

procedure _ZN6device4VDev4readEPNS_6file_tEPcm($p0: int, $p1: int, $p2: int, {:scalar} $i3: int) returns ($r: int);



const _ZN6device4VDev5writeEPNS_6file_tEPKcm: int;

axiom _ZN6device4VDev5writeEPNS_6file_tEPKcm == NULL - 8536;

procedure _ZN6device4VDev5writeEPNS_6file_tEPKcm($p0: int, $p1: int, $p2: int, {:scalar} $i3: int) returns ($r: int);



const _ZN6device4VDev10poll_stateEPNS_6file_tE: int;

axiom _ZN6device4VDev10poll_stateEPNS_6file_tE == NULL - 8544;

procedure _ZN6device4VDev10poll_stateEPNS_6file_tE($p0: int, $p1: int) returns ($r: int);



const _ZNKSs7compareERKSs: int;

axiom _ZNKSs7compareERKSs == NULL - 8552;

procedure _ZNKSs7compareERKSs($p0: int, $p1: int) returns ($r: int);



const _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_: int;

axiom _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ == NULL - 8560;

procedure _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_({:scalar} $i0: int, $p1: int, $p2: int, $p3: int);



const _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base: int;

axiom _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base == NULL - 8568;

procedure _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base($p0: int) returns ($r: int);



const _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base: int;

axiom _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base == NULL - 8576;

procedure _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base($p0: int) returns ($r: int);



const _ZNSsC1EOSs: int;

axiom _ZNSsC1EOSs == NULL - 8584;

procedure _ZNSsC1EOSs($p0: int, $p1: int);



const _ZSt17__throw_bad_allocv: int;

axiom _ZSt17__throw_bad_allocv == NULL - 8592;

procedure _ZSt17__throw_bad_allocv();



const sem_post: int;

axiom sem_post == NULL - 8600;

procedure sem_post($p0: int) returns ($r: int);



const sem_wait: int;

axiom sem_wait == NULL - 8608;

procedure sem_wait($p0: int) returns ($r: int);



const uorb_main: int;

axiom uorb_main == NULL - 8616;

procedure uorb_main({:scalar} argc: int, argv: int) returns ({:scalar} $r: int);



implementation uorb_main(argc: int, argv: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:base "argv"} $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var $p6: int;
  var {:scalar} $i7: int;
  var {:scalar} $i8: int;
  var $p9: int;
  var $p10: int;
  var $p11: int;
  var {:scalar} $i12: int;
  var $p13: int;
  var $p14: int;
  var $p15: int;
  var $p16: int;
  var {:base "$p16"} $p17: int;
  var $p18: int;
  var {:scalar} $i19: int;
  var {:scalar} $i20: int;
  var $p21: int;
  var {:scalar} $i22: int;
  var $p23: int;
  var $p24: int;
  var {:base "$p24"} $p25: int;
  var $p26: int;
  var {:base "argv"} $p27: int;
  var $p28: int;
  var {:scalar} $i29: int;
  var {:scalar} $i30: int;
  var $p31: int;
  var {:scalar} $i32: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "argc"} boogie_si_record_i32(argc);
    call {:cexpr "argv"} boogie_si_record_ref(argv);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 51, 6} true;
    $i0 := (if argc < 2 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 51, 6} true;
    assume {:branchcond $i0} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i0 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 52, 3} true;
    call _ZL5usagev();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 53, 3} true;
    $i1 := NULL - 22;
    goto $bb3;

  $bb2:
    assume {:partition} !($i0 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 61, 14} true;
    $p2 := argv + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 61, 14} true;
    assert !aliasQ2427(argv, NULL);
    $p3 := $M.95[$p2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 61, 7} true;
    call $i4 := strcmp($p3, .str321430);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 61, 7} true;
    $i5 := (if $i4 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 61, 6} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 108, 1} true;
    $r := $i1;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i5 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 95, 14} true;
    $p27 := argv + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 95, 14} true;
    assert !aliasQ2428(argv, NULL);
    $p28 := $M.95[$p27];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 95, 7} true;
    call $i29 := strcmp($p28, .str6381436);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 95, 7} true;
    $i30 := (if $i29 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 95, 6} true;
    assume {:branchcond $i30} true;
    goto $bb17, $bb18;

  $bb5:
    assume {:partition} !($i5 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 63, 7} true;
    $p6 := $M.96;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 63, 7} true;
    $i7 := (if $p6 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 63, 7} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb6:
    assume {:partition} $i7 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 64, 4} true;
    call px4_log_modulename.i32.ref.ref(2, .str1331431, .str2341432);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 66, 4} true;
    $i1 := NULL;
    goto $bb3;

  $bb7:
    assume {:partition} !($i7 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 69, 8} true;
    call $i8 := _ZN4uORB7Manager10initializeEv();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 69, 7} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb8:
    assume {:partition} $i8 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 75, 11} true;
    call $p9 := _Znwm(160);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 75, 11} true;
    $p10 := $p9;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 75, 11} true;
    call _ZN4uORB12DeviceMasterC2ENS_6FlavorE($p10, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 75, 3} true;
    $M.96 := $p9;
    call {:cexpr "_ZL5g_dev"} boogie_si_record_ref($p9);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 77, 7} true;
    $p11 := $M.96;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 77, 7} true;
    $i12 := (if $p11 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 77, 7} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb9:
    assume {:partition} !($i8 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 70, 4} true;
    call px4_log_modulename.i32.ref.ref(3, .str1331431, .str3351433);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 71, 4} true;
    $i1 := NULL - 12;
    goto $bb3;

  $bb10:
    assume {:partition} $i12 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 78, 4} true;
    call px4_log_modulename.i32.ref.ref(3, .str1331431, .str4361434);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 79, 4} true;
    $i1 := NULL - 12;
    goto $bb3;

  $bb11:
    assume {:partition} !($i12 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 82, 13} true;
    $p13 := $M.96;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 82, 13} true;
    $p14 := $p13;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 82, 13} true;
    $p15 := $p14;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 82, 13} true;
    assert !aliasQ2429($p15, NULL);
    $p16 := $M.2[$p15];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 82, 13} true;
    $p17 := $p16 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 82, 13} true;
    assert !aliasQ2430($p16, NULL);
    $p18 := $M.2[$p17];
    call $i19 := devirtbounce11($p18, $p14);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 82, 7} true;
    $i20 := (if NULL != $i19 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 82, 7} true;
    assume {:branchcond $i20} true;
    goto $bb12, $bb13;

  $bb12:
    assume {:partition} $i20 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 83, 4} true;
    call px4_log_modulename.i32.ref.ref(3, .str1331431, .str5371435);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 84, 11} true;
    $p21 := $M.96;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 84, 4} true;
    $i22 := (if $p21 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 84, 4} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb16;

  $bb13:
    assume {:partition} !($i20 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 89, 3} true;
    $i1 := NULL;
    goto $bb3;

  $bb14:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 84, 4} true;
    assume {:partition} $i22 == 1;
    goto $bb15;

  $bb15:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 85, 4} true;
    $M.96 := NULL;
    call {:cexpr "_ZL5g_dev"} boogie_si_record_ref(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 86, 4} true;
    $i1 := NULL - 5;
    goto $bb3;

  $bb16:
    assume {:partition} !($i22 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 84, 4} true;
    $p23 := $p21;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 84, 4} true;
    assert !aliasQ2431($p23, NULL);
    $p24 := $M.2[$p23];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 84, 4} true;
    $p25 := $p24 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 84, 4} true;
    assert !aliasQ2432($p24, NULL);
    $p26 := $M.2[$p25];
    call devirtbounce13($p26, $p21);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 84, 4} true;
    goto $bb15;

  $bb17:
    assume {:partition} $i30 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 106, 2} true;
    call _ZL5usagev();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 107, 2} true;
    $i1 := NULL - 22;
    goto $bb3;

  $bb18:
    assume {:partition} !($i30 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 96, 7} true;
    $p31 := $M.96;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 96, 7} true;
    $i32 := (if $p31 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 96, 7} true;
    assume {:branchcond $i32} true;
    goto $bb19, $bb20;

  $bb19:
    assume {:partition} $i32 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 97, 4} true;
    call px4_log_modulename.i32.ref.ref(NULL, .str1331431, .str7391437);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 99, 3} true;
    goto $bb21;

  $bb20:
    assume {:partition} !($i32 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 100, 4} true;
    call px4_log_modulename.i32.ref.ref(NULL, .str1331431, .str8401438);
    goto $bb21;

  $bb21:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 103, 3} true;
    $i1 := NULL;
    goto $bb3;
}



const strcmp: int;

axiom strcmp == NULL - 8624;

procedure strcmp($p0: int, $p1: int) returns ($r: int);



const _ZN4uORB7Manager10initializeEv: int;

axiom _ZN4uORB7Manager10initializeEv == NULL - 8632;

procedure _ZN4uORB7Manager10initializeEv() returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager10initializeEv() returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var {:scalar} $i5: int;

  $bb0:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 55, 6} true;
    $p0 := $M.97;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 55, 6} true;
    $i1 := (if $p0 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 55, 6} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i1 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 56, 15} true;
    call $p2 := _Znwm(64);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 56, 15} true;
    $p3 := $p2;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 56, 15} true;
    call _ZN4uORB7ManagerC2Ev($p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 56, 3} true;
    $M.97 := $p2;
    call {:cexpr "_ZN4uORB7Manager9_InstanceE"} boogie_si_record_ref($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 57, 2} true;
    goto $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 55, 6} true;
    assume {:partition} !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 59, 9} true;
    $p4 := $M.97;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 59, 9} true;
    $i5 := (if $p4 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 59, 2} true;
    $r := $i5;
    $exn := false;
    return;
}



const _ZN4uORB7ManagerC2Ev: int;

axiom _ZN4uORB7ManagerC2Ev == NULL - 8640;

procedure _ZN4uORB7ManagerC2Ev(this: int);



implementation _ZN4uORB7ManagerC2Ev(this: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "this"} $p2: int;
  var {:base "this"} $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 66, 1} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 66, 1} true;
    call _ZN16uORBCommunicator17IChannelRxHandlerC2Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 66, 1} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 66, 1} true;
    assert !aliasQ2433($p1, NULL);
    $M.2 := $M.2[$p1 := _ZTVN4uORB7ManagerE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 65, 4} true;
    $p2 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 65, 4} true;
    assert !aliasQ2434(this, NULL);
    $M.2 := $M.2[$p2 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 64, 16} true;
    $p3 := this + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 64, 16} true;
    call _ZNSt3setISsSt4lessISsESaISsEEC2Ev($p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 82, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB7Manager10orb_existsEPK12orb_metadatai: int;

axiom _ZN4uORB7Manager10orb_existsEPK12orb_metadatai == NULL - 8648;

procedure _ZN4uORB7Manager10orb_existsEPK12orb_metadatai(this: int, meta: int, {:scalar} instance: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager10orb_existsEPK12orb_metadatai(this: int, meta: int, instance: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p0"} $p2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var $p6: int;
  var {:base "$p0"} $p8: int;
  var {:scalar} $i9: int;
  var {:scalar} $i7: int;

  $bb0:
    call $p0 := $alloc(64 * 1);
    call $p1 := $alloc(4 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    assume true;
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 90, 6} true;
    assert !aliasQ2435($p1, NULL);
    $M.98 := $M.98[$p1 := instance];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 91, 37} true;
    $p2 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 91, 12} true;
    call $i3 := _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPK12orb_metadataPi($p2, NULL, meta, $p1);
    call {:cexpr "ret"} boogie_si_record_i32($i3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 93, 6} true;
    $i4 := (if $i3 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 93, 6} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i4 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 94, 11} true;
    $i5 := NULL - $i3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 94, 3} true;
    call $p6 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 94, 3} true;
    assert !aliasQ2436($p6, NULL);
    $M.99 := $M.99[$p6 := $i5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 95, 3} true;
    $i7 := NULL - 1;
    goto $bb3;

  $bb2:
    assume {:partition} !($i4 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 102, 20} true;
    $p8 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 102, 9} true;
    call $i9 := px4_access($p8, NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 102, 2} true;
    $i7 := $i9;
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 104, 1} true;
    $r := $i7;
    $exn := false;
    return;
}



const px4_access: int;

axiom px4_access == NULL - 8656;

procedure px4_access($p0: int, {:scalar} $i1: int) returns ($r: int);



const _ZN4uORB7Manager13orb_advertiseEPK12orb_metadataPKvj: int;

axiom _ZN4uORB7Manager13orb_advertiseEPK12orb_metadataPKvj == NULL - 8664;

procedure _ZN4uORB7Manager13orb_advertiseEPK12orb_metadataPKvj(this: int, meta: int, data: int, {:scalar} queue_size: int) returns ($r: int);



implementation _ZN4uORB7Manager13orb_advertiseEPK12orb_metadataPKvj(this: int, meta: int, data: int, queue_size: int) returns ($r: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "data"} boogie_si_record_ref(data);
    call {:cexpr "queue_size"} boogie_si_record_i32(queue_size);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 109, 9} true;
    call $p0 := _ZN4uORB7Manager19orb_advertise_multiEPK12orb_metadataPKvPiij(this, meta, data, NULL, 75, queue_size);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 109, 2} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN4uORB7Manager19orb_advertise_multiEPK12orb_metadataPKvPiij: int;

axiom _ZN4uORB7Manager19orb_advertise_multiEPK12orb_metadataPKvPiij == NULL - 8672;

procedure _ZN4uORB7Manager19orb_advertise_multiEPK12orb_metadataPKvPiij(this: int, meta: int, data: int, instance: int, {:scalar} priority: int, {:scalar} queue_size: int) returns ($r: int);



implementation _ZN4uORB7Manager19orb_advertise_multiEPK12orb_metadataPKvPiij(this: int, meta: int, data: int, instance: int, priority: int, queue_size: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;
  var {:scalar} $i7: int;
  var {:scalar} $i8: int;
  var {:scalar} $i9: int;
  var {:scalar} $i10: int;
  var {:scalar} $i11: int;
  var {:scalar} $i12: int;
  var $p13: int;
  var {:scalar} $i14: int;
  var {:scalar} $i15: int;
  var $p16: int;
  var $p3: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "data"} boogie_si_record_ref(data);
    call {:cexpr "instance"} boogie_si_record_ref(instance);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "queue_size"} boogie_si_record_i32(queue_size);
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 145, 7} true;
    call $i1 := _ZN4uORB7Manager9node_openENS_6FlavorEPK12orb_metadataPKvbPii(this, NULL, meta, data, 1, instance, priority);
    call {:cexpr "fd"} boogie_si_record_i32($i1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 147, 6} true;
    $i2 := (if $i1 == NULL - 1 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 147, 6} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i2 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 148, 3} true;
    call px4_log_modulename.i32.ref.ref(2, .str751439, .str1761440);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 149, 3} true;
    $p3 := NULL;
    goto $bb3;

  $bb2:
    assume {:partition} !($i2 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 155, 60} true;
    $i4 := queue_size;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 155, 11} true;
    call $i5 := px4_ioctl($i1, 2490383, $i4);
    call {:cexpr "result"} boogie_si_record_i32($i5);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 157, 6} true;
    $i6 := (if $i5 < NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 157, 20} true;
    $i7 := (if queue_size > 1 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 157, 6} true;
    $i8 := $and.i1($i6, $i7);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 157, 6} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 179, 1} true;
    $r := $p3;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i8 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 158, 3} true;
    call px4_log_modulename.i32.ref.ref(2, .str751439, .str2771441);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 159, 2} true;
    goto $bb6;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 157, 6} true;
    assume {:partition} !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 162, 44} true;
    $i9 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 162, 11} true;
    call $i10 := px4_ioctl($i1, 2490381, $i9);
    call {:cexpr "result"} boogie_si_record_i32($i10);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 163, 2} true;
    call $i11 := px4_close($i1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 165, 6} true;
    $i12 := (if $i10 == NULL - 1 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 165, 6} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb7:
    assume {:partition} $i12 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 166, 3} true;
    call px4_log_modulename.i32.ref.ref.i32(2, .str751439, .str3781442, $i1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 167, 3} true;
    $p3 := NULL;
    goto $bb3;

  $bb8:
    assume {:partition} !($i12 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 171, 29} true;
    assert !aliasQ2437($p0, NULL);
    $p13 := $M.100[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 171, 11} true;
    call $i14 := _ZN4uORB7Manager11orb_publishEPK12orb_metadataPvPKv(this, meta, $p13, data);
    call {:cexpr "result"} boogie_si_record_i32($i14);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 173, 6} true;
    $i15 := (if $i14 == NULL - 1 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 173, 6} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb9:
    assume {:partition} $i15 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 174, 3} true;
    call px4_log_modulename.i32.ref.ref(2, .str751439, .str4791443);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 175, 3} true;
    $p3 := NULL;
    goto $bb3;

  $bb10:
    assume {:partition} !($i15 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 178, 9} true;
    assert !aliasQ2438($p0, NULL);
    $p16 := $M.100[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 178, 2} true;
    $p3 := $p16;
    goto $bb3;
}



const _ZN4uORB7Manager9node_openENS_6FlavorEPK12orb_metadataPKvbPii: int;

axiom _ZN4uORB7Manager9node_openENS_6FlavorEPK12orb_metadataPKvbPii == NULL - 8680;

procedure _ZN4uORB7Manager9node_openENS_6FlavorEPK12orb_metadataPKvbPii(this: int, {:scalar} f: int, meta: int, data: int, {:scalar} advertiser: int, instance: int, {:scalar} priority: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager9node_openENS_6FlavorEPK12orb_metadataPKvbPii(this: int, f: int, meta: int, data: int, advertiser: int, instance: int, priority: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var $p3: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;
  var {:scalar} $i7: int;
  var $p8: int;
  var {:scalar} $i9: int;
  var {:scalar} $i10: int;
  var {:base "$p0"} $p11: int;
  var {:scalar} $i12: int;
  var {:scalar} $i13: int;
  var {:scalar} $i14: int;
  var $p15: int;
  var {:base "$p0"} $p16: int;
  var {:scalar} $i17: int;
  var {:scalar} $i18: int;
  var {:scalar} $i19: int;
  var {:scalar} $i20: int;
  var {:scalar} $i21: int;
  var {:scalar} $i23: int;
  var {:scalar} $i24: int;
  var {:base "$p0"} $p26: int;
  var {:scalar} $i27: int;
  var {:scalar} $i28: int;
  var {:scalar} $i29: int;
  var $p30: int;
  var {:scalar} $i25: int;
  var {:scalar} $i31: int;
  var {:base "$p0"} $p32: int;
  var {:scalar} $i33: int;
  var {:scalar} $i34: int;
  var {:scalar} $i35: int;
  var {:scalar} $i22: int;
  var {:scalar} $i36: int;
  var $p37: int;
  var {:scalar} $i4: int;

  $bb0:
    call $p0 := $alloc(64 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "f"} boogie_si_record_i32(f);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "data"} boogie_si_record_ref(data);
    $i1 := advertiser;
    call {:cexpr "advertiser"} boogie_si_record_i1(advertiser);
    call {:cexpr "instance"} boogie_si_record_ref(instance);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    assume true;
    call {:cexpr "fd"} boogie_si_record_i32(NULL - 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 326, 6} true;
    $i2 := (if NULL == meta then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 326, 6} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i2 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 327, 3} true;
    call $p3 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 327, 3} true;
    assert !aliasQ2439($p3, NULL);
    $M.101 := $M.101[$p3 := 2];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 328, 3} true;
    $i4 := NULL - 1;
    goto $bb3;

  $bb2:
    assume {:partition} !($i2 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 334, 6} true;
    $i5 := $i1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 334, 21} true;
    $i6 := (if data == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 334, 6} true;
    $i7 := $and.i1($i5, $i6);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 334, 6} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 388, 1} true;
    $r := $i4;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i7 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 335, 3} true;
    call $p8 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 335, 3} true;
    assert !aliasQ2440($p8, NULL);
    $M.102 := $M.102[$p8 := 22];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 336, 3} true;
    $i4 := NULL - 1;
    goto $bb3;

  $bb5:
    assume {:partition} !($i7 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 341, 7} true;
    $i9 := (if instance != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 341, 6} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb6:
    assume {:partition} $i9 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 341, 20} true;
    $i10 := $i1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 341, 6} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb7:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 341, 6} true;
    assume {:partition} !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 345, 34} true;
    $p11 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 345, 9} true;
    call $i12 := _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPK12orb_metadataPi($p11, f, meta, instance);
    call {:cexpr "ret"} boogie_si_record_i32($i12);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 347, 7} true;
    $i13 := (if $i12 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 347, 7} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb9:
    assume {:partition} $i10 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 356, 3} true;
    assert !aliasQ2441(instance, NULL);
    $M.2 := $M.2[instance := NULL];
    $i20 := NULL - 1;
    goto $bb13;

  $bb10:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 341, 6} true;
    assume {:partition} !($i10 == 1);
    goto $bb8;

  $bb11:
    assume {:partition} $i13 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 348, 12} true;
    $i14 := NULL - $i12;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 348, 4} true;
    call $p15 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 348, 4} true;
    assert !aliasQ2442($p15, NULL);
    $M.103 := $M.103[$p15 := $i14];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 349, 4} true;
    $i4 := NULL - 1;
    goto $bb3;

  $bb12:
    assume {:partition} !($i13 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 353, 17} true;
    $p16 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 353, 23} true;
    $i17 := $i1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 353, 23} true;
    $i18 := (if $i17 == 1 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 353, 8} true;
    call $i19 := px4_open.ref.i32($p16, $i18);
    call {:cexpr "fd"} boogie_si_record_i32($i19);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 355, 2} true;
    $i20 := $i19;
    goto $bb13;

  $bb13:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 360, 6} true;
    $i21 := (if $i20 < NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 360, 6} true;
    $i22 := $i20;
    assume {:branchcond $i21} true;
    goto $bb14, $bb15;

  $bb14:
    assume {:partition} $i21 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 363, 9} true;
    call $i23 := _ZN4uORB7Manager14node_advertiseEPK12orb_metadataPii(this, meta, instance, priority);
    call {:cexpr "ret"} boogie_si_record_i32($i23);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 365, 7} true;
    $i24 := (if $i23 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 365, 7} true;
    $i25 := $i23;
    assume {:branchcond $i24} true;
    goto $bb17, $bb18;

  $bb15:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 360, 6} true;
    assume {:partition} !($i21 == 1);
    goto $bb16;

  $bb16:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 381, 6} true;
    $i36 := (if $i22 < NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 381, 6} true;
    assume {:branchcond $i36} true;
    goto $bb24, $bb25;

  $bb17:
    assume {:partition} $i24 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 367, 35} true;
    $p26 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 367, 10} true;
    call $i27 := _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPK12orb_metadataPi($p26, f, meta, instance);
    call {:cexpr "ret"} boogie_si_record_i32($i27);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 369, 8} true;
    $i28 := (if $i27 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 369, 8} true;
    $i25 := $i27;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb18:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 365, 7} true;
    assume {:partition} !($i24 == 1);
    goto $bb19;

  $bb19:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 376, 7} true;
    $i31 := (if $i25 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 376, 7} true;
    $i22 := $i20;
    assume {:branchcond $i31} true;
    goto $bb22, $bb23;

  $bb20:
    assume {:partition} $i28 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 370, 13} true;
    $i29 := NULL - $i27;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 370, 5} true;
    call $p30 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 370, 5} true;
    assert !aliasQ2443($p30, NULL);
    $M.104 := $M.104[$p30 := $i29];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 371, 5} true;
    $i4 := NULL - 1;
    goto $bb3;

  $bb21:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 369, 8} true;
    assume {:partition} !($i28 == 1);
    goto $bb19;

  $bb22:
    assume {:partition} $i31 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 377, 18} true;
    $p32 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 377, 25} true;
    $i33 := $i1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 377, 24} true;
    $i34 := (if $i33 == 1 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 377, 9} true;
    call $i35 := px4_open.ref.i32($p32, $i34);
    call {:cexpr "fd"} boogie_si_record_i32($i35);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 378, 3} true;
    $i22 := $i35;
    goto $bb16;

  $bb23:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 376, 7} true;
    assume {:partition} !($i31 == 1);
    goto $bb16;

  $bb24:
    assume {:partition} $i36 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 382, 3} true;
    call $p37 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 382, 3} true;
    assert !aliasQ2444($p37, NULL);
    $M.105 := $M.105[$p37 := 5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 383, 3} true;
    $i4 := NULL - 1;
    goto $bb3;

  $bb25:
    assume {:partition} !($i36 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 387, 2} true;
    $i4 := $i22;
    goto $bb3;
}



const px4_ioctl: int;

axiom px4_ioctl == NULL - 8688;

procedure px4_ioctl({:scalar} $i0: int, {:scalar} $i1: int, {:scalar} $i2: int) returns ($r: int);



const px4_close: int;

axiom px4_close == NULL - 8696;

procedure px4_close({:scalar} $i0: int) returns ($r: int);



const _ZN4uORB7Manager11orb_publishEPK12orb_metadataPvPKv: int;

axiom _ZN4uORB7Manager11orb_publishEPK12orb_metadataPvPKv == NULL - 8704;

procedure _ZN4uORB7Manager11orb_publishEPK12orb_metadataPvPKv(this: int, meta: int, handle: int, data: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager11orb_publishEPK12orb_metadataPvPKv(this: int, meta: int, handle: int, data: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "handle"} boogie_si_record_ref(handle);
    call {:cexpr "data"} boogie_si_record_ref(data);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 220, 9} true;
    call $i0 := _ZN4uORB10DeviceNode7publishEPK12orb_metadataPvPKv(meta, handle, data);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 220, 9} true;
    $i1 := $i0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 220, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB7Manager15orb_unadvertiseEPv: int;

axiom _ZN4uORB7Manager15orb_unadvertiseEPv == NULL - 8712;

procedure _ZN4uORB7Manager15orb_unadvertiseEPv(this: int, handle: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager15orb_unadvertiseEPv(this: int, handle: int) returns ($r: int)
{
  var {:scalar} $i0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "handle"} boogie_si_record_ref(handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 191, 9} true;
    call $i0 := _ZN4uORB10DeviceNode11unadvertiseEPv(handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 191, 2} true;
    $r := $i0;
    $exn := false;
    return;
}



const _ZN4uORB7Manager13orb_subscribeEPK12orb_metadata: int;

axiom _ZN4uORB7Manager13orb_subscribeEPK12orb_metadata == NULL - 8720;

procedure _ZN4uORB7Manager13orb_subscribeEPK12orb_metadata(this: int, meta: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager13orb_subscribeEPK12orb_metadata(this: int, meta: int) returns ($r: int)
{
  var {:scalar} $i0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 196, 9} true;
    call $i0 := _ZN4uORB7Manager9node_openENS_6FlavorEPK12orb_metadataPKvbPii(this, NULL, meta, NULL, NULL, NULL, 75);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 196, 2} true;
    $r := $i0;
    $exn := false;
    return;
}



const _ZN4uORB7Manager19orb_subscribe_multiEPK12orb_metadataj: int;

axiom _ZN4uORB7Manager19orb_subscribe_multiEPK12orb_metadataj == NULL - 8728;

procedure _ZN4uORB7Manager19orb_subscribe_multiEPK12orb_metadataj(this: int, meta: int, {:scalar} instance: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager19orb_subscribe_multiEPK12orb_metadataj(this: int, meta: int, instance: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call $p0 := $alloc(4 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 201, 6} true;
    assert !aliasQ2445($p0, NULL);
    $M.106 := $M.106[$p0 := instance];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 202, 9} true;
    call $i1 := _ZN4uORB7Manager9node_openENS_6FlavorEPK12orb_metadataPKvbPii(this, NULL, meta, NULL, NULL, $p0, 75);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 202, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB7Manager15orb_unsubscribeEi: int;

axiom _ZN4uORB7Manager15orb_unsubscribeEi == NULL - 8736;

procedure _ZN4uORB7Manager15orb_unsubscribeEi(this: int, {:scalar} fd: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager15orb_unsubscribeEi(this: int, fd: int) returns ($r: int)
{
  var {:scalar} $i0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "fd"} boogie_si_record_i32(fd);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 207, 9} true;
    call $i0 := px4_close(fd);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 207, 2} true;
    $r := $i0;
    $exn := false;
    return;
}



const _ZN4uORB7Manager8orb_copyEPK12orb_metadataiPv: int;

axiom _ZN4uORB7Manager8orb_copyEPK12orb_metadataiPv == NULL - 8744;

procedure _ZN4uORB7Manager8orb_copyEPK12orb_metadataiPv(this: int, meta: int, {:scalar} handle: int, buffer: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager8orb_copyEPK12orb_metadataiPv(this: int, meta: int, handle: int, buffer: int) returns ($r: int)
{
  var {:base "meta"} $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;
  var {:base "meta"} $p6: int;
  var {:scalar} $i7: int;
  var {:scalar} $i8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var {:scalar} $i5: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "buffer"} boogie_si_record_ref(buffer);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 227, 33} true;
    $p0 := meta + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 227, 33} true;
    assert !aliasQ2446(meta, NULL);
    $i1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 227, 8} true;
    call $i2 := px4_read(handle, buffer, $i1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 227, 8} true;
    $i3 := $i2;
    call {:cexpr "ret"} boogie_si_record_i32($i3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 229, 6} true;
    $i4 := (if $i3 < NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 229, 6} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i4 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 230, 3} true;
    $i5 := NULL - 1;
    goto $bb3;

  $bb2:
    assume {:partition} !($i4 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 233, 18} true;
    $p6 := meta + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 233, 18} true;
    assert !aliasQ2447(meta, NULL);
    $i7 := $M.2[$p6];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 233, 18} true;
    $i8 := $i7;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 233, 6} true;
    $i9 := (if $i3 != $i8 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 233, 6} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 239, 1} true;
    $r := $i5;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i9 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 234, 3} true;
    call $p10 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 234, 3} true;
    assert !aliasQ2448($p10, NULL);
    $M.107 := $M.107[$p10 := 5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 235, 3} true;
    $i5 := NULL - 1;
    goto $bb3;

  $bb5:
    assume {:partition} !($i9 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 238, 2} true;
    $i5 := NULL;
    goto $bb3;
}



const px4_read: int;

axiom px4_read == NULL - 8752;

procedure px4_read({:scalar} $i0: int, $p1: int, {:scalar} $i2: int) returns ($r: int);



const _ZN4uORB7Manager9orb_checkEiPb: int;

axiom _ZN4uORB7Manager9orb_checkEiPb == NULL - 8760;

procedure _ZN4uORB7Manager9orb_checkEiPb(this: int, {:scalar} handle: int, updated: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager9orb_checkEiPb(this: int, handle: int, updated: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "updated"} boogie_si_record_ref(updated);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 244, 2} true;
    assert !aliasQ2449(updated, NULL);
    $M.8 := $M.8[updated := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 245, 57} true;
    $i0 := updated;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 245, 9} true;
    call $i1 := px4_ioctl(handle, 2490379, $i0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 245, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB7Manager8orb_statEiPm: int;

axiom _ZN4uORB7Manager8orb_statEiPm == NULL - 8768;

procedure _ZN4uORB7Manager8orb_statEiPm(this: int, {:scalar} handle: int, time: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager8orb_statEiPm(this: int, handle: int, time: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "time"} boogie_si_record_ref(time);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 250, 60} true;
    $i0 := time;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 250, 9} true;
    call $i1 := px4_ioctl(handle, 2490378, $i0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 250, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB7Manager12orb_priorityEiPi: int;

axiom _ZN4uORB7Manager12orb_priorityEiPi == NULL - 8776;

procedure _ZN4uORB7Manager12orb_priorityEiPi(this: int, {:scalar} handle: int, priority: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager12orb_priorityEiPi(this: int, handle: int, priority: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "priority"} boogie_si_record_ref(priority);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 255, 59} true;
    $i0 := priority;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 255, 9} true;
    call $i1 := px4_ioctl(handle, 2490382, $i0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 255, 2} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB7Manager16orb_set_intervalEij: int;

axiom _ZN4uORB7Manager16orb_set_intervalEij == NULL - 8784;

procedure _ZN4uORB7Manager16orb_set_intervalEij(this: int, {:scalar} handle: int, {:scalar} interval: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager16orb_set_intervalEij(this: int, handle: int, interval: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 260, 46} true;
    $i0 := interval * 1000;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 260, 46} true;
    $i1 := $i0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 260, 9} true;
    call $i2 := px4_ioctl(handle, 2490380, $i1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 260, 2} true;
    $r := $i2;
    $exn := false;
    return;
}



const _ZN4uORB7Manager16orb_get_intervalEiPj: int;

axiom _ZN4uORB7Manager16orb_get_intervalEiPj == NULL - 8792;

procedure _ZN4uORB7Manager16orb_get_intervalEiPj(this: int, {:scalar} handle: int, interval: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager16orb_get_intervalEiPj(this: int, handle: int, interval: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "handle"} boogie_si_record_i32(handle);
    call {:cexpr "interval"} boogie_si_record_ref(interval);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 265, 2} true;
    $i0 := (if interval != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 265, 2} true;
    assume {:branchcond $i0} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i0 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 266, 49} true;
    $i1 := interval;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 266, 12} true;
    call $i2 := px4_ioctl(handle, 2490384, $i1);
    call {:cexpr "ret"} boogie_si_record_i32($i2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 267, 2} true;
    assert !aliasQ2450(interval, NULL);
    $i3 := $M.108[interval];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 267, 2} true;
    $i4 := $udiv.i32($i3, 1000);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 267, 2} true;
    assert !aliasQ2451(interval, NULL);
    $M.108 := $M.108[interval := $i4];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 268, 2} true;
    $r := $i2;
    $exn := false;
    return;

  $bb2:
    assume {:partition} !($i0 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 265, 2} true;
    call __assert_fail(.str5801444, .str6811445, 265, __PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 265, 2} true;
    assume false;
    return;
}



const __assert_fail: int;

axiom __assert_fail == NULL - 8800;

procedure __assert_fail($p0: int, $p1: int, {:scalar} $i2: int, $p3: int);



const _ZN4uORB7Manager14node_advertiseEPK12orb_metadataPii: int;

axiom _ZN4uORB7Manager14node_advertiseEPK12orb_metadataPii == NULL - 8808;

procedure _ZN4uORB7Manager14node_advertiseEPK12orb_metadataPii(this: int, meta: int, instance: int, {:scalar} priority: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager14node_advertiseEPK12orb_metadataPii(this: int, meta: int, instance: int, priority: int) returns ($r: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var {:base "$p0"} $p2: int;
  var {:base "$p0"} $p3: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i7: int;
  var {:scalar} $i8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var {:scalar} $i11: int;
  var {:scalar} $i12: int;
  var {:scalar} $i6: int;
  var {:scalar} $i13: int;
  var {:scalar} $i14: int;

  $bb0:
    call $p0 := $alloc(24 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "instance"} boogie_si_record_ref(instance);
    call {:cexpr "priority"} boogie_si_record_i32(priority);
    call {:cexpr "fd"} boogie_si_record_i32(NULL - 1);
    call {:cexpr "ret"} boogie_si_record_i32(NULL - 1);
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 283, 30} true;
    $p1 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 283, 30} true;
    assert !aliasQ2452($p0, NULL);
    $M.109 := $M.109[$p1 := meta];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 283, 30} true;
    $p2 := $p0 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 283, 30} true;
    assert !aliasQ2453($p0, NULL);
    $M.110 := $M.110[$p2 := instance];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 283, 30} true;
    $p3 := $p0 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 283, 30} true;
    assert !aliasQ2454($p0, NULL);
    $M.111 := $M.111[$p3 := priority];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 286, 7} true;
    call $i4 := px4_open.ref.i32(.str7821446, NULL);
    call {:cexpr "fd"} boogie_si_record_i32($i4);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 288, 6} true;
    $i5 := (if $i4 < NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 288, 6} true;
    $i6 := NULL - 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb1:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 288, 6} true;
    assume {:partition} $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 302, 6} true;
    $i13 := (if $i4 >= NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 302, 6} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb3:
    assume {:partition} !($i5 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 293, 54} true;
    $i7 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 293, 8} true;
    call $i8 := px4_ioctl($i4, 2490368, $i7);
    call {:cexpr "ret"} boogie_si_record_i32($i8);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 296, 7} true;
    $i9 := (if NULL != $i8 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 296, 6} true;
    $i6 := $i8;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb4:
    assume {:partition} $i9 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 296, 36} true;
    call $p10 := __errno_location();
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 296, 36} true;
    assert !aliasQ2455($p10, NULL);
    $i11 := $M.112[$p10];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 296, 26} true;
    $i12 := (if 17 == $i11 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 296, 6} true;
    $i6 := $i8;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 296, 6} true;
    assume {:partition} !($i9 == 1);
    goto $bb2;

  $bb6:
    assume {:partition} $i12 == 1;
    call {:cexpr "ret"} boogie_si_record_i32(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 298, 2} true;
    $i6 := NULL;
    goto $bb2;

  $bb7:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 296, 6} true;
    assume {:partition} !($i12 == 1);
    goto $bb2;

  $bb8:
    assume {:partition} $i13 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 303, 3} true;
    call $i14 := px4_close($i4);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 304, 2} true;
    goto $bb10;

  $bb9:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 302, 6} true;
    assume {:partition} !($i13 == 1);
    goto $bb10;

  $bb10:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 306, 2} true;
    $r := $i6;
    $exn := false;
    return;
}



const px4_open: int;

axiom px4_open == NULL - 8816;

procedure px4_open.ref.i32($p0: int, {:scalar} $i1: int) returns ($r: int);



const _ZN4uORB7Manager21set_uorb_communicatorEPN16uORBCommunicator8IChannelE: int;

axiom _ZN4uORB7Manager21set_uorb_communicatorEPN16uORBCommunicator8IChannelE == NULL - 8824;

procedure _ZN4uORB7Manager21set_uorb_communicatorEPN16uORBCommunicator8IChannelE(this: int, channel: int);



implementation _ZN4uORB7Manager21set_uorb_communicatorEPN16uORBCommunicator8IChannelE(this: int, channel: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:scalar} $i3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var {:base "$p7"} $p8: int;
  var $p9: int;
  var $p10: int;
  var {:scalar} $i11: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "channel"} boogie_si_record_ref(channel);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 394, 2} true;
    $p0 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 394, 2} true;
    assert !aliasQ2456(this, NULL);
    $M.2 := $M.2[$p0 := channel];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 396, 6} true;
    $p1 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 396, 6} true;
    assert !aliasQ2457(this, NULL);
    $p2 := $M.2[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 396, 6} true;
    $i3 := (if $p2 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 396, 6} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 397, 3} true;
    $p4 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 397, 3} true;
    assert !aliasQ2458(this, NULL);
    $p5 := $M.2[$p4];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 397, 3} true;
    $p6 := $p5;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 397, 3} true;
    assert !aliasQ2459($p6, NULL);
    $p7 := $M.2[$p6];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 397, 3} true;
    $p8 := $p7 + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 397, 3} true;
    assert !aliasQ2460($p7, NULL);
    $p9 := $M.2[$p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 397, 35} true;
    $p10 := this;
    call $i11 := devirtbounce14($p9, $p5, $p10);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 398, 2} true;
    goto $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 396, 6} true;
    assume {:partition} !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 399, 1} true;
    $exn := false;
    return;
}



const _ZN4uORB7Manager21get_uorb_communicatorEv: int;

axiom _ZN4uORB7Manager21get_uorb_communicatorEv == NULL - 8832;

procedure _ZN4uORB7Manager21get_uorb_communicatorEv(this: int) returns ($r: int);



implementation _ZN4uORB7Manager21get_uorb_communicatorEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 403, 9} true;
    $p0 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 403, 9} true;
    assert !aliasQ2461(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 403, 2} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZN4uORB7Manager24process_add_subscriptionEPKci: int;

axiom _ZN4uORB7Manager24process_add_subscriptionEPKci == NULL - 8840;

procedure _ZN4uORB7Manager24process_add_subscriptionEPKci(this: int, messageName: int, {:scalar} msgRateInHz: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager24process_add_subscriptionEPKci(this: int, messageName: int, msgRateInHz: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var {:scalar} $p6: int;
  var {:base "$p5"} $p7: int;
  var $p8: int;
  var {:base "$p5"} $p9: int;
  var {:scalar} $i10: int;
  var $p11: int;
  var {:base "$p11"} $p12: int;
  var {:base "$p11"} $p13: int;
  var {:base "$p3"} $p14: int;
  var {:scalar} $i15: int;
  var {:scalar} $i16: int;
  var {:base "$p3"} $p17: int;
  var $p18: int;
  var {:scalar} $i19: int;
  var {:scalar} $i21: int;
  var {:scalar} $i20: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(1 * 1);
    call $p2 := $alloc(16 * 1);
    call $p3 := $alloc(64 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "messageName"} boogie_si_record_ref(messageName);
    call {:cexpr "msgRateInHz"} boogie_si_record_i32(msgRateInHz);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 411, 2} true;
    call _ZL10do_nothingiz.i32.i32.ref(1, 412, messageName);
    call {:cexpr "rc"} boogie_si_record_i16(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 414, 2} true;
    $p4 := this + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 414, 2} true;
    call _ZNSaIcEC1Ev($p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 414, 2} true;
    call _ZNSsC1EPKcRKSaIcE($p0, messageName, $p1);
    call $p5 := $alloc(16 * 1);
    call $p6 := _ZNSt3setISsSt4lessISsESaISsEE6insertEOSs6($p5, $p4, $p0);
    $p7 := $p5;
    assert !aliasQ2462($p5, NULL);
    $p8 := $M.113[$p7];
    $p9 := $p5 + 8;
    assert !aliasQ2463($p5, NULL);
    $i10 := $M.113[$p9];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 414, 2} true;
    $p11 := $p2;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 414, 2} true;
    $p12 := $p11;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 414, 2} true;
    assert !aliasQ2464($p11, NULL);
    $M.114 := $M.114[$p12 := $p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 414, 2} true;
    $p13 := $p11 + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 414, 2} true;
    assert !aliasQ2465($p11, NULL);
    $M.115 := $M.115[$p13 := $i10];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 414, 2} true;
    call _ZNSsD1Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 414, 2} true;
    call _ZNSaIcED1Ev($p1);
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 416, 37} true;
    $p14 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 416, 12} true;
    call $i15 := _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPKc($p14, NULL, messageName);
    call {:cexpr "ret"} boogie_si_record_i32($i15);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 418, 6} true;
    $i16 := (if $i15 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 418, 6} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i16 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 420, 62} true;
    $p17 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 420, 28} true;
    call $p18 := _ZN4uORB12DeviceMaster13GetDeviceNodeEPKc($p17);
    call {:cexpr "node"} boogie_si_record_ref($p18);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 422, 7} true;
    $i19 := (if $p18 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 422, 7} true;
    assume {:branchcond $i19} true;
    goto $bb3, $bb4;

  $bb2:
    assume {:partition} !($i16 == 1);
    call {:cexpr "rc"} boogie_si_record_i16(NULL - 1);
    $i20 := NULL - 1;
    goto $bb5;

  $bb3:
    assume {:partition} $i19 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 423, 4} true;
    call _ZL10do_nothingiz.i32.i32.ref(1, 424, messageName);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 426, 3} true;
    $i20 := NULL;
    goto $bb5;

  $bb4:
    assume {:partition} !($i19 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 428, 4} true;
    call $i21 := _ZN4uORB10DeviceNode24process_add_subscriptionEi($p18, msgRateInHz);
    $i20 := NULL;
    goto $bb5;

  $bb5:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 435, 2} true;
    $r := $i20;
    $exn := false;
    return;
}



const _ZN4uORB7Manager27process_remove_subscriptionEPKc: int;

axiom _ZN4uORB7Manager27process_remove_subscriptionEPKc == NULL - 8848;

procedure _ZN4uORB7Manager27process_remove_subscriptionEPKc(this: int, messageName: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager27process_remove_subscriptionEPKc(this: int, messageName: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;
  var {:scalar} $i4: int;
  var {:base "$p2"} $p5: int;
  var {:scalar} $i6: int;
  var {:scalar} $i7: int;
  var {:base "$p2"} $p9: int;
  var $p10: int;
  var {:scalar} $i11: int;
  var {:scalar} $i12: int;
  var {:scalar} $i8: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(1 * 1);
    call $p2 := $alloc(64 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "messageName"} boogie_si_record_ref(messageName);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 443, 2} true;
    call px4_log_modulename.i32.ref.ref.i32.ref(2, .str751439, .str8831447, 444, messageName);
    call {:cexpr "rc"} boogie_si_record_i16(NULL - 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 446, 2} true;
    $p3 := this + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 446, 2} true;
    call _ZNSaIcEC1Ev($p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 446, 2} true;
    call _ZNSsC1EPKcRKSaIcE($p0, messageName, $p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 446, 2} true;
    call $i4 := _ZNSt3setISsSt4lessISsESaISsEE5eraseERKSs($p3, $p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 446, 2} true;
    call _ZNSsD1Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 446, 2} true;
    call _ZNSaIcED1Ev($p1);
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 448, 37} true;
    $p5 := $p2;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 448, 12} true;
    call $i6 := _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPKc($p5, NULL, messageName);
    call {:cexpr "ret"} boogie_si_record_i32($i6);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 450, 6} true;
    $i7 := (if $i6 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 450, 6} true;
    $i8 := NULL - 1;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i7 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 451, 62} true;
    $p9 := $p2;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 451, 28} true;
    call $p10 := _ZN4uORB12DeviceMaster13GetDeviceNodeEPKc($p9);
    call {:cexpr "node"} boogie_si_record_ref($p10);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 454, 7} true;
    $i11 := (if $p10 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 454, 7} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 450, 6} true;
    assume {:partition} !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 465, 2} true;
    $r := $i8;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i11 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 455, 4} true;
    call _ZL10do_nothingiz.i32.i32.ref(1, 456, messageName);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 458, 3} true;
    $i8 := NULL - 1;
    goto $bb3;

  $bb5:
    assume {:partition} !($i11 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 460, 4} true;
    call $i12 := _ZN4uORB10DeviceNode27process_remove_subscriptionEv($p10);
    call {:cexpr "rc"} boogie_si_record_i16(NULL);
    $i8 := NULL;
    goto $bb3;
}



const _ZN4uORB7Manager24process_received_messageEPKciPh: int;

axiom _ZN4uORB7Manager24process_received_messageEPKciPh == NULL - 8856;

procedure _ZN4uORB7Manager24process_received_messageEPKciPh(this: int, messageName: int, {:scalar} length: int, data: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager24process_received_messageEPKciPh(this: int, messageName: int, length: int, data: int) returns ($r: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:base "$p0"} $p5: int;
  var $p6: int;
  var {:scalar} $i7: int;
  var {:base "$p0"} $p8: int;
  var {:scalar} $i9: int;
  var {:scalar} $i4: int;

  $bb0:
    call $p0 := $alloc(64 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "messageName"} boogie_si_record_ref(messageName);
    call {:cexpr "length"} boogie_si_record_i32(length);
    call {:cexpr "data"} boogie_si_record_ref(data);
    call {:cexpr "rc"} boogie_si_record_i16(NULL - 1);
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 477, 37} true;
    $p1 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 477, 12} true;
    call $i2 := _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPKc($p1, NULL, messageName);
    call {:cexpr "ret"} boogie_si_record_i32($i2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 479, 6} true;
    $i3 := (if $i2 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 479, 6} true;
    $i4 := NULL - 1;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 480, 62} true;
    $p5 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 480, 28} true;
    call $p6 := _ZN4uORB12DeviceMaster13GetDeviceNodeEPKc($p5);
    call {:cexpr "node"} boogie_si_record_ref($p6);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 483, 7} true;
    $i7 := (if $p6 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 483, 7} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 479, 6} true;
    assume {:partition} !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 494, 2} true;
    $r := $i4;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i7 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 484, 4} true;
    $p8 := $p0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 484, 4} true;
    call _ZL10do_nothingiz.i32.i32.ref.ref(1, 485, messageName, $p8);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 487, 3} true;
    $i4 := NULL - 1;
    goto $bb3;

  $bb5:
    assume {:partition} !($i7 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 489, 4} true;
    call $i9 := _ZN4uORB10DeviceNode24process_received_messageEiPh($p6, length, data);
    call {:cexpr "rc"} boogie_si_record_i16(NULL);
    $i4 := NULL;
    goto $bb3;
}



const _ZN4uORB7Manager28is_remote_subscriber_presentEPKc: int;

axiom _ZN4uORB7Manager28is_remote_subscriber_presentEPKc == NULL - 8864;

procedure _ZN4uORB7Manager28is_remote_subscriber_presentEPKc(this: int, messageName: int) returns ({:scalar} $r: int);



implementation _ZN4uORB7Manager28is_remote_subscriber_presentEPKc(this: int, messageName: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var {:base "$p2"} $p6: int;
  var {:base "this"} $p7: int;
  var $p8: int;
  var {:base "$p3"} $p9: int;
  var {:scalar} $i10: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(1 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "messageName"} boogie_si_record_ref(messageName);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 10} true;
    $p4 := this + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 10} true;
    call _ZNSaIcEC1Ev($p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 10} true;
    call _ZNSsC1EPKcRKSaIcE($p0, messageName, $p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 10} true;
    call $p5 := _ZNSt3setISsSt4lessISsESaISsEE4findERKSs($p4, $p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 10} true;
    $p6 := $p2;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 10} true;
    assert !aliasQ2466($p2, NULL);
    $M.116 := $M.116[$p6 := $p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 57} true;
    $p7 := this + 16;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 57} true;
    call $p8 := _ZNKSt3setISsSt4lessISsESaISsEE3endEv($p7);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 57} true;
    $p9 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 57} true;
    assert !aliasQ2467($p3, NULL);
    $M.116 := $M.116[$p9 := $p8];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 10} true;
    call $i10 := _ZNKSt23_Rb_tree_const_iteratorISsEneERKS0_($p2, $p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 2} true;
    call _ZNSsD1Ev($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 2} true;
    call _ZNSaIcED1Ev($p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.cpp", 502, 2} true;
    $r := $i10;
    $exn := false;
    return;
}



const _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base: int;

axiom _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base == NULL - 8872;

procedure _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base($p0: int) returns ($r: int);



const _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_: int;

axiom _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_ == NULL - 8880;

procedure _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_($p0: int, $p1: int) returns ($r: int);



const _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPK12orb_metadataPi: int;

axiom _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPK12orb_metadataPi == NULL - 8888;

procedure _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPK12orb_metadataPi(buf: int, {:scalar} f: int, meta: int, instance: int) returns ({:scalar} $r: int);



implementation _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPK12orb_metadataPi(buf: int, f: int, meta: int, instance: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:scalar} $i2: int;
  var {:scalar} $i1: int;
  var {:scalar} $i3: int;
  var $p4: int;
  var {:base "meta"} $p5: int;
  var $p6: int;
  var {:scalar} $i7: int;
  var {:scalar} $i8: int;
  var {:scalar} $i9: int;

  $bb0:
    call {:cexpr "buf"} boogie_si_record_ref(buf);
    call {:cexpr "f"} boogie_si_record_i32(f);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "instance"} boogie_si_record_ref(instance);
    call {:cexpr "index"} boogie_si_record_i32(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 50, 6} true;
    $i0 := (if instance != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 50, 6} true;
    $i1 := NULL;
    assume {:branchcond $i0} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i0 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 51, 11} true;
    assert !aliasQ2468(instance, NULL);
    $i2 := $M.2[instance];
    call {:cexpr "index"} boogie_si_record_i32($i2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 52, 2} true;
    $i1 := $i2;
    goto $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 50, 6} true;
    assume {:partition} !($i0 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 55, 11} true;
    $i3 := (if f == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 55, 10} true;
    $p4 := (if $i3 == 1 then .str1881448 else .str2891449);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 56, 10} true;
    $p5 := meta;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 56, 10} true;
    assert !aliasQ2469(meta, NULL);
    $p6 := $M.2[$p5];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 54, 8} true;
    call $i7 := snprintf.ref.i64.ref.ref.ref.i32(buf, 64, .str901450, $p4, $p6, $i1);
    call {:cexpr "len"} boogie_si_record_i32($i7);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 58, 6} true;
    $i8 := (if $i7 >= 64 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 58, 6} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb4:
    assume {:partition} $i8 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 59, 3} true;
    $i9 := NULL - 36;
    goto $bb6;

  $bb5:
    assume {:partition} !($i8 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 62, 2} true;
    $i9 := NULL;
    goto $bb6;

  $bb6:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 63, 1} true;
    $r := $i9;
    $exn := false;
    return;
}



const snprintf: int;

axiom snprintf == NULL - 8896;

procedure snprintf.ref.i64.ref.ref.ref.i32($p0: int, {:scalar} $i1: int, $p2: int, {:scalar} p.3: int, {:scalar} p.4: int, p.5: int) returns ($r: int);



const _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPKc: int;

axiom _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPKc == NULL - 8904;

procedure _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPKc(buf: int, {:scalar} f: int, orbMsgName: int) returns ({:scalar} $r: int);



implementation _ZN4uORB5Utils11node_mkpathEPcNS_6FlavorEPKc(buf: int, f: int, orbMsgName: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var $p1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "buf"} boogie_si_record_ref(buf);
    call {:cexpr "f"} boogie_si_record_i32(f);
    call {:cexpr "orbMsgName"} boogie_si_record_ref(orbMsgName);
    call {:cexpr "index"} boogie_si_record_i32(NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 74, 48} true;
    $i0 := (if f == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 74, 47} true;
    $p1 := (if $i0 == 1 then .str1881448 else .str2891449);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 74, 8} true;
    call $i2 := snprintf.ref.i64.ref.ref.ref.i32(buf, 64, .str901450, $p1, orbMsgName, NULL);
    call {:cexpr "len"} boogie_si_record_i32($i2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 77, 6} true;
    $i3 := (if $i2 >= 64 then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 77, 6} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 78, 3} true;
    $i4 := NULL - 36;
    goto $bb3;

  $bb2:
    assume {:partition} !($i3 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 81, 2} true;
    $i4 := NULL;
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBUtils.cpp", 82, 1} true;
    $r := $i4;
    $exn := false;
    return;
}



const _ZN8ListNodeIPN4uORB15PublicationNodeEEC2Ev: int;

axiom _ZN8ListNodeIPN4uORB15PublicationNodeEEC2Ev == NULL - 8912;

procedure _ZN8ListNodeIPN4uORB15PublicationNodeEEC2Ev(this: int);



implementation _ZN8ListNodeIPN4uORB15PublicationNodeEEC2Ev(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 47, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 47, 2} true;
    assert !aliasQ2470($p0, NULL);
    $M.0 := $M.0[$p0 := _ZTV8ListNodeIPN4uORB15PublicationNodeEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 46, 15} true;
    $p1 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 46, 15} true;
    assert !aliasQ2471(this, NULL);
    $M.0 := $M.0[$p1 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 48, 2} true;
    $exn := false;
    return;
}



const _ZN4ListIPN4uORB15PublicationNodeEE3addES2_: int;

axiom _ZN4ListIPN4uORB15PublicationNodeEE3addES2_ == NULL - 8920;

procedure _ZN4ListIPN4uORB15PublicationNodeEE3addES2_(this: int, newNode: int);



implementation _ZN4ListIPN4uORB15PublicationNodeEE3addES2_(this: int, newNode: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assert !aliasQ2472($p0, NULL);
    $M.117 := $M.117[$p0 := newNode];
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 3} true;
    assert !aliasQ2473($p0, NULL);
    $p1 := $M.117[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 3} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 3} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 3} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 23} true;
    call $p5 := _ZN4ListIPN4uORB15PublicationNodeEE7getHeadEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 3} true;
    call _ZN8ListNodeIPN4uORB15PublicationNodeEE10setSiblingES2_($p4, $p5);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 76, 3} true;
    call _ZN4ListIPN4uORB15PublicationNodeEE7setHeadERS2_(this, $p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 77, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB15PublicationNodeD2Ev: int;

axiom _ZN4uORB15PublicationNodeD2Ev == NULL - 8928;

procedure _ZN4uORB15PublicationNodeD2Ev(this: int);



implementation _ZN4uORB15PublicationNodeD2Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;
  var $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p1 := $p0 + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    call _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p3 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    call _ZN4uORB15PublicationBaseD2Ev($p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $exn := false;
    return;
}



const _ZN4uORB15PublicationBase7getMetaEv: int;

axiom _ZN4uORB15PublicationBase7getMetaEv == NULL - 8936;

procedure _ZN4uORB15PublicationBase7getMetaEv(this: int) returns ($r: int);



implementation _ZN4uORB15PublicationBase7getMetaEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 81, 48} true;
    $p0 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 81, 48} true;
    assert !aliasQ2474(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 81, 41} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZN4uORB15PublicationBase9getHandleEv: int;

axiom _ZN4uORB15PublicationBase9getHandleEv == NULL - 8944;

procedure _ZN4uORB15PublicationBase9getHandleEv(this: int) returns ($r: int);



implementation _ZN4uORB15PublicationBase9getHandleEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 82, 36} true;
    $p0 := this + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 82, 36} true;
    assert !aliasQ2475(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 82, 29} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZN4uORB15PublicationBase9setHandleEPv: int;

axiom _ZN4uORB15PublicationBase9setHandleEPv == NULL - 8952;

procedure _ZN4uORB15PublicationBase9setHandleEPv(this: int, handle: int);



implementation _ZN4uORB15PublicationBase9setHandleEPv(this: int, handle: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "handle"} boogie_si_record_ref(handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 89, 40} true;
    $p0 := this + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 89, 40} true;
    assert !aliasQ2476(this, NULL);
    $M.2 := $M.2[$p0 := handle];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 89, 58} true;
    $exn := false;
    return;
}



const _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E: int;

axiom _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E == NULL - 8960;

procedure _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E(this: int, meta: int, {:scalar} interval: int, {:scalar} instance: int, list: int);



implementation _ZN4uORB16SubscriptionNodeC2EPK12orb_metadatajiP4ListIPS0_E(this: int, meta: int, interval: int, instance: int, list: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p1"} $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var {:base "$p5"} $p6: int;
  var $p7: int;
  var {:base "this"} $p8: int;
  var {:scalar} $i9: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "meta"} boogie_si_record_ref(meta);
    call {:cexpr "interval"} boogie_si_record_i32(interval);
    call {:cexpr "instance"} boogie_si_record_i32(instance);
    call {:cexpr "list"} boogie_si_record_ref(list);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    call _ZN4uORB16SubscriptionBaseC2EPK12orb_metadatajj($p0, meta, interval, instance);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    $p2 := $p1 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    $p3 := $p2;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    call _ZN8ListNodeIPN4uORB16SubscriptionNodeEEC2Ev($p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    $p4 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    assert !aliasQ2477($p4, NULL);
    $M.3 := $M.3[$p4 := _ZTVN4uORB16SubscriptionNodeE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    $p5 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    $p6 := $p5 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    $p7 := $p6;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 135, 2} true;
    assert !aliasQ2478($p7, NULL);
    $M.3 := $M.3[$p7 := _ZTVN4uORB16SubscriptionNodeE + 56];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 134, 3} true;
    $p8 := this + 40;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 134, 3} true;
    assert !aliasQ2479(this, NULL);
    $M.3 := $M.3[$p8 := interval];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 136, 7} true;
    $i9 := (if list != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 136, 7} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i9 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 136, 26} true;
    call _ZN4ListIPN4uORB16SubscriptionNodeEE3addES2_(list, this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 136, 43} true;
    goto $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 136, 7} true;
    assume {:partition} !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 137, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB16SubscriptionNodeD2Ev: int;

axiom _ZN4uORB16SubscriptionNodeD2Ev == NULL - 8968;

procedure _ZN4uORB16SubscriptionNodeD2Ev(this: int);



implementation _ZN4uORB16SubscriptionNodeD2Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;
  var $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p1 := $p0 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    call _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p3 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    call _ZN4uORB16SubscriptionBaseD2Ev($p3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $exn := false;
    return;
}



const _ZN4uORB16SubscriptionBase7getMetaEv: int;

axiom _ZN4uORB16SubscriptionBase7getMetaEv == NULL - 8976;

procedure _ZN4uORB16SubscriptionBase7getMetaEv(this: int) returns ($r: int);



implementation _ZN4uORB16SubscriptionBase7getMetaEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 88, 48} true;
    $p0 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 88, 48} true;
    assert !aliasQ2480(this, NULL);
    $p1 := $M.3[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 88, 41} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZN4uORB16SubscriptionBase9getHandleEv: int;

axiom _ZN4uORB16SubscriptionBase9getHandleEv == NULL - 8984;

procedure _ZN4uORB16SubscriptionBase9getHandleEv(this: int) returns ({:scalar} $r: int);



implementation _ZN4uORB16SubscriptionBase9getHandleEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 89, 27} true;
    $p0 := this + 20;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 89, 27} true;
    assert !aliasQ2481(this, NULL);
    $i1 := $M.3[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 89, 20} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZN4uORB7Manager12get_instanceEv: int;

axiom _ZN4uORB7Manager12get_instanceEv == NULL - 8992;

procedure _ZN4uORB7Manager12get_instanceEv() returns ($r: int);



implementation _ZN4uORB7Manager12get_instanceEv() returns ($r: int)
{
  var $p0: int;

  $bb0:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.hpp", 78, 10} true;
    $p0 := $M.97;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBManager.hpp", 78, 3} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZN6device6Device4lockEv: int;

axiom _ZN6device6Device4lockEv == NULL - 9000;

procedure _ZN6device6Device4lockEv(this: int);



implementation _ZN6device6Device4lockEv(this: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/drivers/device/vdev.h", 187, 3} true;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/drivers/device/vdev.h", 187, 29} true;
    $p0 := this + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/drivers/device/vdev.h", 187, 16} true;
    call $i1 := sem_wait($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/drivers/device/vdev.h", 187, 16} true;
    $i2 := (if $i1 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/drivers/device/vdev.h", 187, 7} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/drivers/device/vdev.h", 187, 7} true;
    assume {:partition} $i2 == 1;
    goto $bb1;

  $bb3:
    assume {:partition} !($i2 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/drivers/device/vdev.h", 188, 2} true;
    $exn := false;
    return;
}



const _ZN6device6Device6unlockEv: int;

axiom _ZN6device6Device6unlockEv == NULL - 9008;

procedure _ZN6device6Device6unlockEv(this: int);



implementation _ZN6device6Device6unlockEv(this: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/drivers/device/vdev.h", 196, 16} true;
    $p0 := this + 32;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/drivers/device/vdev.h", 196, 3} true;
    call $i1 := sem_post($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/drivers/device/vdev.h", 197, 2} true;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNode14SubscriberData12set_priorityEh: int;

axiom _ZN4uORB10DeviceNode14SubscriberData12set_priorityEh == NULL - 9016;

procedure _ZN4uORB10DeviceNode14SubscriberData12set_priorityEh(this: int, {:scalar} prio: int);



implementation _ZN4uORB10DeviceNode14SubscriberData12set_priorityEh(this: int, prio: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;
  var {:base "this"} $p5: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "prio"} boogie_si_record_i8(prio);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 136, 46} true;
    $p0 := this + 4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 136, 46} true;
    assert !aliasQ2482(this, NULL);
    $i1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 136, 46} true;
    $i2 := $and.i32($i1, NULL - 256);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 136, 63} true;
    $i3 := prio;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 136, 45} true;
    $i4 := $or.i32($i2, $i3);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 136, 37} true;
    $p5 := this + 4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 136, 37} true;
    assert !aliasQ2483(this, NULL);
    $M.2 := $M.2[$p5 := $i4];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 136, 69} true;
    $exn := false;
    return;
}



const _ZN4uORB10DeviceNode14SubscriberDataD2Ev: int;

axiom _ZN4uORB10DeviceNode14SubscriberDataD2Ev == NULL - 9024;

procedure _ZN4uORB10DeviceNode14SubscriberDataD2Ev(this: int);



implementation _ZN4uORB10DeviceNode14SubscriberDataD2Ev(this: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:scalar} $i2: int;
  var {:base "this"} $p3: int;
  var $p4: int;
  var {:scalar} $i5: int;
  var $p6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 27} true;
    $p0 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 27} true;
    assert !aliasQ2484(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 27} true;
    $i2 := (if $p1 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 27} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i2 == 1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 53} true;
    $p3 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 53} true;
    assert !aliasQ2485(this, NULL);
    $p4 := $M.2[$p3];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 46} true;
    $i5 := (if $p4 == NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 46} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 27} true;
    assume {:partition} !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 73} true;
    $exn := false;
    return;

  $bb4:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 46} true;
    assume {:partition} $i5 == 1;
    goto $bb3;

  $bb5:
    assume {:partition} !($i5 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 46} true;
    $p6 := $p4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 46} true;
    call _ZdlPv($p6);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 129, 46} true;
    goto $bb3;
}



const _ZN4uORB10DeviceNode14SubscriberData19set_update_reportedEb: int;

axiom _ZN4uORB10DeviceNode14SubscriberData19set_update_reportedEb == NULL - 9032;

procedure _ZN4uORB10DeviceNode14SubscriberData19set_update_reportedEb(this: int, {:scalar} update_reported_flag: int);



implementation _ZN4uORB10DeviceNode14SubscriberData19set_update_reportedEb(this: int, update_reported_flag: int)
{
  var {:scalar} $i0: int;
  var {:base "this"} $p1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;
  var {:scalar} $i7: int;
  var {:base "this"} $p8: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    $i0 := update_reported_flag;
    call {:cexpr "update_reported_flag"} boogie_si_record_i1(update_reported_flag);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 139, 66} true;
    $p1 := this + 4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 139, 66} true;
    assert !aliasQ2486(this, NULL);
    $i2 := $M.2[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 139, 66} true;
    $i3 := $and.i32($i2, NULL - 257);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 139, 94} true;
    $i4 := $i0;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 139, 94} true;
    $i5 := $i4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 139, 88} true;
    $i6 := $shl.i32($i5, 8);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 139, 65} true;
    $i7 := $or.i32($i3, $i6);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 139, 57} true;
    $p8 := this + 4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 139, 57} true;
    assert !aliasQ2487(this, NULL);
    $M.2 := $M.2[$p8 := $i7];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 139, 123} true;
    $exn := false;
    return;
}



const _ZNK4uORB10DeviceNode14SubscriberData8priorityEv: int;

axiom _ZNK4uORB10DeviceNode14SubscriberData8priorityEv == NULL - 9040;

procedure _ZNK4uORB10DeviceNode14SubscriberData8priorityEv(this: int) returns ({:scalar} $r: int);



implementation _ZNK4uORB10DeviceNode14SubscriberData8priorityEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 135, 33} true;
    $p0 := this + 4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 135, 33} true;
    assert !aliasQ2488(this, NULL);
    $i1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 135, 33} true;
    $i2 := $and.i32($i1, 255);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 135, 26} true;
    $r := $i2;
    $exn := false;
    return;
}



const _ZNK4uORB10DeviceNode14SubscriberData15update_reportedEv: int;

axiom _ZNK4uORB10DeviceNode14SubscriberData15update_reportedEv == NULL - 9048;

procedure _ZNK4uORB10DeviceNode14SubscriberData15update_reportedEv(this: int) returns ({:scalar} $r: int);



implementation _ZNK4uORB10DeviceNode14SubscriberData15update_reportedEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 138, 41} true;
    $p0 := this + 4;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 138, 41} true;
    assert !aliasQ2489(this, NULL);
    $i1 := $M.2[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 138, 41} true;
    $i2 := $and.i32($i1, 256);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 138, 41} true;
    $i3 := (if $i2 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.hpp", 138, 34} true;
    $r := $i3;
    $exn := false;
    return;
}



const _ZN9SmartLockC2ER5sem_t: int;

axiom _ZN9SmartLockC2ER5sem_t == NULL - 9056;

procedure _ZN9SmartLockC2ER5sem_t(this: int, sem: int);



implementation _ZN9SmartLockC2ER5sem_t(this: int, sem: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "sem"} boogie_si_record_ref(sem);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 64, 30} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 64, 30} true;
    assert !aliasQ2490(this, NULL);
    $M.118 := $M.118[$p0 := sem];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 64, 42} true;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 64, 68} true;
    $p1 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 64, 68} true;
    assert !aliasQ2491(this, NULL);
    $p2 := $M.118[$p1];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 64, 55} true;
    call $i3 := sem_wait($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 64, 55} true;
    $i4 := (if $i3 != NULL then 1 else NULL);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 64, 46} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 64, 46} true;
    assume {:partition} $i4 == 1;
    goto $bb1;

  $bb3:
    assume {:partition} !($i4 == 1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 64, 82} true;
    $exn := false;
    return;
}



const _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEEixEOSs: int;

axiom _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEEixEOSs == NULL - 9064;

procedure _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEEixEOSs(this: int, __k: int) returns ($r: int);



implementation _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEEixEOSs(this: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var {:base "$p0"} $p8: int;
  var $p9: int;
  var {:base "$p1"} $p10: int;
  var {:scalar} $i11: int;
  var $p12: int;
  var {:base "$p12"} $p13: int;
  var {:scalar} $i14: int;
  var {:base "this"} $p15: int;
  var $p16: int;
  var $p17: int;
  var {:base "$p5"} $p18: int;
  var {:base "$p5"} $p19: int;
  var {:base "$p5"} $p20: int;
  var {:base "$p4"} $p21: int;
  var $p22: int;
  var $p23: int;
  var {:base "$p3"} $p24: int;
  var $p25: int;
  var $p26: int;
  var $p27: int;
  var {:base "$p27"} $p28: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(1 * 1);
    call $p3 := $alloc(8 * 1);
    call $p4 := $alloc(8 * 1);
    call $p5 := $alloc(8 * 1);
    call $p6 := $alloc(1 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 481, 17} true;
    call $p7 := _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE11lower_boundERS6_(this, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 481, 17} true;
    $p8 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 481, 17} true;
    assert !aliasQ2492($p0, NULL);
    $M.2 := $M.2[$p8 := $p7];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 13} true;
    call $p9 := _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE3endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 13} true;
    $p10 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 13} true;
    assert !aliasQ2493($p1, NULL);
    $M.119 := $M.119[$p10 := $p9];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 6} true;
    call $i11 := _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEeqERKS6_($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 6} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb3;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 6} true;
    assume {:partition} $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 10} true;
    $p15 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 10} true;
    call _ZNSt23_Rb_tree_const_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2ERKSt17_Rb_tree_iteratorIS5_E($p4, $p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 485, 28} true;
    call $p16 := _ZSt4moveIRSsEONSt16remove_referenceIT_E4typeEOS2_(__k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 485, 6} true;
    call $p17 := _ZSt16forward_as_tupleIJSsEESt5tupleIJDpOT_EES3_($p16);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 485, 6} true;
    $p18 := $p5;
    $p19 := $p5;
    $p20 := $p5;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 485, 6} true;
    assert !aliasQ2494($p5, NULL);
    $M.120 := $M.120[$p20 := $p17];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 10} true;
    $p21 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 10} true;
    assert !aliasQ2495($p4, NULL);
    $p22 := $M.121[$p21];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 10} true;
    call $p23 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOSsEESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_($p15, $p22, _ZStL19piecewise_construct, $p5, $p6);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 10} true;
    $p24 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 10} true;
    assert !aliasQ2496($p3, NULL);
    $M.2 := $M.2[$p24 := $p23];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 4} true;
    $p25 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 4} true;
    $p26 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 4} true;
    assert !aliasQ2497($p25, NULL);
    assert !aliasQ2498($p26, NULL);
    $M.2[$p25] := $M.2[$p26];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 484, 4} true;
    goto $bb6;

  $bb3:
    assume {:partition} !($i11 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 22} true;
    call _ZNKSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE8key_compEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 39} true;
    call $p12 := _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEdeEv($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 22} true;
    $p13 := $p12;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 22} true;
    call $i14 := _ZNKSt4lessISsEclERKSsS2_($p2, __k, $p13);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 6} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb4:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 6} true;
    assume {:partition} $i14 == 1;
    goto $bb2;

  $bb5:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 483, 6} true;
    assume {:partition} !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 487, 10} true;
    call $p27 := _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEdeEv($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 487, 2} true;
    $p28 := $p27 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 487, 2} true;
    $r := $p28;
    $exn := false;
    return;
}



const _ZN9SmartLockD2Ev: int;

axiom _ZN9SmartLockD2Ev == NULL - 9072;

procedure _ZN9SmartLockD2Ev(this: int);



implementation _ZN9SmartLockD2Ev(this: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:scalar} $i2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 65, 30} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 65, 30} true;
    assert !aliasQ2499(this, NULL);
    $p1 := $M.118[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 65, 17} true;
    call $i2 := sem_post($p1);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_sem.hpp", 65, 38} true;
    $exn := false;
    return;
}



const _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE4findERS6_: int;

axiom _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE4findERS6_ == NULL - 9080;

procedure _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE4findERS6_(this: int, __x: int) returns ($r: int);



implementation _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE4findERS6_(this: int, __x: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:base "$p0"} $p3: int;
  var {:base "$p0"} $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 822, 16} true;
    $p1 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 822, 16} true;
    call $p2 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4findERS1_($p1, __x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 822, 16} true;
    $p3 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 822, 16} true;
    assert !aliasQ2500($p0, NULL);
    $M.122 := $M.122[$p3 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 822, 9} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 822, 9} true;
    assert !aliasQ2501($p0, NULL);
    $p5 := $M.122[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 822, 9} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE3endEv: int;

axiom _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE3endEv == NULL - 9088;

procedure _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE3endEv(this: int) returns ($r: int);



implementation _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE3endEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:base "$p0"} $p3: int;
  var {:base "$p0"} $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 339, 16} true;
    $p1 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 339, 16} true;
    call $p2 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE3endEv($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 339, 16} true;
    $p3 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 339, 16} true;
    assert !aliasQ2502($p0, NULL);
    $M.123 := $M.123[$p3 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 339, 9} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 339, 9} true;
    assert !aliasQ2503($p0, NULL);
    $p5 := $M.123[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 339, 9} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEneERKS6_: int;

axiom _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEneERKS6_ == NULL - 9096;

procedure _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEneERKS6_(this: int, __x: int) returns ({:scalar} $r: int);



implementation _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEneERKS6_(this: int, __x: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:base "__x"} $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 222, 16} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 222, 16} true;
    assert !aliasQ2504(this, NULL);
    $p1 := $M.93[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 222, 27} true;
    $p2 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 222, 27} true;
    assert !aliasQ2505(__x, NULL);
    $p3 := $M.94[$p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 222, 16} true;
    $i4 := (if $p1 != $p3 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 222, 9} true;
    $r := $i4;
    $exn := false;
    return;
}



const _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEptEv: int;

axiom _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEptEv == NULL - 9104;

procedure _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEptEv(this: int) returns ($r: int);



implementation _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEptEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 184, 6} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 184, 6} true;
    assert !aliasQ2506(this, NULL);
    $p1 := $M.93[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 183, 33} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 183, 16} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 183, 16} true;
    call $p4 := _ZSt11__addressofISt4pairIKSsPN4uORB10DeviceNodeEEEPT_RS6_($p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 183, 9} true;
    $r := $p4;
    $exn := false;
    return;
}



const _ZL5usagev: int;

axiom _ZL5usagev == NULL - 9112;

procedure _ZL5usagev();



implementation _ZL5usagev()
{

  $bb0:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 45, 2} true;
    call px4_log_modulename.i32.ref.ref(NULL, .str1331431, .str91451);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBMain.cpp", 46, 1} true;
    $exn := false;
    return;
}



const _ZN16uORBCommunicator17IChannelRxHandlerC2Ev: int;

axiom _ZN16uORBCommunicator17IChannelRxHandlerC2Ev == NULL - 9120;

procedure _ZN16uORBCommunicator17IChannelRxHandlerC2Ev(this: int);



implementation _ZN16uORBCommunicator17IChannelRxHandlerC2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBCommunicator.hpp", 126, 25} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBCommunicator.hpp", 126, 25} true;
    assert !aliasQ2507($p0, NULL);
    $M.2 := $M.2[$p0 := _ZTVN16uORBCommunicator17IChannelRxHandlerE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBCommunicator.hpp", 126, 25} true;
    $exn := false;
    return;
}



const _ZNSt3setISsSt4lessISsESaISsEEC2Ev: int;

axiom _ZNSt3setISsSt4lessISsESaISsEEC2Ev == NULL - 9128;

procedure _ZNSt3setISsSt4lessISsESaISsEEC2Ev(this: int);



implementation _ZNSt3setISsSt4lessISsESaISsEEC2Ev(this: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 140, 9} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 140, 9} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEEC2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 140, 18} true;
    $exn := false;
    return;
}



const _ZL10do_nothingiz: int;

axiom _ZL10do_nothingiz == NULL - 9136;

procedure _ZL10do_nothingiz.i32.i32.ref.ref({:scalar} level: int, p.1: int, {:scalar} p.2: int, {:scalar} p.3: int);



implementation _ZL10do_nothingiz.i32.i32.ref.ref(level: int, p.1: int, p.2: int, p.3: int)
{

  $bb0:
    call {:cexpr "level"} boogie_si_record_i32(level);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_log.h", 51, 1} true;
    $exn := false;
    return;
}



procedure _ZL10do_nothingiz.i32.i32.ref({:scalar} level: int, p.1: int, {:scalar} p.2: int);



implementation _ZL10do_nothingiz.i32.i32.ref(level: int, p.1: int, p.2: int)
{

  $bb1:
    call {:cexpr "level"} boogie_si_record_i32(level);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/platforms/px4_log.h", 51, 1} true;
    $exn := false;
    return;
}



const _ZNSt3setISsSt4lessISsESaISsEE5eraseERKSs: int;

axiom _ZNSt3setISsSt4lessISsESaISsEE5eraseERKSs == NULL - 9144;

procedure _ZNSt3setISsSt4lessISsESaISsEE5eraseERKSs(this: int, __x: int) returns ({:scalar} $r: int);



implementation _ZNSt3setISsSt4lessISsESaISsEE5eraseERKSs(this: int, __x: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 582, 16} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 582, 16} true;
    call $i1 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseERKSs($p0, __x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 582, 9} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZNSt3setISsSt4lessISsESaISsEE4findERKSs: int;

axiom _ZNSt3setISsSt4lessISsESaISsEE4findERKSs == NULL - 9152;

procedure _ZNSt3setISsSt4lessISsESaISsEE4findERKSs(this: int, __x: int) returns ($r: int);



implementation _ZNSt3setISsSt4lessISsESaISsEE4findERKSs(this: int, __x: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var {:base "$p1"} $p4: int;
  var {:base "$p0"} $p5: int;
  var $p6: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 663, 16} true;
    $p2 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 663, 16} true;
    call $p3 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4findERKSs($p2, __x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 663, 16} true;
    $p4 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 663, 16} true;
    assert !aliasQ2508($p1, NULL);
    $M.124 := $M.124[$p4 := $p3];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 663, 9} true;
    call _ZNSt23_Rb_tree_const_iteratorISsEC2ERKSt17_Rb_tree_iteratorISsE($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 663, 9} true;
    $p5 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 663, 9} true;
    assert !aliasQ2509($p0, NULL);
    $p6 := $M.113[$p5];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 663, 9} true;
    $r := $p6;
    $exn := false;
    return;
}



const _ZNKSt3setISsSt4lessISsESaISsEE3endEv: int;

axiom _ZNKSt3setISsSt4lessISsESaISsEE3endEv == NULL - 9160;

procedure _ZNKSt3setISsSt4lessISsESaISsEE3endEv(this: int) returns ($r: int);



implementation _ZNKSt3setISsSt4lessISsESaISsEE3endEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:base "$p0"} $p3: int;
  var {:base "$p0"} $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 308, 16} true;
    $p1 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 308, 16} true;
    call $p2 := _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 308, 16} true;
    $p3 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 308, 16} true;
    assert !aliasQ2510($p0, NULL);
    $M.125 := $M.125[$p3 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 308, 9} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 308, 9} true;
    assert !aliasQ2511($p0, NULL);
    $p5 := $M.125[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 308, 9} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNKSt23_Rb_tree_const_iteratorISsEneERKS0_: int;

axiom _ZNKSt23_Rb_tree_const_iteratorISsEneERKS0_ == NULL - 9168;

procedure _ZNKSt23_Rb_tree_const_iteratorISsEneERKS0_(this: int, __x: int) returns ({:scalar} $r: int);



implementation _ZNKSt23_Rb_tree_const_iteratorISsEneERKS0_(this: int, __x: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:base "__x"} $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 303, 16} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 303, 16} true;
    assert !aliasQ2512(this, NULL);
    $p1 := $M.116[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 303, 27} true;
    $p2 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 303, 27} true;
    assert !aliasQ2513(__x, NULL);
    $p3 := $M.116[$p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 303, 16} true;
    $i4 := (if $p1 != $p3 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 303, 9} true;
    $r := $i4;
    $exn := false;
    return;
}



const _ZN4uORB15PublicationNodeD0Ev: int;

axiom _ZN4uORB15PublicationNodeD0Ev == NULL - 9176;

procedure _ZN4uORB15PublicationNodeD0Ev(this: int);



implementation _ZN4uORB15PublicationNodeD0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    call _ZN4uORB15PublicationNodeD2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB15PublicationNodeD0Ev: int;

axiom _ZThn32_N4uORB15PublicationNodeD0Ev == NULL - 9184;

procedure _ZThn32_N4uORB15PublicationNodeD0Ev(this: int);



implementation _ZThn32_N4uORB15PublicationNodeD0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    call _ZN4uORB15PublicationNodeD0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $exn := false;
    return;
}



const _ZThn32_N4uORB15PublicationNodeD1Ev: int;

axiom _ZThn32_N4uORB15PublicationNodeD1Ev == NULL - 9192;

procedure _ZThn32_N4uORB15PublicationNodeD1Ev(this: int);



implementation _ZThn32_N4uORB15PublicationNodeD1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p1 := $p0 + 18446744073709551584;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    call _ZN4uORB15PublicationNodeD2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Publication.hpp", 106, 16} true;
    $exn := false;
    return;
}



const _ZN4ListIPN4uORB15PublicationNodeEE7setHeadERS2_: int;

axiom _ZN4ListIPN4uORB15PublicationNodeEE7setHeadERS2_ == NULL - 9200;

procedure _ZN4ListIPN4uORB15PublicationNodeEE7setHeadERS2_(this: int, head: int);



implementation _ZN4ListIPN4uORB15PublicationNodeEE7setHeadERS2_(this: int, head: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "head"} boogie_si_record_ref(head);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 80, 34} true;
    assert !aliasQ2514(head, NULL);
    $p0 := $M.117[head];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 80, 26} true;
    $p1 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 80, 26} true;
    assert !aliasQ2515(this, NULL);
    $M.126 := $M.126[$p1 := $p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 80, 40} true;
    $exn := false;
    return;
}



const _ZN4ListIPN4uORB15PublicationNodeEE7getHeadEv: int;

axiom _ZN4ListIPN4uORB15PublicationNodeEE7getHeadEv == NULL - 9208;

procedure _ZN4ListIPN4uORB15PublicationNodeEE7getHeadEv(this: int) returns ($r: int);



implementation _ZN4ListIPN4uORB15PublicationNodeEE7getHeadEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 78, 23} true;
    $p0 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 78, 23} true;
    assert !aliasQ2516(this, NULL);
    $p1 := $M.126[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 78, 16} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZN8ListNodeIPN4uORB15PublicationNodeEE10setSiblingES2_: int;

axiom _ZN8ListNodeIPN4uORB15PublicationNodeEE10setSiblingES2_ == NULL - 9216;

procedure _ZN8ListNodeIPN4uORB15PublicationNodeEE10setSiblingES2_(this: int, sibling: int);



implementation _ZN8ListNodeIPN4uORB15PublicationNodeEE10setSiblingES2_(this: int, sibling: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "sibling"} boogie_si_record_ref(sibling);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 50, 31} true;
    $p0 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 50, 31} true;
    assert !aliasQ2517(this, NULL);
    $M.0 := $M.0[$p0 := sibling];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 50, 51} true;
    $exn := false;
    return;
}



const _ZN8ListNodeIPN4uORB15PublicationNodeEED0Ev: int;

axiom _ZN8ListNodeIPN4uORB15PublicationNodeEED0Ev == NULL - 9224;

procedure _ZN8ListNodeIPN4uORB15PublicationNodeEED0Ev(this: int);



implementation _ZN8ListNodeIPN4uORB15PublicationNodeEED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 49, 22} true;
    call _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 49, 22} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 49, 22} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 49, 23} true;
    $exn := false;
    return;
}



const _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev: int;

axiom _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev == NULL - 9232;

procedure _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev(this: int);



implementation _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev(this: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 49, 23} true;
    $exn := false;
    return;
}



const _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev: int;

axiom _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev == NULL - 9240;

procedure _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev(this: int);



implementation _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev(this: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 49, 23} true;
    $exn := false;
    return;
}



const _ZN4uORB16SubscriptionNodeD0Ev: int;

axiom _ZN4uORB16SubscriptionNodeD0Ev == NULL - 9248;

procedure _ZN4uORB16SubscriptionNodeD0Ev(this: int);



implementation _ZN4uORB16SubscriptionNodeD0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    call _ZN4uORB16SubscriptionNodeD2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB16SubscriptionNodeD0Ev: int;

axiom _ZThn24_N4uORB16SubscriptionNodeD0Ev == NULL - 9256;

procedure _ZThn24_N4uORB16SubscriptionNodeD0Ev(this: int);



implementation _ZThn24_N4uORB16SubscriptionNodeD0Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    call _ZN4uORB16SubscriptionNodeD0Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $exn := false;
    return;
}



const _ZThn24_N4uORB16SubscriptionNodeD1Ev: int;

axiom _ZThn24_N4uORB16SubscriptionNodeD1Ev == NULL - 9264;

procedure _ZThn24_N4uORB16SubscriptionNodeD1Ev(this: int);



implementation _ZThn24_N4uORB16SubscriptionNodeD1Ev(this: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p1 := $p0 + 18446744073709551592;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    call _ZN4uORB16SubscriptionNodeD2Ev($p2);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/Subscription.hpp", 112, 16} true;
    $exn := false;
    return;
}



const _ZN4ListIPN4uORB16SubscriptionNodeEE3addES2_: int;

axiom _ZN4ListIPN4uORB16SubscriptionNodeEE3addES2_ == NULL - 9272;

procedure _ZN4ListIPN4uORB16SubscriptionNodeEE3addES2_(this: int, newNode: int);



implementation _ZN4ListIPN4uORB16SubscriptionNodeEE3addES2_(this: int, newNode: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;
  var $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assert !aliasQ2518($p0, NULL);
    $M.127 := $M.127[$p0 := newNode];
    assume true;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 3} true;
    assert !aliasQ2519($p0, NULL);
    $p1 := $M.127[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 3} true;
    $p2 := $p1;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 3} true;
    $p3 := $p2 + 24;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 3} true;
    $p4 := $p3;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 23} true;
    call $p5 := _ZN4ListIPN4uORB16SubscriptionNodeEE7getHeadEv(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 75, 3} true;
    call _ZN8ListNodeIPN4uORB16SubscriptionNodeEE10setSiblingES2_($p4, $p5);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 76, 3} true;
    call _ZN4ListIPN4uORB16SubscriptionNodeEE7setHeadERS2_(this, $p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 77, 2} true;
    $exn := false;
    return;
}



const _ZN4ListIPN4uORB16SubscriptionNodeEE7setHeadERS2_: int;

axiom _ZN4ListIPN4uORB16SubscriptionNodeEE7setHeadERS2_ == NULL - 9280;

procedure _ZN4ListIPN4uORB16SubscriptionNodeEE7setHeadERS2_(this: int, head: int);



implementation _ZN4ListIPN4uORB16SubscriptionNodeEE7setHeadERS2_(this: int, head: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "head"} boogie_si_record_ref(head);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 80, 34} true;
    assert !aliasQ2520(head, NULL);
    $p0 := $M.127[head];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 80, 26} true;
    $p1 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 80, 26} true;
    assert !aliasQ2521(this, NULL);
    $M.128 := $M.128[$p1 := $p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 80, 40} true;
    $exn := false;
    return;
}



const _ZN4ListIPN4uORB16SubscriptionNodeEE7getHeadEv: int;

axiom _ZN4ListIPN4uORB16SubscriptionNodeEE7getHeadEv == NULL - 9288;

procedure _ZN4ListIPN4uORB16SubscriptionNodeEE7getHeadEv(this: int) returns ($r: int);



implementation _ZN4ListIPN4uORB16SubscriptionNodeEE7getHeadEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 78, 23} true;
    $p0 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 78, 23} true;
    assert !aliasQ2522(this, NULL);
    $p1 := $M.128[$p0];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 78, 16} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZN8ListNodeIPN4uORB16SubscriptionNodeEE10setSiblingES2_: int;

axiom _ZN8ListNodeIPN4uORB16SubscriptionNodeEE10setSiblingES2_ == NULL - 9296;

procedure _ZN8ListNodeIPN4uORB16SubscriptionNodeEE10setSiblingES2_(this: int, sibling: int);



implementation _ZN8ListNodeIPN4uORB16SubscriptionNodeEE10setSiblingES2_(this: int, sibling: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "sibling"} boogie_si_record_ref(sibling);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 50, 31} true;
    $p0 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 50, 31} true;
    assert !aliasQ2523(this, NULL);
    $M.3 := $M.3[$p0 := sibling];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 50, 51} true;
    $exn := false;
    return;
}



const _ZN8ListNodeIPN4uORB16SubscriptionNodeEEC2Ev: int;

axiom _ZN8ListNodeIPN4uORB16SubscriptionNodeEEC2Ev == NULL - 9304;

procedure _ZN8ListNodeIPN4uORB16SubscriptionNodeEEC2Ev(this: int);



implementation _ZN8ListNodeIPN4uORB16SubscriptionNodeEEC2Ev(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 47, 2} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 47, 2} true;
    assert !aliasQ2524($p0, NULL);
    $M.3 := $M.3[$p0 := _ZTV8ListNodeIPN4uORB16SubscriptionNodeEE + 16];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 46, 15} true;
    $p1 := this + 8;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 46, 15} true;
    assert !aliasQ2525(this, NULL);
    $M.3 := $M.3[$p1 := NULL];
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 48, 2} true;
    $exn := false;
    return;
}



const _ZN8ListNodeIPN4uORB16SubscriptionNodeEED0Ev: int;

axiom _ZN8ListNodeIPN4uORB16SubscriptionNodeEED0Ev == NULL - 9312;

procedure _ZN8ListNodeIPN4uORB16SubscriptionNodeEED0Ev(this: int);



implementation _ZN8ListNodeIPN4uORB16SubscriptionNodeEED0Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 49, 22} true;
    call _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev(this);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 49, 22} true;
    $p0 := this;
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 49, 22} true;
    call _ZdlPv($p0);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/include/containers/List.hpp", 49, 23} true;
    $exn := false;
    return;
}



const __cxx_global_var_init: int;

axiom __cxx_global_var_init == NULL - 9320;

procedure __cxx_global_var_init();



implementation __cxx_global_var_init()
{
  var {:scalar} $i0: int;

  $bb0:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 47, 63} true;
    call _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEEC2Ev(_ZN4uORB12DeviceMaster9_node_mapE);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 47, 63} true;
    call $i0 := __cxa_atexit(_ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEED2Ev, _ZN4uORB12DeviceMaster9_node_mapE, __dso_handle);
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 47, 63} true;
    $exn := false;
    return;
}



const _ZSt11__addressofISt4pairIKSsPN4uORB10DeviceNodeEEEPT_RS6_: int;

axiom _ZSt11__addressofISt4pairIKSsPN4uORB10DeviceNodeEEEPT_RS6_ == NULL - 9328;

procedure _ZSt11__addressofISt4pairIKSsPN4uORB10DeviceNodeEEEPT_RS6_(__r: int) returns ($r: int);



implementation _ZSt11__addressofISt4pairIKSsPN4uORB10DeviceNodeEEEPT_RS6_(__r: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "__r"} boogie_si_record_ref(__r);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 50, 3} true;
    $p0 := __r;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 49, 14} true;
    $p1 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 49, 7} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE3endEv: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE3endEv == NULL - 9336;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE3endEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE3endEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var {:base "$p0"} $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 49} true;
    $p1 := this;
    $p2 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 25} true;
    $p3 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 9} true;
    call _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E($p0, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 9} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 9} true;
    assert !aliasQ2526($p0, NULL);
    $p5 := $M.2[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 9} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E: int;

axiom _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E == NULL - 9344;

procedure _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E(this: int, __x: int);



implementation _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E(this: int, __x: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 175, 9} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 175, 17} true;
    $p1 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 175, 9} true;
    assert !aliasQ2527(this, NULL);
    $M.2 := $M.2[$p0 := __x];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 175, 24} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4findERS1_: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4findERS1_ == NULL - 9352;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4findERS1_(this: int, __k: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4findERS1_(this: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var {:base "$p1"} $p6: int;
  var $p7: int;
  var {:base "$p2"} $p8: int;
  var {:scalar} $i9: int;
  var {:base "this"} $p10: int;
  var {:base "this"} $p11: int;
  var {:base "$p1"} $p12: int;
  var $p13: int;
  var $p14: int;
  var {:scalar} $i15: int;
  var $p16: int;
  var {:base "$p0"} $p17: int;
  var $p18: int;
  var $p19: int;
  var {:base "$p0"} $p20: int;
  var $p21: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1792, 37} true;
    call $p3 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_beginEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1792, 49} true;
    call $p4 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_M_endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1792, 22} true;
    call $p5 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_ESE_RS1_(this, $p3, $p4, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1792, 22} true;
    $p6 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1792, 22} true;
    assert !aliasQ2528($p1, NULL);
    $M.2 := $M.2[$p6 := $p5];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 22} true;
    call $p7 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE3endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 22} true;
    $p8 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 22} true;
    assert !aliasQ2529($p2, NULL);
    $M.119 := $M.119[$p8 := $p7];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 15} true;
    call $i9 := _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEeqERKS6_($p1, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assume {:partition} $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 30} true;
    call $p16 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE3endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 30} true;
    $p17 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 30} true;
    assert !aliasQ2530($p0, NULL);
    $M.2 := $M.2[$p17 := $p16];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    goto $bb6;

  $bb3:
    assume {:partition} !($i9 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1794, 11} true;
    $p10 := this;
    $p11 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 13} true;
    $p12 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 13} true;
    assert !aliasQ2531($p1, NULL);
    $p13 := $M.2[$p12];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 6} true;
    call $p14 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base($p13);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1794, 11} true;
    call $i15 := _ZNKSt4lessISsEclERKSsS2_($p11, __k, $p14);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb4:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assume {:partition} $i15 == 1;
    goto $bb2;

  $bb5:
    assume {:partition} !($i15 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    $p18 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    $p19 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assert !aliasQ2532($p18, NULL);
    assert !aliasQ2533($p19, NULL);
    $M.2[$p18] := $M.2[$p19];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    goto $bb6;

  $bb6:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    $p20 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assert !aliasQ2534($p0, NULL);
    $p21 := $M.2[$p20];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    $r := $p21;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base == NULL - 9360;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base(__x: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call $p0 := $alloc(1 * 1);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 549, 30} true;
    call $p1 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_valueEPKSt18_Rb_tree_node_base(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 549, 16} true;
    call $p2 := _ZNKSt10_Select1stISt4pairIKSsPN4uORB10DeviceNodeEEEclERKS5_($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 549, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_valueEPKSt18_Rb_tree_node_base: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_valueEPKSt18_Rb_tree_node_base == NULL - 9368;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_valueEPKSt18_Rb_tree_node_base(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_valueEPKSt18_Rb_tree_node_base(__x: int) returns ($r: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;

  $bb0:
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 545, 16} true;
    $p0 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 545, 9} true;
    $p1 := $p0 + 32;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 545, 9} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZNKSt10_Select1stISt4pairIKSsPN4uORB10DeviceNodeEEEclERKS5_: int;

axiom _ZNKSt10_Select1stISt4pairIKSsPN4uORB10DeviceNodeEEEclERKS5_ == NULL - 9376;

procedure _ZNKSt10_Select1stISt4pairIKSsPN4uORB10DeviceNodeEEEclERKS5_(this: int, __x: int) returns ($r: int);



implementation _ZNKSt10_Select1stISt4pairIKSsPN4uORB10DeviceNodeEEEclERKS5_(this: int, __x: int) returns ($r: int)
{
  var {:base "__x"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_function.h", 495, 9} true;
    $p0 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_function.h", 495, 9} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZNKSt4lessISsEclERKSsS2_: int;

axiom _ZNKSt4lessISsEclERKSsS2_ == NULL - 9384;

procedure _ZNKSt4lessISsEclERKSsS2_(this: int, __x: int, __y: int) returns ({:scalar} $r: int);



implementation _ZNKSt4lessISsEclERKSsS2_(this: int, __x: int, __y: int) returns ($r: int)
{
  var {:scalar} $i0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_function.h", 235, 20} true;
    call $i0 := _ZStltIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_(__x, __y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_function.h", 235, 9} true;
    $r := $i0;
    $exn := false;
    return;
}



const _ZStltIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_: int;

axiom _ZStltIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_ == NULL - 9392;

procedure _ZStltIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_(__lhs: int, __rhs: int) returns ({:scalar} $r: int);



implementation _ZStltIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_(__lhs: int, __rhs: int) returns ($r: int)
{
  var {:scalar} $i0: int;
  var {:scalar} $i1: int;

  $bb0:
    call {:cexpr "__lhs"} boogie_si_record_ref(__lhs);
    call {:cexpr "__rhs"} boogie_si_record_ref(__rhs);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/basic_string.h", 2571, 14} true;
    call $i0 := _ZNKSs7compareERKSs(__lhs, __rhs);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/basic_string.h", 2571, 14} true;
    $i1 := (if $i0 < NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/basic_string.h", 2571, 7} true;
    $r := $i1;
    $exn := false;
    return;
}



const _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEeqERKS6_: int;

axiom _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEeqERKS6_ == NULL - 9400;

procedure _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEeqERKS6_(this: int, __x: int) returns ({:scalar} $r: int);



implementation _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEeqERKS6_(this: int, __x: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:base "__x"} $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 16} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 16} true;
    assert !aliasQ2535(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 27} true;
    $p2 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 27} true;
    assert !aliasQ2536(__x, NULL);
    $p3 := $M.119[$p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 16} true;
    $i4 := (if $p1 == $p3 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 9} true;
    $r := $i4;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_M_endEv: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_M_endEv == NULL - 9408;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_M_endEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_M_endEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 513, 45} true;
    $p0 := this;
    $p1 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 513, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 513, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_beginEv: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_beginEv == NULL - 9416;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_beginEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_beginEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var $p4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 502, 40} true;
    $p0 := this;
    $p1 := this + 8;
    $p2 := this + 8 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 502, 40} true;
    assert !aliasQ2537(this, NULL);
    $p3 := $M.2[$p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 502, 16} true;
    $p4 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 502, 9} true;
    $r := $p4;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_ESE_RS1_: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_ESE_RS1_ == NULL - 9424;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_ESE_RS1_(this: int, __x: int, __y: int, __k: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_ESE_RS1_(this: int, __x: int, __y: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:scalar} $i3: int;
  var {:base "this"} $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;
  var {:scalar} $i7: int;
  var $p8: int;
  var $p9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p0"} $p12: int;
  var $p13: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1140, 7} true;
    $p1, $p2 := __x, __y;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1140, 14} true;
    $i3 := (if $p1 != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1140, 7} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1141, 7} true;
    $p4 := this;
    $p5 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1141, 30} true;
    call $p6 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1141, 7} true;
    call $i7 := _ZNKSt4lessISsEclERKSsS2_($p5, $p6, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1141, 6} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:partition} !($i3 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1145, 7} true;
    call _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E($p0, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1145, 7} true;
    $p12 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1145, 7} true;
    assert !aliasQ2538($p0, NULL);
    $p13 := $M.2[$p12];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1145, 7} true;
    $r := $p13;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i7 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1144, 19} true;
    $p10 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1144, 10} true;
    call $p11 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base($p10);
    call {:cexpr "__x"} boogie_si_record_ref($p11);
    $p1, $p2 := $p11, $p2;
    goto $bb1;

  $bb5:
    assume {:partition} !($i7 == 1);
    call {:cexpr "__y"} boogie_si_record_ref($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1142, 29} true;
    $p8 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1142, 21} true;
    call $p9 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base($p8);
    call {:cexpr "__x"} boogie_si_record_ref($p9);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1142, 4} true;
    $p1, $p2 := $p9, $p1;
    goto $bb1;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base == NULL - 9432;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base(__x: int) returns ($r: int)
{
  var {:base "__x"} $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 537, 40} true;
    $p0 := __x + 24;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 537, 40} true;
    assert !aliasQ2539(__x, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 537, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 537, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base == NULL - 9440;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base(__x: int) returns ($r: int)
{
  var {:base "__x"} $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 529, 40} true;
    $p0 := __x + 16;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 529, 40} true;
    assert !aliasQ2540(__x, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 529, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 529, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E == NULL - 9448;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E(__x: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call $p0 := $alloc(1 * 1);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 525, 30} true;
    call $p1 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_valueEPKSt13_Rb_tree_nodeIS5_E(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 525, 16} true;
    call $p2 := _ZNKSt10_Select1stISt4pairIKSsPN4uORB10DeviceNodeEEEclERKS5_($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 525, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_valueEPKSt13_Rb_tree_nodeIS5_E: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_valueEPKSt13_Rb_tree_nodeIS5_E == NULL - 9456;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_valueEPKSt13_Rb_tree_nodeIS5_E(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_valueEPKSt13_Rb_tree_nodeIS5_E(__x: int) returns ($r: int)
{
  var {:base "__x"} $p0: int;

  $bb0:
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 521, 9} true;
    $p0 := __x + 32;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 521, 9} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZSt4moveIRSsEONSt16remove_referenceIT_E4typeEOS2_: int;

axiom _ZSt4moveIRSsEONSt16remove_referenceIT_E4typeEOS2_ == NULL - 9464;

procedure _ZSt4moveIRSsEONSt16remove_referenceIT_E4typeEOS2_(__t: int) returns ($r: int);



implementation _ZSt4moveIRSsEONSt16remove_referenceIT_E4typeEOS2_(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 102, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZSt16forward_as_tupleIJSsEESt5tupleIJDpOT_EES3_: int;

axiom _ZSt16forward_as_tupleIJSsEESt5tupleIJDpOT_EES3_ == NULL - 9472;

procedure _ZSt16forward_as_tupleIJSsEESt5tupleIJDpOT_EES3_(__args: int) returns ($r: int);



implementation _ZSt16forward_as_tupleIJSsEESt5tupleIJDpOT_EES3_(__args: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p0"} $p2: int;
  var {:base "$p0"} $p3: int;
  var {:base "$p0"} $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 870, 36} true;
    call $p1 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 870, 7} true;
    call _ZNSt5tupleIJOSsEEC2IJSsEvEEDpOT_($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 870, 7} true;
    $p2 := $p0;
    $p3 := $p0;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 870, 7} true;
    assert !aliasQ2541($p0, NULL);
    $p5 := $M.129[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 870, 7} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNSt5tupleIJOSsEEC2IJSsEvEEDpOT_: int;

axiom _ZNSt5tupleIJOSsEEC2IJSsEvEEDpOT_ == NULL - 9480;

procedure _ZNSt5tupleIJOSsEEC2IJSsEvEEDpOT_(this: int, __elements: int);



implementation _ZNSt5tupleIJOSsEEC2IJSsEvEEDpOT_(this: int, __elements: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__elements"} boogie_si_record_ref(__elements);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 407, 56} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 407, 15} true;
    call $p1 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__elements);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 407, 56} true;
    call _ZNSt11_Tuple_implILm0EJOSsEEC2ISsJEvEEOT_DpOT0_($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 407, 58} true;
    $exn := false;
    return;
}



const _ZNSt11_Tuple_implILm0EJOSsEEC2ISsJEvEEOT_DpOT0_: int;

axiom _ZNSt11_Tuple_implILm0EJOSsEEC2ISsJEvEEOT_DpOT0_ == NULL - 9488;

procedure _ZNSt11_Tuple_implILm0EJOSsEEC2ISsJEvEEOT_DpOT0_(this: int, __head: int);



implementation _ZNSt11_Tuple_implILm0EJOSsEEC2ISsJEvEEOT_DpOT0_(this: int, __head: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__head"} boogie_si_record_ref(__head);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 264, 40} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 264, 10} true;
    call $p1 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__head);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 264, 40} true;
    call _ZNSt10_Head_baseILm0EOSsLb0EEC2ISsEEOT_($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 264, 42} true;
    $exn := false;
    return;
}



const _ZNSt10_Head_baseILm0EOSsLb0EEC2ISsEEOT_: int;

axiom _ZNSt10_Head_baseILm0EOSsLb0EEC2ISsEEOT_ == NULL - 9496;

procedure _ZNSt10_Head_baseILm0EOSsLb0EEC2ISsEEOT_(this: int, __h: int);



implementation _ZNSt10_Head_baseILm0EOSsLb0EEC2ISsEEOT_(this: int, __h: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__h"} boogie_si_record_ref(__h);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 142, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 142, 17} true;
    call $p1 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__h);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 142, 4} true;
    assert !aliasQ2542(this, NULL);
    $M.129 := $M.129[$p0 := $p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 142, 46} true;
    $exn := false;
    return;
}



const _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE: int;

axiom _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE == NULL - 9504;

procedure _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZNSt23_Rb_tree_const_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2ERKSt17_Rb_tree_iteratorIS5_E: int;

axiom _ZNSt23_Rb_tree_const_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2ERKSt17_Rb_tree_iteratorIS5_E == NULL - 9512;

procedure _ZNSt23_Rb_tree_const_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2ERKSt17_Rb_tree_iteratorIS5_E(this: int, __it: int);



implementation _ZNSt23_Rb_tree_const_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2ERKSt17_Rb_tree_iteratorIS5_E(this: int, __it: int)
{
  var {:base "this"} $p0: int;
  var {:base "__it"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__it"} boogie_si_record_ref(__it);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 251, 9} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 251, 17} true;
    $p1 := __it;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 251, 17} true;
    assert !aliasQ2543(__it, NULL);
    $p2 := $M.2[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 251, 9} true;
    assert !aliasQ2544(this, NULL);
    $M.121 := $M.121[$p0 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 251, 33} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOSsEESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOSsEESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_ == NULL - 9520;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOSsEESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_(this: int, __pos.coerce: int, __args: int, __args1: int, __args2: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOSsEESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_(this: int, __pos.coerce: int, __args: int, __args1: int, __args2: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "$p1"} $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var $p8: int;
  var $p9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p3"} $p12: int;
  var $p13: int;
  var $p14: int;
  var {:scalar} $p15: int;
  var {:base "$p14"} $p16: int;
  var $p17: int;
  var {:base "$p14"} $p18: int;
  var $p19: int;
  var $p20: int;
  var {:base "$p20"} $p21: int;
  var {:base "$p20"} $p22: int;
  var {:base "$p2"} $p23: int;
  var $p24: int;
  var {:scalar} $i25: int;
  var {:base "$p2"} $p26: int;
  var $p27: int;
  var {:base "$p2"} $p28: int;
  var $p29: int;
  var $p30: int;
  var {:base "$p0"} $p31: int;
  var {:base "$p2"} $p32: int;
  var $p33: int;
  var $p34: int;
  var {:base "$p0"} $p35: int;
  var $p36: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(16 * 1);
    call $p3 := $alloc(8 * 1);
    $p4 := $p1;
    assert !aliasQ2545($p1, NULL);
    $M.130 := $M.130[$p4 := __pos.coerce];
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume true;
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    call {:cexpr "__args"} boogie_si_record_ref(__args1);
    call {:cexpr "__args"} boogie_si_record_ref(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1669, 34} true;
    call $p5 := _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1669, 34} true;
    call $p6 := _ZSt7forwardISt5tupleIJOSsEEEOT_RNSt16remove_referenceIS3_E4typeE(__args1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1669, 34} true;
    call $p7 := _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1669, 19} true;
    call $p8 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOSsEESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_(this, $p5, $p6, $p7);
    call {:cexpr "__z"} boogie_si_record_ref($p8);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 19} true;
    $p9 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 19} true;
    $p10 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 19} true;
    assert !aliasQ2546($p9, NULL);
    assert !aliasQ2547($p10, NULL);
    $M.130[$p9] := $M.130[$p10];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 56} true;
    call $p11 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E($p8);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 19} true;
    $p12 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 19} true;
    assert !aliasQ2548($p3, NULL);
    $p13 := $M.130[$p12];
    call $p14 := $alloc(16 * 1);
    call $p15 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_5($p14, this, $p13, $p11);
    $p16 := $p14;
    assert !aliasQ2549($p14, NULL);
    $p17 := $M.133[$p16];
    $p18 := $p14 + 8;
    assert !aliasQ2550($p14, NULL);
    $p19 := $M.133[$p18];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 19} true;
    $p20 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 19} true;
    $p21 := $p20;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 19} true;
    assert !aliasQ2551($p20, NULL);
    $M.134 := $M.134[$p21 := $p17];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 19} true;
    $p22 := $p20 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1673, 19} true;
    assert !aliasQ2552($p20, NULL);
    $M.135 := $M.135[$p22 := $p19];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1675, 10} true;
    $p23 := $p2 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1675, 10} true;
    assert !aliasQ2553($p2, NULL);
    $p24 := $M.135[$p23];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1675, 10} true;
    $i25 := (if $p24 != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1675, 10} true;
    assume {:branchcond $i25} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i25 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1676, 30} true;
    $p26 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1676, 30} true;
    assert !aliasQ2554($p2, NULL);
    $p27 := $M.134[$p26];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1676, 43} true;
    $p28 := $p2 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1676, 43} true;
    assert !aliasQ2555($p2, NULL);
    $p29 := $M.135[$p28];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1676, 15} true;
    call $p30 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E(this, $p27, $p29, $p8);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1676, 15} true;
    $p31 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1676, 15} true;
    assert !aliasQ2556($p0, NULL);
    $M.2 := $M.2[$p31 := $p30];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1676, 8} true;
    goto $bb3;

  $bb2:
    assume {:partition} !($i25 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1678, 6} true;
    call _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E(this, $p8);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1679, 46} true;
    $p32 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1679, 46} true;
    assert !aliasQ2557($p2, NULL);
    $p33 := $M.134[$p32];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1679, 22} true;
    $p34 := $p33;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1679, 6} true;
    call _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E($p0, $p34);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1679, 6} true;
    goto $bb3;

  $bb3:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1686, 7} true;
    $p35 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1686, 7} true;
    assert !aliasQ2558($p0, NULL);
    $p36 := $M.2[$p35];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1686, 7} true;
    $r := $p36;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E == NULL - 9528;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E(this: int, __p: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E(this: int, __p: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 421, 2} true;
    call $p0 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE21_M_get_Node_allocatorEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 421, 2} true;
    $p1 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 421, 2} true;
    call _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE7destroyIS8_EEvPT_($p1, __p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 422, 2} true;
    call _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E(this, __p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 423, 7} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E == NULL - 9536;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E(this: int, __p: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E(this: int, __p: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 374, 9} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 374, 9} true;
    $p1 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 374, 9} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 374, 9} true;
    call _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE10deallocateEPS8_m($p2, __p, 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 374, 54} true;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE10deallocateEPS8_m: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE10deallocateEPS8_m == NULL - 9544;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE10deallocateEPS8_m(this: int, __p: int, {:scalar} $i0: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE10deallocateEPS8_m(this: int, __p: int, $i0: int)
{
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    call {:cexpr ""} boogie_si_record_i64($i0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 110, 27} true;
    $p1 := __p;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 110, 9} true;
    call _ZdlPv($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 110, 33} true;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE7destroyIS8_EEvPT_: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE7destroyIS8_EEvPT_ == NULL - 9552;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE7destroyIS8_EEvPT_(this: int, __p: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE7destroyIS8_EEvPT_(this: int, __p: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 124, 29} true;
    call _ZNSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEED2Ev(__p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 124, 42} true;
    $exn := false;
    return;
}



const _ZNSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEED2Ev: int;

axiom _ZNSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEED2Ev == NULL - 9560;

procedure _ZNSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEED2Ev(this: int);



implementation _ZNSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEED2Ev(this: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 131, 12} true;
    $p0 := this + 32;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 131, 12} true;
    call _ZNSt4pairIKSsPN4uORB10DeviceNodeEED2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 131, 12} true;
    $exn := false;
    return;
}



const _ZNSt4pairIKSsPN4uORB10DeviceNodeEED2Ev: int;

axiom _ZNSt4pairIKSsPN4uORB10DeviceNodeEED2Ev == NULL - 9568;

procedure _ZNSt4pairIKSsPN4uORB10DeviceNodeEED2Ev(this: int);



implementation _ZNSt4pairIKSsPN4uORB10DeviceNodeEED2Ev(this: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 96, 12} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 96, 12} true;
    call _ZNSsD1Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 96, 12} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE21_M_get_Node_allocatorEv: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE21_M_get_Node_allocatorEv == NULL - 9576;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE21_M_get_Node_allocatorEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE21_M_get_Node_allocatorEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 357, 47} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 357, 47} true;
    $p1 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 357, 9} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E == NULL - 9584;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E(this: int, __x: int, __p: int, __z: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E(this: int, __x: int, __p: int, __z: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var $p3: int;
  var $p4: int;
  var {:scalar} $i5: int;
  var {:base "this"} $p6: int;
  var {:base "this"} $p7: int;
  var $p8: int;
  var $p9: int;
  var {:scalar} $i10: int;
  var {:scalar} $i2: int;
  var {:scalar} $i11: int;
  var {:scalar} $i12: int;
  var $p13: int;
  var {:base "this"} $p14: int;
  var {:base "this"} $p15: int;
  var {:base "this"} $p16: int;
  var {:base "this"} $p17: int;
  var {:scalar} $i18: int;
  var {:scalar} $i19: int;
  var {:base "$p0"} $p20: int;
  var $p21: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    call {:cexpr "__z"} boogie_si_record_ref(__z);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1571, 29} true;
    $i1 := (if __x != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1571, 29} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1571, 29} true;
    assume {:partition} $i1 == 1;
    goto $bb2;

  $bb2:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1571, 12} true;
    $i11 := $i2;
    call {:cexpr "__insert_left"} boogie_si_record_i8($i11);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1575, 37} true;
    $i12 := $i11;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1575, 52} true;
    $p13 := __z;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1575, 7} true;
    $p14 := this;
    $p15 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1575, 7} true;
    call _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_($i12, $p13, __p, $p15);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1577, 7} true;
    $p16 := this;
    $p17 := this + 40;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1577, 7} true;
    assert !aliasQ2559(this, NULL);
    $i18 := $M.2[$p17];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1577, 7} true;
    $i19 := $i18 + 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1577, 7} true;
    assert !aliasQ2560(this, NULL);
    $M.2 := $M.2[$p17 := $i19];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1578, 7} true;
    call _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E($p0, __z);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1578, 7} true;
    $p20 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1578, 7} true;
    assert !aliasQ2561($p0, NULL);
    $p21 := $M.2[$p20];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1578, 7} true;
    $r := $p21;
    $exn := false;
    return;

  $bb3:
    assume {:partition} !($i1 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1571, 48} true;
    call $p3 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_M_endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1571, 48} true;
    $p4 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1571, 41} true;
    $i5 := (if __p == $p4 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1571, 29} true;
    $i2 := 1;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb4:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1571, 29} true;
    assume {:partition} $i5 == 1;
    goto $bb2;

  $bb5:
    assume {:partition} !($i5 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1572, 11} true;
    $p6 := this;
    $p7 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1572, 34} true;
    call $p8 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E(__z);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1573, 13} true;
    call $p9 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base(__p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1572, 11} true;
    call $i10 := _ZNKSt4lessISsEclERKSsS2_($p7, $p8, $p9);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1571, 29} true;
    $i2 := $i10;
    goto $bb2;
}



const _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEEOT_RKS1_: int;

axiom _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEEOT_RKS1_ == NULL - 9592;

procedure _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEEOT_RKS1_(this: int, __x: int, __y: int);



implementation _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEEOT_RKS1_(this: int, __x: int, __y: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;
  var $p4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 134, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 134, 10} true;
    call $p1 := _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 134, 10} true;
    assert !aliasQ2562($p1, NULL);
    $p2 := $M.2[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 134, 4} true;
    assert !aliasQ2563(this, NULL);
    $M.133 := $M.133[$p0 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 134, 35} true;
    $p3 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 134, 42} true;
    assert !aliasQ2564(__y, NULL);
    $p4 := $M.136[__y];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 134, 35} true;
    assert !aliasQ2565(this, NULL);
    $M.133 := $M.133[$p3 := $p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 134, 49} true;
    $exn := false;
    return;
}



const _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE: int;

axiom _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE == NULL - 9600;

procedure _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEppEv: int;

axiom _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEppEv == NULL - 9608;

procedure _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEppEv(this: int) returns ($r: int);



implementation _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEppEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 189, 31} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 189, 31} true;
    assert !aliasQ2566(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 189, 12} true;
    call $p2 := _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 189, 2} true;
    $p3 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 189, 2} true;
    assert !aliasQ2567(this, NULL);
    $M.2 := $M.2[$p3 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 190, 2} true;
    $r := this;
    $exn := false;
    return;
}



const _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEmmEv: int;

axiom _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEmmEv == NULL - 9616;

procedure _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEmmEv(this: int) returns ($r: int);



implementation _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEmmEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 204, 31} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 204, 31} true;
    assert !aliasQ2568(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 204, 12} true;
    call $p2 := _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 204, 2} true;
    $p3 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 204, 2} true;
    assert !aliasQ2569(this, NULL);
    $M.2 := $M.2[$p3 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 205, 2} true;
    $r := this;
    $exn := false;
    return;
}



const _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_vEEOT_OT0_: int;

axiom _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_vEEOT_OT0_ == NULL - 9624;

procedure _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_vEEOT_OT0_(this: int, __x: int, __y: int);



implementation _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_vEEOT_OT0_(this: int, __x: int, __y: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;
  var $p4: int;
  var $p5: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    call $p1 := _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    assert !aliasQ2570($p1, NULL);
    $p2 := $M.2[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    assert !aliasQ2571(this, NULL);
    $M.133 := $M.133[$p0 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    $p3 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    call $p4 := _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    assert !aliasQ2572($p4, NULL);
    $p5 := $M.2[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    assert !aliasQ2573(this, NULL);
    $M.133 := $M.133[$p3 := $p5];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 68} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_leftmostEv: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_leftmostEv == NULL - 9632;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_leftmostEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_leftmostEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 486, 9} true;
    $p0 := this;
    $p1 := this + 8;
    $p2 := this + 8 + 16;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 486, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKSsPN4uORB10DeviceNodeEEESC_vEEOT_OT0_: int;

axiom _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKSsPN4uORB10DeviceNodeEEESC_vEEOT_OT0_ == NULL - 9640;

procedure _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKSsPN4uORB10DeviceNodeEEESC_vEEOT_OT0_(this: int, __x: int, __y: int);



implementation _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKSsPN4uORB10DeviceNodeEEESC_vEEOT_OT0_(this: int, __x: int, __y: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    call $p1 := _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEOT_RNSt16remove_referenceISA_E4typeE(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    assert !aliasQ2574($p1, NULL);
    $p2 := $M.137[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    $p3 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    assert !aliasQ2575(this, NULL);
    $M.133 := $M.133[$p0 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    $p4 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    call $p5 := _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEOT_RNSt16remove_referenceISA_E4typeE(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    assert !aliasQ2576($p5, NULL);
    $p6 := $M.137[$p5];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    $p7 := $p6;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    assert !aliasQ2577(this, NULL);
    $M.133 := $M.133[$p4 := $p6];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 68} true;
    $exn := false;
    return;
}



const _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEOT_RNSt16remove_referenceISA_E4typeE: int;

axiom _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEOT_RNSt16remove_referenceISA_E4typeE == NULL - 9648;

procedure _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEOT_RNSt16remove_referenceISA_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEOT_RNSt16remove_referenceISA_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE5beginEv: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE5beginEv == NULL - 9656;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE5beginEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE5beginEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var {:base "this"} $p3: int;
  var $p4: int;
  var $p5: int;
  var {:base "$p0"} $p6: int;
  var $p7: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 685, 5} true;
    $p1 := this;
    $p2 := this + 8;
    $p3 := this + 8 + 16;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 685, 5} true;
    assert !aliasQ2578(this, NULL);
    $p4 := $M.2[$p3];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 684, 18} true;
    $p5 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 684, 2} true;
    call _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E($p0, $p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 684, 2} true;
    $p6 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 684, 2} true;
    assert !aliasQ2579($p0, NULL);
    $p7 := $M.2[$p6];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 684, 2} true;
    $r := $p7;
    $exn := false;
    return;
}



const _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEERKS1_OT_: int;

axiom _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEERKS1_OT_ == NULL - 9664;

procedure _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEERKS1_OT_(this: int, __x: int, __y: int);



implementation _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEERKS1_OT_(this: int, __x: int, __y: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var $p4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 139, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 139, 10} true;
    assert !aliasQ2580(__x, NULL);
    $p1 := $M.138[__x];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 139, 4} true;
    assert !aliasQ2581(this, NULL);
    $M.133 := $M.133[$p0 := $p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 139, 16} true;
    $p2 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 139, 23} true;
    call $p3 := _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 139, 23} true;
    assert !aliasQ2582($p3, NULL);
    $p4 := $M.2[$p3];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 139, 16} true;
    assert !aliasQ2583(this, NULL);
    $M.133 := $M.133[$p2 := $p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 139, 49} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE12_M_rightmostEv: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE12_M_rightmostEv == NULL - 9672;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE12_M_rightmostEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE12_M_rightmostEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 494, 9} true;
    $p0 := this;
    $p1 := this + 8;
    $p2 := this + 8 + 24;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 494, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNKSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4sizeEv: int;

axiom _ZNKSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4sizeEv == NULL - 9680;

procedure _ZNKSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4sizeEv(this: int) returns ({:scalar} $r: int);



implementation _ZNKSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4sizeEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:scalar} $i2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 728, 16} true;
    $p0 := this;
    $p1 := this + 40;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 728, 16} true;
    assert !aliasQ2584(this, NULL);
    $i2 := $M.2[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 728, 9} true;
    $r := $i2;
    $exn := false;
    return;
}



const _ZNKSt23_Rb_tree_const_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEE13_M_const_castEv: int;

axiom _ZNKSt23_Rb_tree_const_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEE13_M_const_castEv == NULL - 9688;

procedure _ZNKSt23_Rb_tree_const_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEE13_M_const_castEv(this: int) returns ($r: int);



implementation _ZNKSt23_Rb_tree_const_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEE13_M_const_castEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "$p0"} $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 256, 46} true;
    $p1 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 256, 46} true;
    assert !aliasQ2585(this, NULL);
    $p2 := $M.139[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 255, 25} true;
    $p3 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 255, 9} true;
    call _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E($p0, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 255, 9} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 255, 9} true;
    assert !aliasQ2586($p0, NULL);
    $p5 := $M.2[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 255, 9} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE: int;

axiom _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE == NULL - 9696;

procedure _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZSt7forwardISt5tupleIJOSsEEEOT_RNSt16remove_referenceIS3_E4typeE: int;

axiom _ZSt7forwardISt5tupleIJOSsEEEOT_RNSt16remove_referenceIS3_E4typeE == NULL - 9704;

procedure _ZSt7forwardISt5tupleIJOSsEEEOT_RNSt16remove_referenceIS3_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardISt5tupleIJOSsEEEOT_RNSt16remove_referenceIS3_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE: int;

axiom _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE == NULL - 9712;

procedure _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOSsEESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOSsEESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_ == NULL - 9720;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOSsEESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_(this: int, __args: int, __args1: int, __args2: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOSsEESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_(this: int, __args: int, __args1: int, __args2: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    call {:cexpr "__args"} boogie_si_record_ref(__args1);
    call {:cexpr "__args"} boogie_si_record_ref(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 403, 23} true;
    call $p0 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_get_nodeEv(this);
    call {:cexpr "__tmp"} boogie_si_record_ref($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 407, 13} true;
    call $p1 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE21_M_get_Node_allocatorEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 408, 6} true;
    call $p2 := _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 408, 6} true;
    call $p3 := _ZSt7forwardISt5tupleIJOSsEEEOT_RNSt16remove_referenceIS3_E4typeE(__args1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 408, 6} true;
    call $p4 := _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 406, 8} true;
    call _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEEDTcl12_S_constructfp_fp0_spclsr3stdE7forwardIT0_Efp1_EEERS8_PT_DpOSI_($p1, $p0, $p2, $p3, $p4);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 415, 4} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEEDTcl12_S_constructfp_fp0_spclsr3stdE7forwardIT0_Efp1_EEERS8_PT_DpOSI_: int;

axiom _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEEDTcl12_S_constructfp_fp0_spclsr3stdE7forwardIT0_Efp1_EEERS8_PT_DpOSI_ == NULL - 9728;

procedure _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEEDTcl12_S_constructfp_fp0_spclsr3stdE7forwardIT0_Efp1_EEERS8_PT_DpOSI_(__a: int, __p: int, __args: int, __args1: int, __args2: int);



implementation _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEEDTcl12_S_constructfp_fp0_spclsr3stdE7forwardIT0_Efp1_EEERS8_PT_DpOSI_(__a: int, __p: int, __args: int, __args1: int, __args2: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "__a"} boogie_si_record_ref(__a);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    call {:cexpr "__args"} boogie_si_record_ref(__args1);
    call {:cexpr "__args"} boogie_si_record_ref(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 393, 27} true;
    call $p0 := _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 393, 27} true;
    call $p1 := _ZSt7forwardISt5tupleIJOSsEEEOT_RNSt16remove_referenceIS3_E4typeE(__args1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 393, 27} true;
    call $p2 := _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 393, 4} true;
    call _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEE12_S_constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEENSt9enable_ifIXsr18__construct_helperIT_DpT0_EE5valueEvE4typeERS8_PSJ_DpOSK_(__a, __p, $p0, $p1, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 393, 60} true;
    $exn := false;
    return;
}



const _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEE12_S_constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEENSt9enable_ifIXsr18__construct_helperIT_DpT0_EE5valueEvE4typeERS8_PSJ_DpOSK_: int;

axiom _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEE12_S_constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEENSt9enable_ifIXsr18__construct_helperIT_DpT0_EE5valueEvE4typeERS8_PSJ_DpOSK_ == NULL - 9736;

procedure _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEE12_S_constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEENSt9enable_ifIXsr18__construct_helperIT_DpT0_EE5valueEvE4typeERS8_PSJ_DpOSK_(__a: int, __p: int, __args: int, __args1: int, __args2: int);



implementation _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEE12_S_constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEENSt9enable_ifIXsr18__construct_helperIT_DpT0_EE5valueEvE4typeERS8_PSJ_DpOSK_(__a: int, __p: int, __args: int, __args1: int, __args2: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;

  $bb0:
    call {:cexpr "__a"} boogie_si_record_ref(__a);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    call {:cexpr "__args"} boogie_si_record_ref(__args1);
    call {:cexpr "__args"} boogie_si_record_ref(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 254, 4} true;
    $p0 := __a;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 254, 23} true;
    call $p1 := _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 254, 23} true;
    call $p2 := _ZSt7forwardISt5tupleIJOSsEEEOT_RNSt16remove_referenceIS3_E4typeE(__args1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 254, 23} true;
    call $p3 := _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 254, 4} true;
    call _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEEvPT_DpOT0_($p0, __p, $p1, $p2, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 254, 56} true;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEEvPT_DpOT0_: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEEvPT_DpOT0_ == NULL - 9744;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEEvPT_DpOT0_(this: int, __p: int, __args: int, __args1: int, __args2: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJOSsEESE_IJEEEEEvPT_DpOT0_(this: int, __p: int, __args: int, __args1: int, __args2: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    call {:cexpr "__args"} boogie_si_record_ref(__args1);
    call {:cexpr "__args"} boogie_si_record_ref(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 18} true;
    $p0 := __p;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    $i1 := (if $p0 == NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    assume {:partition} $i1 == 1;
    goto $bb2;

  $bb2:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 60} true;
    $exn := false;
    return;

  $bb3:
    assume {:partition} !($i1 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    $p2 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 27} true;
    call $p3 := _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 27} true;
    call $p4 := _ZSt7forwardISt5tupleIJOSsEEEOT_RNSt16remove_referenceIS3_E4typeE(__args1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 27} true;
    call $p5 := _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    call _ZNSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEC2IJRKSt21piecewise_construct_tSt5tupleIJOSsEESB_IJEEEEEDpOT_($p2, $p3, $p4, $p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    goto $bb2;
}



const _ZNSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEC2IJRKSt21piecewise_construct_tSt5tupleIJOSsEESB_IJEEEEEDpOT_: int;

axiom _ZNSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEC2IJRKSt21piecewise_construct_tSt5tupleIJOSsEESB_IJEEEEEDpOT_ == NULL - 9752;

procedure _ZNSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEC2IJRKSt21piecewise_construct_tSt5tupleIJOSsEESB_IJEEEEEDpOT_(this: int, __args: int, __args1: int, __args2: int);



implementation _ZNSt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEC2IJRKSt21piecewise_construct_tSt5tupleIJOSsEESB_IJEEEEEDpOT_(this: int, __args: int, __args1: int, __args2: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var {:base "$p0"} $p7: int;
  var {:base "$p0"} $p8: int;
  var {:base "$p0"} $p9: int;
  var $p10: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    call {:cexpr "__args"} boogie_si_record_ref(__args1);
    call {:cexpr "__args"} boogie_si_record_ref(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 51} true;
    $p1 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 51} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 51} true;
    assert !aliasQ2587($p2, NULL);
    $M.2[$p2] := NULL;
    assert !aliasQ2588($p2 + 8, NULL);
    $M.2[$p2 + 8] := NULL;
    assert !aliasQ2589($p2 + 16, NULL);
    $M.2[$p2 + 16] := NULL;
    assert !aliasQ2590($p2 + 24, NULL);
    $M.2[$p2 + 24] := NULL;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 4} true;
    $p3 := this + 32;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 19} true;
    call $p4 := _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 19} true;
    call $p5 := _ZSt7forwardISt5tupleIJOSsEEEOT_RNSt16remove_referenceIS3_E4typeE(__args1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 4} true;
    call _ZNSt5tupleIJOSsEEC2EOS1_($p0, $p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 19} true;
    call $p6 := _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE(__args2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 4} true;
    $p7 := $p0;
    $p8 := $p0;
    $p9 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 4} true;
    assert !aliasQ2591($p0, NULL);
    $p10 := $M.129[$p9];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 4} true;
    call _ZNSt4pairIKSsPN4uORB10DeviceNodeEEC2IJOSsEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE($p3, $p10);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 53} true;
    $exn := false;
    return;
}



const _ZNSt4pairIKSsPN4uORB10DeviceNodeEEC2IJOSsEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE: int;

axiom _ZNSt4pairIKSsPN4uORB10DeviceNodeEEC2IJOSsEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE == NULL - 9760;

procedure _ZNSt4pairIKSsPN4uORB10DeviceNodeEEC2IJOSsEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE(this: int, __first.coerce: int);



implementation _ZNSt4pairIKSsPN4uORB10DeviceNodeEEC2IJOSsEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE(this: int, __first.coerce: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "$p0"} $p2: int;
  var {:base "$p0"} $p3: int;
  var {:base "$p0"} $p4: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(1 * 1);
    $p2 := $p0;
    $p3 := $p0;
    $p4 := $p0;
    assert !aliasQ2592($p0, NULL);
    $M.120 := $M.120[$p4 := __first.coerce];
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume true;
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 1080, 7} true;
    call _ZNSt4pairIKSsPN4uORB10DeviceNodeEEC2IJOSsEJLm0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE(this, $p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 1080, 9} true;
    $exn := false;
    return;
}



const _ZNSt4pairIKSsPN4uORB10DeviceNodeEEC2IJOSsEJLm0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE: int;

axiom _ZNSt4pairIKSsPN4uORB10DeviceNodeEEC2IJOSsEJLm0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE == NULL - 9768;

procedure _ZNSt4pairIKSsPN4uORB10DeviceNodeEEC2IJOSsEJLm0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE(this: int, __tuple1: int, __tuple2: int);



implementation _ZNSt4pairIKSsPN4uORB10DeviceNodeEEC2IJOSsEJLm0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE(this: int, __tuple1: int, __tuple2: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__tuple1"} boogie_si_record_ref(__tuple1);
    call {:cexpr "__tuple2"} boogie_si_record_ref(__tuple2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 1089, 9} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 1089, 36} true;
    call $p1 := _ZSt3getILm0EJOSsEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERS6_(__tuple1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 1089, 15} true;
    call $p2 := _ZSt7forwardIOSsEOT_RNSt16remove_referenceIS1_E4typeE($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 1089, 9} true;
    call _ZNSsC1EOSs($p0, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 1090, 9} true;
    $p3 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 1090, 9} true;
    assert !aliasQ2593(this, NULL);
    $M.2 := $M.2[$p3 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 1091, 9} true;
    $exn := false;
    return;
}



const _ZSt3getILm0EJOSsEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERS6_: int;

axiom _ZSt3getILm0EJOSsEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERS6_ == NULL - 9776;

procedure _ZSt3getILm0EJOSsEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERS6_(__t: int) returns ($r: int);



implementation _ZSt3getILm0EJOSsEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERS6_(__t: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 760, 14} true;
    $p0 := __t;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 760, 14} true;
    call $p1 := _ZSt12__get_helperILm0EOSsJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS2_DpT1_EE($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 760, 7} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZSt12__get_helperILm0EOSsJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS2_DpT1_EE: int;

axiom _ZSt12__get_helperILm0EOSsJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS2_DpT1_EE == NULL - 9784;

procedure _ZSt12__get_helperILm0EOSsJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS2_DpT1_EE(__t: int) returns ($r: int);



implementation _ZSt12__get_helperILm0EOSsJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS2_DpT1_EE(__t: int) returns ($r: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 745, 14} true;
    call $p0 := _ZNSt11_Tuple_implILm0EJOSsEE7_M_headERS1_(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 745, 7} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZNSt11_Tuple_implILm0EJOSsEE7_M_headERS1_: int;

axiom _ZNSt11_Tuple_implILm0EJOSsEE7_M_headERS1_ == NULL - 9792;

procedure _ZNSt11_Tuple_implILm0EJOSsEE7_M_headERS1_(__t: int) returns ($r: int);



implementation _ZNSt11_Tuple_implILm0EJOSsEE7_M_headERS1_(__t: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 241, 51} true;
    $p0 := __t;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 241, 51} true;
    call $p1 := _ZNSt10_Head_baseILm0EOSsLb0EE7_M_headERS1_($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 241, 44} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZNSt10_Head_baseILm0EOSsLb0EE7_M_headERS1_: int;

axiom _ZNSt10_Head_baseILm0EOSsLb0EE7_M_headERS1_ == NULL - 9800;

procedure _ZNSt10_Head_baseILm0EOSsLb0EE7_M_headERS1_(__b: int) returns ($r: int);



implementation _ZNSt10_Head_baseILm0EOSsLb0EE7_M_headERS1_(__b: int) returns ($r: int)
{
  var {:base "__b"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "__b"} boogie_si_record_ref(__b);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 169, 43} true;
    $p0 := __b;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 169, 43} true;
    assert !aliasQ2594(__b, NULL);
    $p1 := $M.120[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 169, 43} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZSt7forwardIOSsEOT_RNSt16remove_referenceIS1_E4typeE: int;

axiom _ZSt7forwardIOSsEOT_RNSt16remove_referenceIS1_E4typeE == NULL - 9808;

procedure _ZSt7forwardIOSsEOT_RNSt16remove_referenceIS1_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardIOSsEOT_RNSt16remove_referenceIS1_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZNSt5tupleIJOSsEEC2EOS1_: int;

axiom _ZNSt5tupleIJOSsEEC2EOS1_ == NULL - 9816;

procedure _ZNSt5tupleIJOSsEEC2EOS1_(this: int, $p0: int);



implementation _ZNSt5tupleIJOSsEEC2EOS1_(this: int, $p0: int)
{
  var $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr ""} boogie_si_record_ref($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 411, 17} true;
    $p1 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 411, 17} true;
    $p2 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 411, 17} true;
    call _ZNSt11_Tuple_implILm0EJOSsEEC2EOS1_($p1, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 411, 17} true;
    $exn := false;
    return;
}



const _ZNSt11_Tuple_implILm0EJOSsEEC2EOS1_: int;

axiom _ZNSt11_Tuple_implILm0EJOSsEEC2EOS1_ == NULL - 9824;

procedure _ZNSt11_Tuple_implILm0EJOSsEEC2EOS1_(this: int, __in: int);



implementation _ZNSt11_Tuple_implILm0EJOSsEEC2EOS1_(this: int, __in: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__in"} boogie_si_record_ref(__in);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 272, 30} true;
    call $p0 := _ZNSt11_Tuple_implILm0EJOSsEE7_M_tailERS1_(__in);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 272, 20} true;
    call $p1 := _ZSt4moveIRSt11_Tuple_implILm1EJEEEONSt16remove_referenceIT_E4typeEOS4_($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 273, 44} true;
    $p2 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 273, 28} true;
    call $p3 := _ZNSt11_Tuple_implILm0EJOSsEE7_M_headERS1_(__in);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 273, 8} true;
    call $p4 := _ZSt7forwardIOSsEOT_RNSt16remove_referenceIS1_E4typeE($p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 272, 20} true;
    call _ZNSt10_Head_baseILm0EOSsLb0EEC2ISsEEOT_($p2, $p4);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 273, 46} true;
    $exn := false;
    return;
}



const _ZNSt11_Tuple_implILm0EJOSsEE7_M_tailERS1_: int;

axiom _ZNSt11_Tuple_implILm0EJOSsEE7_M_tailERS1_ == NULL - 9832;

procedure _ZNSt11_Tuple_implILm0EJOSsEE7_M_tailERS1_(__t: int) returns ($r: int);



implementation _ZNSt11_Tuple_implILm0EJOSsEE7_M_tailERS1_(__t: int) returns ($r: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 247, 44} true;
    $p0 := __t;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/tuple", 247, 44} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZSt4moveIRSt11_Tuple_implILm1EJEEEONSt16remove_referenceIT_E4typeEOS4_: int;

axiom _ZSt4moveIRSt11_Tuple_implILm1EJEEEONSt16remove_referenceIT_E4typeEOS4_ == NULL - 9840;

procedure _ZSt4moveIRSt11_Tuple_implILm1EJEEEONSt16remove_referenceIT_E4typeEOS4_(__t: int) returns ($r: int);



implementation _ZSt4moveIRSt11_Tuple_implILm1EJEEEONSt16remove_referenceIT_E4typeEOS4_(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 102, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_get_nodeEv: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_get_nodeEv == NULL - 9848;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_get_nodeEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_get_nodeEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 370, 16} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 370, 16} true;
    $p1 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 370, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 370, 16} true;
    call $p3 := _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE8allocateEmPKv($p2, 1, NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 370, 9} true;
    $r := $p3;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE8allocateEmPKv: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE8allocateEmPKv == NULL - 9856;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE8allocateEmPKv(this: int, {:scalar} __n: int, $p0: int) returns ($r: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE8allocateEmPKv(this: int, __n: int, $p0: int) returns ($r: int)
{
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var $p4: int;
  var $p5: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__n"} boogie_si_record_i64(__n);
    call {:cexpr ""} boogie_si_record_ref($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 101, 12} true;
    call $i1 := _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE8max_sizeEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 101, 6} true;
    $i2 := (if __n > $i1 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 101, 6} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i2 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 102, 4} true;
    call _ZSt17__throw_bad_allocv();
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 102, 4} true;
    assume false;
    goto $bb2;

  $bb2:
    assume {:partition} !($i2 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 104, 42} true;
    $i3 := __n * 48;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 104, 27} true;
    call $p4 := _Znwm($i3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 104, 9} true;
    $p5 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 104, 2} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE8max_sizeEv: int;

axiom _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE8max_sizeEv == NULL - 9864;

procedure _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE8max_sizeEv(this: int) returns ({:scalar} $r: int);



implementation _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEE8max_sizeEv(this: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 114, 9} true;
    $r := 384307168202282325;
    $exn := false;
    return;
}



const _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEdeEv: int;

axiom _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEdeEv == NULL - 9872;

procedure _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEdeEv(this: int) returns ($r: int);



implementation _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEdeEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "$p2"} $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 179, 40} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 179, 40} true;
    assert !aliasQ2595(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 179, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 179, 9} true;
    $p3 := $p2 + 32;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 179, 9} true;
    $r := $p3;
    $exn := false;
    return;
}



const _ZNKSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE8key_compEv: int;

axiom _ZNKSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE8key_compEv == NULL - 9880;

procedure _ZNKSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE8key_compEv(this: int);



implementation _ZNKSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE8key_compEv(this: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 798, 16} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 798, 16} true;
    call _ZNKSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8key_compEv($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 798, 9} true;
    $exn := false;
    return;
}



const _ZNKSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8key_compEv: int;

axiom _ZNKSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8key_compEv == NULL - 9888;

procedure _ZNKSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8key_compEv(this: int);



implementation _ZNKSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8key_compEv(this: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 679, 9} true;
    $exn := false;
    return;
}



const _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE11lower_boundERS6_: int;

axiom _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE11lower_boundERS6_ == NULL - 9896;

procedure _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE11lower_boundERS6_(this: int, __x: int) returns ($r: int);



implementation _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEE11lower_boundERS6_(this: int, __x: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:base "$p0"} $p3: int;
  var {:base "$p0"} $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 864, 16} true;
    $p1 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 864, 16} true;
    call $p2 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11lower_boundERS1_($p1, __x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 864, 16} true;
    $p3 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 864, 16} true;
    assert !aliasQ2596($p0, NULL);
    $M.140 := $M.140[$p3 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 864, 9} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 864, 9} true;
    assert !aliasQ2597($p0, NULL);
    $p5 := $M.140[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 864, 9} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11lower_boundERS1_: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11lower_boundERS1_ == NULL - 9904;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11lower_boundERS1_(this: int, __k: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11lower_boundERS1_(this: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "$p0"} $p4: int;
  var {:base "$p0"} $p5: int;
  var $p6: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 879, 31} true;
    call $p1 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_beginEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 879, 43} true;
    call $p2 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_M_endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 879, 16} true;
    call $p3 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_ESE_RS1_(this, $p1, $p2, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 879, 16} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 879, 16} true;
    assert !aliasQ2598($p0, NULL);
    $M.141 := $M.141[$p4 := $p3];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 879, 9} true;
    $p5 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 879, 9} true;
    assert !aliasQ2599($p0, NULL);
    $p6 := $M.141[$p5];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 879, 9} true;
    $r := $p6;
    $exn := false;
    return;
}



const _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEEC2Ev: int;

axiom _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEEC2Ev == NULL - 9912;

procedure _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEEC2Ev(this: int);



implementation _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEEC2Ev(this: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 161, 9} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 161, 9} true;
    call _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EEC2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 161, 18} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EEC2Ev: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EEC2Ev == NULL - 9920;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EEC2Ev(this: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EEC2Ev(this: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 648, 7} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 648, 7} true;
    call _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EEC2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 648, 20} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EEC2Ev: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EEC2Ev == NULL - 9928;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EEC2Ev(this: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EEC2Ev(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 448, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 448, 4} true;
    call _ZNSaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEC2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 446, 43} true;
    $p1 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 446, 43} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 446, 43} true;
    assert !aliasQ2600($p2, NULL);
    $M.2[$p2] := NULL;
    assert !aliasQ2601($p2 + 8, NULL);
    $M.2[$p2 + 8] := NULL;
    assert !aliasQ2602($p2 + 16, NULL);
    $M.2[$p2 + 16] := NULL;
    assert !aliasQ2603($p2 + 24, NULL);
    $M.2[$p2 + 24] := NULL;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 447, 6} true;
    $p3 := this + 40;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 447, 6} true;
    assert !aliasQ2604(this, NULL);
    $M.2 := $M.2[$p3 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 448, 6} true;
    call _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EE13_M_initializeEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 448, 23} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EE13_M_initializeEv: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EE13_M_initializeEv == NULL - 9936;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EE13_M_initializeEv(this: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EE13_M_initializeEv(this: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var {:base "this"} $p3: int;
  var {:base "this"} $p4: int;
  var {:base "this"} $p5: int;
  var {:base "this"} $p6: int;
  var {:base "this"} $p7: int;
  var {:base "this"} $p8: int;
  var {:base "this"} $p9: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 466, 6} true;
    $p0 := this + 8;
    $p1 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 466, 6} true;
    assert !aliasQ2605(this, NULL);
    $M.2 := $M.2[$p1 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 467, 6} true;
    $p2 := this + 8;
    $p3 := this + 8 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 467, 6} true;
    assert !aliasQ2606(this, NULL);
    $M.2 := $M.2[$p3 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 468, 32} true;
    $p4 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 468, 6} true;
    $p5 := this + 8;
    $p6 := this + 8 + 16;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 468, 6} true;
    assert !aliasQ2607(this, NULL);
    $M.2 := $M.2[$p6 := $p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 469, 33} true;
    $p7 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 469, 6} true;
    $p8 := this + 8;
    $p9 := this + 8 + 24;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 469, 6} true;
    assert !aliasQ2608(this, NULL);
    $M.2 := $M.2[$p9 := $p7];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 470, 4} true;
    $exn := false;
    return;
}



const _ZNSaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEC2Ev: int;

axiom _ZNSaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEC2Ev == NULL - 9944;

procedure _ZNSaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEC2Ev(this: int);



implementation _ZNSaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEC2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/allocator.h", 113, 27} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/allocator.h", 113, 27} true;
    call _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEC2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/allocator.h", 113, 29} true;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEC2Ev: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEC2Ev == NULL - 9952;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEC2Ev(this: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEEC2Ev(this: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 79, 47} true;
    $exn := false;
    return;
}



const _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEED2Ev: int;

axiom _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEED2Ev == NULL - 9960;

procedure _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEED2Ev(this: int);



implementation _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEED2Ev(this: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 96, 11} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 96, 11} true;
    call _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EED2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_map.h", 96, 11} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EED2Ev: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EED2Ev == NULL - 9968;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EED2Ev(this: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EED2Ev(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 671, 18} true;
    call $p0 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_beginEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 671, 9} true;
    call _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E(this, $p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 671, 31} true;
    $p1 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 671, 31} true;
    call _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EED2Ev($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 671, 31} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EED2Ev: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EED2Ev == NULL - 9976;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EED2Ev(this: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE13_Rb_tree_implIS9_Lb1EED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 439, 16} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 439, 16} true;
    call _ZNSaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEED2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 439, 16} true;
    $exn := false;
    return;
}



const _ZNSaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEED2Ev: int;

axiom _ZNSaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEED2Ev == NULL - 9984;

procedure _ZNSaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEED2Ev(this: int);



implementation _ZNSaISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEED2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/allocator.h", 121, 30} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/allocator.h", 121, 30} true;
    call _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEED2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/allocator.h", 121, 30} true;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEED2Ev: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEED2Ev == NULL - 9992;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEED2Ev(this: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsPN4uORB10DeviceNodeEEEED2Ev(this: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 86, 48} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E == NULL - 10000;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E(this: int, __x: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E(this: int, __x: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1123, 7} true;
    $p0 := __x;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1123, 14} true;
    $i1 := (if $p0 != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1123, 7} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i1 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1125, 22} true;
    $p2 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1125, 13} true;
    call $p3 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base($p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1125, 4} true;
    call _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E(this, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1126, 29} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1126, 21} true;
    call $p5 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base($p4);
    call {:cexpr "__y"} boogie_si_record_ref($p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1127, 4} true;
    call _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E(this, $p0);
    call {:cexpr "__x"} boogie_si_record_ref($p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1123, 7} true;
    $p0 := $p5;
    goto $bb1;

  $bb3:
    assume {:partition} !($i1 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1130, 5} true;
    $exn := false;
    return;
}



const _GLOBAL__sub_I_uORBDevices_posix.cpp: int;

axiom _GLOBAL__sub_I_uORBDevices_posix.cpp == NULL - 10008;

procedure _GLOBAL__sub_I_uORBDevices_posix.cpp();



implementation _GLOBAL__sub_I_uORBDevices_posix.cpp()
{

  $bb0:
    assume {:sourceloc "/proj/SMACK/av_pkg/Firmware/src/modules/uORB/uORBDevices_posix.cpp", 0, 0} true;
    call __cxx_global_var_init();
    $exn := false;
    return;
}



const _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv: int;

axiom _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv == NULL - 10016;

procedure _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv(this: int) returns ($r: int);



implementation _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var {:base "$p0"} $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 703, 11} true;
    $p1 := this;
    $p2 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 702, 24} true;
    $p3 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 702, 2} true;
    call _ZNSt23_Rb_tree_const_iteratorISsEC2EPKSt13_Rb_tree_nodeISsE($p0, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 702, 2} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 702, 2} true;
    assert !aliasQ2609($p0, NULL);
    $p5 := $M.142[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 702, 2} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNSt23_Rb_tree_const_iteratorISsEC2EPKSt13_Rb_tree_nodeISsE: int;

axiom _ZNSt23_Rb_tree_const_iteratorISsEC2EPKSt13_Rb_tree_nodeISsE == NULL - 10024;

procedure _ZNSt23_Rb_tree_const_iteratorISsEC2EPKSt13_Rb_tree_nodeISsE(this: int, __x: int);



implementation _ZNSt23_Rb_tree_const_iteratorISsEC2EPKSt13_Rb_tree_nodeISsE(this: int, __x: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 248, 9} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 248, 17} true;
    $p1 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 248, 9} true;
    assert !aliasQ2610(this, NULL);
    $M.142 := $M.142[$p0 := __x];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 248, 24} true;
    $exn := false;
    return;
}



const _ZNSt23_Rb_tree_const_iteratorISsEC2ERKSt17_Rb_tree_iteratorISsE: int;

axiom _ZNSt23_Rb_tree_const_iteratorISsEC2ERKSt17_Rb_tree_iteratorISsE == NULL - 10032;

procedure _ZNSt23_Rb_tree_const_iteratorISsEC2ERKSt17_Rb_tree_iteratorISsE(this: int, __it: int);



implementation _ZNSt23_Rb_tree_const_iteratorISsEC2ERKSt17_Rb_tree_iteratorISsE(this: int, __it: int)
{
  var {:base "this"} $p0: int;
  var {:base "__it"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__it"} boogie_si_record_ref(__it);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 251, 9} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 251, 17} true;
    $p1 := __it;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 251, 17} true;
    assert !aliasQ2611(__it, NULL);
    $p2 := $M.124[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 251, 9} true;
    assert !aliasQ2612(this, NULL);
    $M.113 := $M.113[$p0 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 251, 33} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4findERKSs: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4findERKSs == NULL - 10040;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4findERKSs(this: int, __k: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4findERKSs(this: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var {:base "$p1"} $p6: int;
  var $p7: int;
  var {:base "$p2"} $p8: int;
  var {:scalar} $i9: int;
  var {:base "this"} $p10: int;
  var {:base "this"} $p11: int;
  var {:base "$p1"} $p12: int;
  var $p13: int;
  var $p14: int;
  var {:scalar} $i15: int;
  var $p16: int;
  var {:base "$p0"} $p17: int;
  var $p18: int;
  var $p19: int;
  var {:base "$p0"} $p20: int;
  var $p21: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1792, 37} true;
    call $p3 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_beginEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1792, 49} true;
    call $p4 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_M_endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1792, 22} true;
    call $p5 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_lower_boundEPSt13_Rb_tree_nodeISsES8_RKSs(this, $p3, $p4, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1792, 22} true;
    $p6 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1792, 22} true;
    assert !aliasQ2613($p1, NULL);
    $M.2 := $M.2[$p6 := $p5];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 22} true;
    call $p7 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 22} true;
    $p8 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 22} true;
    assert !aliasQ2614($p2, NULL);
    $M.143 := $M.143[$p8 := $p7];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 15} true;
    call $i9 := _ZNKSt17_Rb_tree_iteratorISsEeqERKS0_($p1, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assume {:partition} $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 30} true;
    call $p16 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 30} true;
    $p17 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 30} true;
    assert !aliasQ2615($p0, NULL);
    $M.2 := $M.2[$p17 := $p16];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    goto $bb6;

  $bb3:
    assume {:partition} !($i9 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1794, 11} true;
    $p10 := this;
    $p11 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 13} true;
    $p12 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 13} true;
    assert !aliasQ2616($p1, NULL);
    $p13 := $M.2[$p12];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1795, 6} true;
    call $p14 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt18_Rb_tree_node_base($p13);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1794, 11} true;
    call $i15 := _ZNKSt4lessISsEclERKSsS2_($p11, __k, $p14);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb4:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assume {:partition} $i15 == 1;
    goto $bb2;

  $bb5:
    assume {:partition} !($i15 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    $p18 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    $p19 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assert !aliasQ2617($p18, NULL);
    assert !aliasQ2618($p19, NULL);
    $M.2[$p18] := $M.2[$p19];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    goto $bb6;

  $bb6:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    $p20 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    assert !aliasQ2619($p0, NULL);
    $p21 := $M.2[$p20];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1793, 7} true;
    $r := $p21;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt18_Rb_tree_node_base: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt18_Rb_tree_node_base == NULL - 10048;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt18_Rb_tree_node_base(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt18_Rb_tree_node_base(__x: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call $p0 := $alloc(1 * 1);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 549, 30} true;
    call $p1 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_valueEPKSt18_Rb_tree_node_base(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 549, 16} true;
    call $p2 := _ZNKSt9_IdentityISsEclERKSs($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 549, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_valueEPKSt18_Rb_tree_node_base: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_valueEPKSt18_Rb_tree_node_base == NULL - 10056;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_valueEPKSt18_Rb_tree_node_base(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_valueEPKSt18_Rb_tree_node_base(__x: int) returns ($r: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;

  $bb0:
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 545, 16} true;
    $p0 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 545, 9} true;
    $p1 := $p0 + 32;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 545, 9} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZNKSt9_IdentityISsEclERKSs: int;

axiom _ZNKSt9_IdentityISsEclERKSs == NULL - 10064;

procedure _ZNKSt9_IdentityISsEclERKSs(this: int, __x: int) returns ($r: int);



implementation _ZNKSt9_IdentityISsEclERKSs(this: int, __x: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_function.h", 482, 9} true;
    $r := __x;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv == NULL - 10072;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var {:base "$p0"} $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 49} true;
    $p1 := this;
    $p2 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 25} true;
    $p3 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 9} true;
    call _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE($p0, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 9} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 9} true;
    assert !aliasQ2620($p0, NULL);
    $p5 := $M.2[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 697, 9} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE: int;

axiom _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE == NULL - 10080;

procedure _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE(this: int, __x: int);



implementation _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE(this: int, __x: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 175, 9} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 175, 17} true;
    $p1 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 175, 9} true;
    assert !aliasQ2621(this, NULL);
    $M.2 := $M.2[$p0 := __x];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 175, 24} true;
    $exn := false;
    return;
}



const _ZNKSt17_Rb_tree_iteratorISsEeqERKS0_: int;

axiom _ZNKSt17_Rb_tree_iteratorISsEeqERKS0_ == NULL - 10088;

procedure _ZNKSt17_Rb_tree_iteratorISsEeqERKS0_(this: int, __x: int) returns ({:scalar} $r: int);



implementation _ZNKSt17_Rb_tree_iteratorISsEeqERKS0_(this: int, __x: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:base "__x"} $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 16} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 16} true;
    assert !aliasQ2622(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 27} true;
    $p2 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 27} true;
    assert !aliasQ2623(__x, NULL);
    $p3 := $M.143[$p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 16} true;
    $i4 := (if $p1 == $p3 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 218, 9} true;
    $r := $i4;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_M_endEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_M_endEv == NULL - 10096;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_M_endEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_M_endEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 513, 45} true;
    $p0 := this;
    $p1 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 513, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 513, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_beginEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_beginEv == NULL - 10104;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_beginEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_beginEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var $p4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 502, 40} true;
    $p0 := this;
    $p1 := this + 8;
    $p2 := this + 8 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 502, 40} true;
    assert !aliasQ2624(this, NULL);
    $p3 := $M.2[$p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 502, 16} true;
    $p4 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 502, 9} true;
    $r := $p4;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_lower_boundEPSt13_Rb_tree_nodeISsES8_RKSs: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_lower_boundEPSt13_Rb_tree_nodeISsES8_RKSs == NULL - 10112;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_lower_boundEPSt13_Rb_tree_nodeISsES8_RKSs(this: int, __x: int, __y: int, __k: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_lower_boundEPSt13_Rb_tree_nodeISsES8_RKSs(this: int, __x: int, __y: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:scalar} $i3: int;
  var {:base "this"} $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;
  var {:scalar} $i7: int;
  var $p8: int;
  var $p9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p0"} $p12: int;
  var $p13: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1140, 7} true;
    $p1, $p2 := __x, __y;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1140, 14} true;
    $i3 := (if $p1 != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1140, 7} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1141, 7} true;
    $p4 := this;
    $p5 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1141, 30} true;
    call $p6 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt13_Rb_tree_nodeISsE($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1141, 7} true;
    call $i7 := _ZNKSt4lessISsEclERKSsS2_($p5, $p6, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1141, 6} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:partition} !($i3 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1145, 7} true;
    call _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE($p0, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1145, 7} true;
    $p12 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1145, 7} true;
    assert !aliasQ2625($p0, NULL);
    $p13 := $M.2[$p12];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1145, 7} true;
    $r := $p13;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i7 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1144, 19} true;
    $p10 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1144, 10} true;
    call $p11 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_rightEPSt18_Rb_tree_node_base($p10);
    call {:cexpr "__x"} boogie_si_record_ref($p11);
    $p1, $p2 := $p11, $p2;
    goto $bb1;

  $bb5:
    assume {:partition} !($i7 == 1);
    call {:cexpr "__y"} boogie_si_record_ref($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1142, 29} true;
    $p8 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1142, 21} true;
    call $p9 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_S_leftEPSt18_Rb_tree_node_base($p8);
    call {:cexpr "__x"} boogie_si_record_ref($p9);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1142, 4} true;
    $p1, $p2 := $p9, $p1;
    goto $bb1;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_rightEPSt18_Rb_tree_node_base: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_rightEPSt18_Rb_tree_node_base == NULL - 10120;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_rightEPSt18_Rb_tree_node_base(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_rightEPSt18_Rb_tree_node_base(__x: int) returns ($r: int)
{
  var {:base "__x"} $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 537, 40} true;
    $p0 := __x + 24;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 537, 40} true;
    assert !aliasQ2626(__x, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 537, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 537, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_S_leftEPSt18_Rb_tree_node_base: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_S_leftEPSt18_Rb_tree_node_base == NULL - 10128;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_S_leftEPSt18_Rb_tree_node_base(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_S_leftEPSt18_Rb_tree_node_base(__x: int) returns ($r: int)
{
  var {:base "__x"} $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 529, 40} true;
    $p0 := __x + 16;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 529, 40} true;
    assert !aliasQ2627(__x, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 529, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 529, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt13_Rb_tree_nodeISsE: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt13_Rb_tree_nodeISsE == NULL - 10136;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt13_Rb_tree_nodeISsE(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt13_Rb_tree_nodeISsE(__x: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call $p0 := $alloc(1 * 1);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 525, 30} true;
    call $p1 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_valueEPKSt13_Rb_tree_nodeISsE(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 525, 16} true;
    call $p2 := _ZNKSt9_IdentityISsEclERKSs($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 525, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_valueEPKSt13_Rb_tree_nodeISsE: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_valueEPKSt13_Rb_tree_nodeISsE == NULL - 10144;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_valueEPKSt13_Rb_tree_nodeISsE(__x: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_valueEPKSt13_Rb_tree_nodeISsE(__x: int) returns ($r: int)
{
  var {:base "__x"} $p0: int;

  $bb0:
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 521, 9} true;
    $p0 := __x + 32;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 521, 9} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseERKSs: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseERKSs == NULL - 10152;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseERKSs(this: int, __x: int) returns ({:scalar} $r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseERKSs(this: int, __x: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var {:scalar} $p5: int;
  var {:base "$p4"} $p6: int;
  var $p7: int;
  var {:base "$p4"} $p8: int;
  var $p9: int;
  var $p10: int;
  var {:base "$p10"} $p11: int;
  var {:base "$p10"} $p12: int;
  var {:scalar} $i13: int;
  var {:base "$p0"} $p14: int;
  var {:base "$p0"} $p15: int;
  var {:base "$p1"} $p16: int;
  var $p17: int;
  var {:base "$p2"} $p18: int;
  var $p19: int;
  var $p20: int;
  var {:base "$p3"} $p21: int;
  var {:scalar} $i22: int;
  var {:scalar} $i23: int;

  $bb0:
    call $p0 := $alloc(16 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume true;
    call $p4 := $alloc(16 * 1);
    call $p5 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11equal_rangeERKSs3($p4, this, __x);
    $p6 := $p4;
    assert !aliasQ2628($p4, NULL);
    $p7 := $M.2[$p6];
    $p8 := $p4 + 8;
    assert !aliasQ2629($p4, NULL);
    $p9 := $M.2[$p8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1769, 38} true;
    $p10 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1769, 38} true;
    $p11 := $p10;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1769, 38} true;
    assert !aliasQ2630($p10, NULL);
    $M.124 := $M.124[$p11 := $p7];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1769, 38} true;
    $p12 := $p10 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1769, 38} true;
    assert !aliasQ2631($p10, NULL);
    $M.144 := $M.144[$p12 := $p9];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1770, 36} true;
    call $i13 := _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4sizeEv(this);
    call {:cexpr "__old_size"} boogie_si_record_i64($i13);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    $p14 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    call _ZNSt23_Rb_tree_const_iteratorISsEC2ERKSt17_Rb_tree_iteratorISsE($p1, $p14);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    $p15 := $p0 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    call _ZNSt23_Rb_tree_const_iteratorISsEC2ERKSt17_Rb_tree_iteratorISsE($p2, $p15);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    $p16 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    assert !aliasQ2632($p1, NULL);
    $p17 := $M.113[$p16];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    $p18 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    assert !aliasQ2633($p2, NULL);
    $p19 := $M.113[$p18];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    call $p20 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseESt23_Rb_tree_const_iteratorISsES7_(this, $p17, $p19);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    $p21 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1771, 7} true;
    assert !aliasQ2634($p3, NULL);
    $M.145 := $M.145[$p21 := $p20];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1772, 27} true;
    call $i22 := _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4sizeEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1772, 14} true;
    $i23 := $i13 - $i22;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1772, 7} true;
    $r := $i23;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseESt23_Rb_tree_const_iteratorISsES7_: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseESt23_Rb_tree_const_iteratorISsES7_ == NULL - 10160;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseESt23_Rb_tree_const_iteratorISsES7_(this: int, __first.coerce: int, __last.coerce: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseESt23_Rb_tree_const_iteratorISsES7_(this: int, __first.coerce: int, __last.coerce: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var {:base "$p1"} $p5: int;
  var {:base "$p2"} $p6: int;
  var $p7: int;
  var $p8: int;
  var $p9: int;
  var $p10: int;
  var {:base "$p3"} $p11: int;
  var $p12: int;
  var {:base "$p4"} $p13: int;
  var $p14: int;
  var $p15: int;
  var {:base "$p0"} $p16: int;
  var {:base "$p0"} $p17: int;
  var $p18: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(8 * 1);
    call $p4 := $alloc(8 * 1);
    $p5 := $p1;
    assert !aliasQ2635($p1, NULL);
    $M.146 := $M.146[$p5 := __first.coerce];
    $p6 := $p2;
    assert !aliasQ2636($p2, NULL);
    $M.147 := $M.147[$p6 := __last.coerce];
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume true;
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    $p7 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    $p8 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    assert !aliasQ2637($p7, NULL);
    assert !aliasQ2638($p8, NULL);
    $M.146[$p7] := $M.146[$p8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    $p9 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    $p10 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    assert !aliasQ2639($p9, NULL);
    assert !aliasQ2640($p10, NULL);
    $M.147[$p9] := $M.147[$p10];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    $p11 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    assert !aliasQ2641($p3, NULL);
    $p12 := $M.146[$p11];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    $p13 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    assert !aliasQ2642($p4, NULL);
    $p14 := $M.147[$p13];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 842, 2} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_erase_auxESt23_Rb_tree_const_iteratorISsES7_(this, $p12, $p14);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 843, 9} true;
    call $p15 := _ZNKSt23_Rb_tree_const_iteratorISsE13_M_const_castEv($p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 843, 9} true;
    $p16 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 843, 9} true;
    assert !aliasQ2643($p0, NULL);
    $M.148 := $M.148[$p16 := $p15];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 843, 2} true;
    $p17 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 843, 2} true;
    assert !aliasQ2644($p0, NULL);
    $p18 := $M.148[$p17];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 843, 2} true;
    $r := $p18;
    $exn := false;
    return;
}



const _ZNKSt23_Rb_tree_const_iteratorISsE13_M_const_castEv: int;

axiom _ZNKSt23_Rb_tree_const_iteratorISsE13_M_const_castEv == NULL - 10168;

procedure _ZNKSt23_Rb_tree_const_iteratorISsE13_M_const_castEv(this: int) returns ($r: int);



implementation _ZNKSt23_Rb_tree_const_iteratorISsE13_M_const_castEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "$p0"} $p4: int;
  var $p5: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 256, 46} true;
    $p1 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 256, 46} true;
    assert !aliasQ2645(this, NULL);
    $p2 := $M.147[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 255, 25} true;
    $p3 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 255, 9} true;
    call _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE($p0, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 255, 9} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 255, 9} true;
    assert !aliasQ2646($p0, NULL);
    $p5 := $M.2[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 255, 9} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_erase_auxESt23_Rb_tree_const_iteratorISsES7_: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_erase_auxESt23_Rb_tree_const_iteratorISsES7_ == NULL - 10176;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_erase_auxESt23_Rb_tree_const_iteratorISsES7_(this: int, __first.coerce: int, __last.coerce: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_erase_auxESt23_Rb_tree_const_iteratorISsES7_(this: int, __first.coerce: int, __last.coerce: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var {:base "$p0"} $p8: int;
  var {:base "$p1"} $p9: int;
  var $p10: int;
  var {:base "$p3"} $p11: int;
  var {:scalar} $i12: int;
  var $p13: int;
  var {:base "$p5"} $p14: int;
  var {:scalar} $i15: int;
  var {:scalar} $i16: int;
  var $p17: int;
  var {:base "$p6"} $p18: int;
  var {:base "$p6"} $p19: int;
  var $p20: int;
  var $p21: int;
  var {:base "$p7"} $p22: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(8 * 1);
    call $p4 := $alloc(8 * 1);
    call $p5 := $alloc(8 * 1);
    call $p6 := $alloc(8 * 1);
    call $p7 := $alloc(8 * 1);
    $p8 := $p0;
    assert !aliasQ2647($p0, NULL);
    $M.116 := $M.116[$p8 := __first.coerce];
    $p9 := $p1;
    assert !aliasQ2648($p1, NULL);
    $M.116 := $M.116[$p9 := __last.coerce];
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume true;
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 22} true;
    call $p10 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5beginEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 22} true;
    $p11 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 22} true;
    assert !aliasQ2649($p3, NULL);
    $M.124 := $M.124[$p11 := $p10];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 11} true;
    call _ZNSt23_Rb_tree_const_iteratorISsEC2ERKSt17_Rb_tree_iteratorISsE($p2, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 11} true;
    call $i12 := _ZNKSt23_Rb_tree_const_iteratorISsEeqERKS0_($p0, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 11} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i12 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 43} true;
    call $p13 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE3endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 43} true;
    $p14 := $p5;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 43} true;
    assert !aliasQ2650($p5, NULL);
    $M.124 := $M.124[$p14 := $p13];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 33} true;
    call _ZNSt23_Rb_tree_const_iteratorISsEC2ERKSt17_Rb_tree_iteratorISsE($p4, $p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 33} true;
    call $i15 := _ZNKSt23_Rb_tree_const_iteratorISsEeqERKS0_($p1, $p4);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 11} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb2:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 11} true;
    assume {:partition} !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1759, 9} true;
    call $i16 := _ZNKSt23_Rb_tree_const_iteratorISsEneERKS0_($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1759, 2} true;
    assume {:branchcond $i16} true;
    goto $bb7, $bb8;

  $bb4:
    assume {:partition} $i15 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1757, 2} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5clearEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1757, 2} true;
    goto $bb6;

  $bb5:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1756, 11} true;
    assume {:partition} !($i15 == 1);
    goto $bb3;

  $bb6:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1761, 5} true;
    $exn := false;
    return;

  $bb7:
    assume {:partition} $i16 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1760, 10} true;
    call $p17 := _ZNSt23_Rb_tree_const_iteratorISsEppEi($p0, NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1760, 10} true;
    $p18 := $p6;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1760, 10} true;
    assert !aliasQ2651($p6, NULL);
    $M.149 := $M.149[$p18 := $p17];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1760, 4} true;
    $p19 := $p6;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1760, 4} true;
    assert !aliasQ2652($p6, NULL);
    $p20 := $M.149[$p19];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1760, 4} true;
    call $p21 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseESt23_Rb_tree_const_iteratorISsE(this, $p20);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1760, 4} true;
    $p22 := $p7;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1760, 4} true;
    assert !aliasQ2653($p7, NULL);
    $M.150 := $M.150[$p22 := $p21];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1759, 2} true;
    goto $bb3;

  $bb8:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1759, 2} true;
    assume {:partition} !($i16 == 1);
    goto $bb6;
}



const _ZNSt23_Rb_tree_const_iteratorISsEppEi: int;

axiom _ZNSt23_Rb_tree_const_iteratorISsEppEi == NULL - 10184;

procedure _ZNSt23_Rb_tree_const_iteratorISsEppEi(this: int, {:scalar} $i0: int) returns ($r: int);



implementation _ZNSt23_Rb_tree_const_iteratorISsEppEi(this: int, $i0: int) returns ($r: int)
{
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var $p6: int;
  var {:base "this"} $p7: int;
  var {:base "$p1"} $p8: int;
  var $p9: int;

  $bb0:
    call $p1 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr ""} boogie_si_record_i32($i0);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 277, 8} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 277, 8} true;
    $p3 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 277, 8} true;
    assert !aliasQ2654($p2, NULL);
    assert !aliasQ2655($p3, NULL);
    $M.116[$p2] := $M.116[$p3];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 278, 31} true;
    $p4 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 278, 31} true;
    assert !aliasQ2656(this, NULL);
    $p5 := $M.116[$p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 278, 12} true;
    call $p6 := _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base($p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 278, 2} true;
    $p7 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 278, 2} true;
    assert !aliasQ2657(this, NULL);
    $M.116 := $M.116[$p7 := $p6];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 279, 2} true;
    $p8 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 279, 2} true;
    assert !aliasQ2658($p1, NULL);
    $p9 := $M.116[$p8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 279, 2} true;
    $r := $p9;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseESt23_Rb_tree_const_iteratorISsE: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseESt23_Rb_tree_const_iteratorISsE == NULL - 10192;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseESt23_Rb_tree_const_iteratorISsE(this: int, __position.coerce: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5eraseESt23_Rb_tree_const_iteratorISsE(this: int, __position.coerce: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "$p1"} $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var $p8: int;
  var $p9: int;
  var {:base "$p3"} $p10: int;
  var $p11: int;
  var $p12: int;
  var {:base "$p0"} $p13: int;
  var {:base "$p0"} $p14: int;
  var $p15: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(8 * 1);
    $p4 := $p1;
    assert !aliasQ2659($p1, NULL);
    $M.147 := $M.147[$p4 := __position.coerce];
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume true;
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 807, 17} true;
    $p5 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 807, 17} true;
    $p6 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 807, 17} true;
    assert !aliasQ2660($p5, NULL);
    assert !aliasQ2661($p6, NULL);
    $M.147[$p5] := $M.147[$p6];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 808, 2} true;
    call $p7 := _ZNSt23_Rb_tree_const_iteratorISsEppEv($p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 809, 2} true;
    $p8 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 809, 2} true;
    $p9 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 809, 2} true;
    assert !aliasQ2662($p8, NULL);
    assert !aliasQ2663($p9, NULL);
    $M.147[$p8] := $M.147[$p9];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 809, 2} true;
    $p10 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 809, 2} true;
    assert !aliasQ2664($p3, NULL);
    $p11 := $M.147[$p10];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 809, 2} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_erase_auxESt23_Rb_tree_const_iteratorISsE(this, $p11);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 810, 9} true;
    call $p12 := _ZNKSt23_Rb_tree_const_iteratorISsE13_M_const_castEv($p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 810, 9} true;
    $p13 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 810, 9} true;
    assert !aliasQ2665($p0, NULL);
    $M.151 := $M.151[$p13 := $p12];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 810, 2} true;
    $p14 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 810, 2} true;
    assert !aliasQ2666($p0, NULL);
    $p15 := $M.151[$p14];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 810, 2} true;
    $r := $p15;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_erase_auxESt23_Rb_tree_const_iteratorISsE: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_erase_auxESt23_Rb_tree_const_iteratorISsE == NULL - 10200;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_erase_auxESt23_Rb_tree_const_iteratorISsE(this: int, __position.coerce: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_erase_auxESt23_Rb_tree_const_iteratorISsE(this: int, __position.coerce: int)
{
  var $p0: int;
  var {:base "$p0"} $p1: int;
  var {:base "$p0"} $p2: int;
  var $p3: int;
  var {:base "this"} $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;
  var $p7: int;
  var {:base "this"} $p8: int;
  var {:base "this"} $p9: int;
  var {:scalar} $i10: int;
  var {:scalar} $i11: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    $p1 := $p0;
    assert !aliasQ2667($p0, NULL);
    $M.152 := $M.152[$p1 := __position.coerce];
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1744, 28} true;
    $p2 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1744, 28} true;
    assert !aliasQ2668($p0, NULL);
    $p3 := $M.152[$p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1743, 26} true;
    $p4 := this;
    $p5 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1743, 26} true;
    call $p6 := _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_($p3, $p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1743, 2} true;
    $p7 := $p6;
    call {:cexpr "__y"} boogie_si_record_ref($p6);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1746, 7} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE15_M_destroy_nodeEPSt13_Rb_tree_nodeISsE(this, $p7);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1747, 7} true;
    $p8 := this;
    $p9 := this + 40;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1747, 7} true;
    assert !aliasQ2669(this, NULL);
    $i10 := $M.2[$p9];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1747, 7} true;
    $i11 := $i10 + NULL - 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1747, 7} true;
    assert !aliasQ2670(this, NULL);
    $M.2 := $M.2[$p9 := $i11];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1748, 5} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE15_M_destroy_nodeEPSt13_Rb_tree_nodeISsE: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE15_M_destroy_nodeEPSt13_Rb_tree_nodeISsE == NULL - 10208;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE15_M_destroy_nodeEPSt13_Rb_tree_nodeISsE(this: int, __p: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE15_M_destroy_nodeEPSt13_Rb_tree_nodeISsE(this: int, __p: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 421, 2} true;
    call $p0 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE21_M_get_Node_allocatorEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 421, 2} true;
    $p1 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 421, 2} true;
    call _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE7destroyIS2_EEvPT_($p1, __p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 422, 2} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_put_nodeEPSt13_Rb_tree_nodeISsE(this, __p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 423, 7} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_put_nodeEPSt13_Rb_tree_nodeISsE: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_put_nodeEPSt13_Rb_tree_nodeISsE == NULL - 10216;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_put_nodeEPSt13_Rb_tree_nodeISsE(this: int, __p: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_put_nodeEPSt13_Rb_tree_nodeISsE(this: int, __p: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 374, 9} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 374, 9} true;
    $p1 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 374, 9} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 374, 9} true;
    call _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE10deallocateEPS2_m($p2, __p, 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 374, 54} true;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE10deallocateEPS2_m: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE10deallocateEPS2_m == NULL - 10224;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE10deallocateEPS2_m(this: int, __p: int, {:scalar} $i0: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE10deallocateEPS2_m(this: int, __p: int, $i0: int)
{
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    call {:cexpr ""} boogie_si_record_i64($i0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 110, 27} true;
    $p1 := __p;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 110, 9} true;
    call _ZdlPv($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 110, 33} true;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE7destroyIS2_EEvPT_: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE7destroyIS2_EEvPT_ == NULL - 10232;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE7destroyIS2_EEvPT_(this: int, __p: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE7destroyIS2_EEvPT_(this: int, __p: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 124, 29} true;
    call _ZNSt13_Rb_tree_nodeISsED2Ev(__p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 124, 42} true;
    $exn := false;
    return;
}



const _ZNSt13_Rb_tree_nodeISsED2Ev: int;

axiom _ZNSt13_Rb_tree_nodeISsED2Ev == NULL - 10240;

procedure _ZNSt13_Rb_tree_nodeISsED2Ev(this: int);



implementation _ZNSt13_Rb_tree_nodeISsED2Ev(this: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 131, 12} true;
    $p0 := this + 32;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 131, 12} true;
    call _ZNSsD1Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 131, 12} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE21_M_get_Node_allocatorEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE21_M_get_Node_allocatorEv == NULL - 10248;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE21_M_get_Node_allocatorEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE21_M_get_Node_allocatorEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 357, 47} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 357, 47} true;
    $p1 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 357, 9} true;
    $r := $p1;
    $exn := false;
    return;
}



const _ZNSt23_Rb_tree_const_iteratorISsEppEv: int;

axiom _ZNSt23_Rb_tree_const_iteratorISsEppEv == NULL - 10256;

procedure _ZNSt23_Rb_tree_const_iteratorISsEppEv(this: int) returns ($r: int);



implementation _ZNSt23_Rb_tree_const_iteratorISsEppEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 270, 31} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 270, 31} true;
    assert !aliasQ2671(this, NULL);
    $p1 := $M.147[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 270, 12} true;
    call $p2 := _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 270, 2} true;
    $p3 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 270, 2} true;
    assert !aliasQ2672(this, NULL);
    $M.147 := $M.147[$p3 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 271, 2} true;
    $r := this;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5clearEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5clearEv == NULL - 10264;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5clearEv(this: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5clearEv(this: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var {:base "this"} $p8: int;
  var {:base "this"} $p9: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 860, 18} true;
    call $p0 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_beginEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 860, 9} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_eraseEPSt13_Rb_tree_nodeISsE(this, $p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 861, 25} true;
    call $p1 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_M_endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 861, 25} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 861, 9} true;
    call $p3 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_leftmostEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 861, 9} true;
    assert !aliasQ2673($p3, NULL);
    $M.2 := $M.2[$p3 := $p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 862, 9} true;
    call $p4 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_M_rootEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 862, 9} true;
    assert !aliasQ2674($p4, NULL);
    $M.2 := $M.2[$p4 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 863, 26} true;
    call $p5 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_M_endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 863, 26} true;
    $p6 := $p5;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 863, 9} true;
    call $p7 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_rightmostEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 863, 9} true;
    assert !aliasQ2675($p7, NULL);
    $M.2 := $M.2[$p7 := $p5];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 864, 9} true;
    $p8 := this;
    $p9 := this + 40;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 864, 9} true;
    assert !aliasQ2676(this, NULL);
    $M.2 := $M.2[$p9 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 865, 7} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_rightmostEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_rightmostEv == NULL - 10272;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_rightmostEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE12_M_rightmostEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 494, 9} true;
    $p0 := this;
    $p1 := this + 8;
    $p2 := this + 8 + 24;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 494, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_M_rootEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_M_rootEv == NULL - 10280;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_M_rootEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_M_rootEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 478, 9} true;
    $p0 := this;
    $p1 := this + 8;
    $p2 := this + 8 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 478, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_leftmostEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_leftmostEv == NULL - 10288;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_leftmostEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_leftmostEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 486, 9} true;
    $p0 := this;
    $p1 := this + 8;
    $p2 := this + 8 + 16;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 486, 9} true;
    $r := $p2;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_eraseEPSt13_Rb_tree_nodeISsE: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_eraseEPSt13_Rb_tree_nodeISsE == NULL - 10296;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_eraseEPSt13_Rb_tree_nodeISsE(this: int, __x: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_eraseEPSt13_Rb_tree_nodeISsE(this: int, __x: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1123, 7} true;
    $p0 := __x;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1123, 14} true;
    $i1 := (if $p0 != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1123, 7} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i1 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1125, 22} true;
    $p2 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1125, 13} true;
    call $p3 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_rightEPSt18_Rb_tree_node_base($p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1125, 4} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_eraseEPSt13_Rb_tree_nodeISsE(this, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1126, 29} true;
    $p4 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1126, 21} true;
    call $p5 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_S_leftEPSt18_Rb_tree_node_base($p4);
    call {:cexpr "__y"} boogie_si_record_ref($p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1127, 4} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE15_M_destroy_nodeEPSt13_Rb_tree_nodeISsE(this, $p0);
    call {:cexpr "__x"} boogie_si_record_ref($p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1123, 7} true;
    $p0 := $p5;
    goto $bb1;

  $bb3:
    assume {:partition} !($i1 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1130, 5} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5beginEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5beginEv == NULL - 10304;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5beginEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5beginEv(this: int) returns ($r: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var {:base "this"} $p3: int;
  var $p4: int;
  var $p5: int;
  var {:base "$p0"} $p6: int;
  var $p7: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 685, 5} true;
    $p1 := this;
    $p2 := this + 8;
    $p3 := this + 8 + 16;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 685, 5} true;
    assert !aliasQ2677(this, NULL);
    $p4 := $M.2[$p3];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 684, 18} true;
    $p5 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 684, 2} true;
    call _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE($p0, $p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 684, 2} true;
    $p6 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 684, 2} true;
    assert !aliasQ2678($p0, NULL);
    $p7 := $M.2[$p6];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 684, 2} true;
    $r := $p7;
    $exn := false;
    return;
}



const _ZNKSt23_Rb_tree_const_iteratorISsEeqERKS0_: int;

axiom _ZNKSt23_Rb_tree_const_iteratorISsEeqERKS0_ == NULL - 10312;

procedure _ZNKSt23_Rb_tree_const_iteratorISsEeqERKS0_(this: int, __x: int) returns ({:scalar} $r: int);



implementation _ZNKSt23_Rb_tree_const_iteratorISsEeqERKS0_(this: int, __x: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:base "__x"} $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 299, 16} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 299, 16} true;
    assert !aliasQ2679(this, NULL);
    $p1 := $M.116[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 299, 27} true;
    $p2 := __x;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 299, 27} true;
    assert !aliasQ2680(__x, NULL);
    $p3 := $M.113[$p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 299, 16} true;
    $i4 := (if $p1 == $p3 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 299, 9} true;
    $r := $i4;
    $exn := false;
    return;
}



const _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4sizeEv: int;

axiom _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4sizeEv == NULL - 10320;

procedure _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4sizeEv(this: int) returns ({:scalar} $r: int);



implementation _ZNKSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE4sizeEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:scalar} $i2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 728, 16} true;
    $p0 := this;
    $p1 := this + 40;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 728, 16} true;
    assert !aliasQ2681(this, NULL);
    $i2 := $M.2[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 728, 9} true;
    $r := $i2;
    $exn := false;
    return;
}



const _ZNSt4pairISt17_Rb_tree_iteratorISsES1_EC2IS1_S1_vEEOT_OT0_: int;

axiom _ZNSt4pairISt17_Rb_tree_iteratorISsES1_EC2IS1_S1_vEEOT_OT0_ == NULL - 10328;

procedure _ZNSt4pairISt17_Rb_tree_iteratorISsES1_EC2IS1_S1_vEEOT_OT0_(this: int, __x: int, __y: int);



implementation _ZNSt4pairISt17_Rb_tree_iteratorISsES1_EC2IS1_S1_vEEOT_OT0_(this: int, __x: int, __y: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    call $p1 := _ZSt7forwardISt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS2_E4typeE(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    $p2 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    $p3 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    assert !aliasQ2682($p2, NULL);
    assert !aliasQ2683($p3, NULL);
    $M.2[$p2] := $M.2[$p3];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    $p4 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    call $p5 := _ZSt7forwardISt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS2_E4typeE(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    $p6 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    $p7 := $p5;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    assert !aliasQ2684($p6, NULL);
    assert !aliasQ2685($p7, NULL);
    $M.2[$p6] := $M.2[$p7];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 68} true;
    $exn := false;
    return;
}



const _ZSt7forwardISt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS2_E4typeE: int;

axiom _ZSt7forwardISt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS2_E4typeE == NULL - 10336;

procedure _ZSt7forwardISt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS2_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardISt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS2_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_upper_boundEPSt13_Rb_tree_nodeISsES8_RKSs: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_upper_boundEPSt13_Rb_tree_nodeISsES8_RKSs == NULL - 10344;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_upper_boundEPSt13_Rb_tree_nodeISsES8_RKSs(this: int, __x: int, __y: int, __k: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_upper_boundEPSt13_Rb_tree_nodeISsES8_RKSs(this: int, __x: int, __y: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:scalar} $i3: int;
  var {:base "this"} $p4: int;
  var {:base "this"} $p5: int;
  var $p6: int;
  var {:scalar} $i7: int;
  var $p8: int;
  var $p9: int;
  var $p10: int;
  var $p11: int;
  var {:base "$p0"} $p12: int;
  var $p13: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1172, 7} true;
    $p1, $p2 := __x, __y;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1172, 14} true;
    $i3 := (if $p1 != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1172, 7} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i3 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1173, 6} true;
    $p4 := this;
    $p5 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1173, 34} true;
    call $p6 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt13_Rb_tree_nodeISsE($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1173, 6} true;
    call $i7 := _ZNKSt4lessISsEclERKSsS2_($p5, __k, $p6);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1173, 6} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:partition} !($i3 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1177, 7} true;
    call _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE($p0, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1177, 7} true;
    $p12 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1177, 7} true;
    assert !aliasQ2686($p0, NULL);
    $p13 := $M.2[$p12];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1177, 7} true;
    $r := $p13;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i7 == 1;
    call {:cexpr "__y"} boogie_si_record_ref($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1174, 29} true;
    $p8 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1174, 21} true;
    call $p9 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_S_leftEPSt18_Rb_tree_node_base($p8);
    call {:cexpr "__x"} boogie_si_record_ref($p9);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1174, 4} true;
    $p1, $p2 := $p9, $p1;
    goto $bb1;

  $bb5:
    assume {:partition} !($i7 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1176, 19} true;
    $p10 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1176, 10} true;
    call $p11 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_rightEPSt18_Rb_tree_node_base($p10);
    call {:cexpr "__x"} boogie_si_record_ref($p11);
    $p1, $p2 := $p11, $p2;
    goto $bb1;
}



const _ZNSt4pairISt23_Rb_tree_const_iteratorISsEbEC2IRSt17_Rb_tree_iteratorISsERbvEEOT_OT0_: int;

axiom _ZNSt4pairISt23_Rb_tree_const_iteratorISsEbEC2IRSt17_Rb_tree_iteratorISsERbvEEOT_OT0_ == NULL - 10352;

procedure _ZNSt4pairISt23_Rb_tree_const_iteratorISsEbEC2IRSt17_Rb_tree_iteratorISsERbvEEOT_OT0_(this: int, __x: int, __y: int);



implementation _ZNSt4pairISt23_Rb_tree_const_iteratorISsEbEC2IRSt17_Rb_tree_iteratorISsERbvEEOT_OT0_(this: int, __x: int, __y: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var {:scalar} $i4: int;
  var {:scalar} $i5: int;
  var {:scalar} $i6: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    call $p1 := _ZSt7forwardIRSt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS3_E4typeE(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    call _ZNSt23_Rb_tree_const_iteratorISsEC2ERKSt17_Rb_tree_iteratorISsE($p0, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    $p2 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    call $p3 := _ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    assert !aliasQ2687($p3, NULL);
    $i4 := $M.144[$p3];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    $i5 := $i4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    $i6 := $i5;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    assert !aliasQ2688(this, NULL);
    $M.113 := $M.113[$p2 := $i6];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 68} true;
    $exn := false;
    return;
}



const _ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE: int;

axiom _ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE == NULL - 10360;

procedure _ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZSt7forwardIRSt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS3_E4typeE: int;

axiom _ZSt7forwardIRSt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS3_E4typeE == NULL - 10368;

procedure _ZSt7forwardIRSt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS3_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardIRSt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS3_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZNSt4pairISt17_Rb_tree_iteratorISsEbEC2IS1_bvEEOT_OT0_: int;

axiom _ZNSt4pairISt17_Rb_tree_iteratorISsEbEC2IS1_bvEEOT_OT0_ == NULL - 10376;

procedure _ZNSt4pairISt17_Rb_tree_iteratorISsEbEC2IS1_bvEEOT_OT0_(this: int, __x: int, __y: int);



implementation _ZNSt4pairISt17_Rb_tree_iteratorISsEbEC2IS1_bvEEOT_OT0_(this: int, __x: int, __y: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var {:scalar} $i6: int;
  var {:scalar} $i7: int;
  var {:scalar} $i8: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    call $p1 := _ZSt7forwardISt17_Rb_tree_iteratorISsEEOT_RNSt16remove_referenceIS2_E4typeE(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    $p2 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    $p3 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    assert !aliasQ2689($p2, NULL);
    assert !aliasQ2690($p3, NULL);
    $M.2[$p2] := $M.2[$p3];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    $p4 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    call $p5 := _ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    assert !aliasQ2691($p5, NULL);
    $i6 := $M.153[$p5];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    $i7 := $i6;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    $i8 := $i7;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    assert !aliasQ2692(this, NULL);
    $M.2 := $M.2[$p4 := $i8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 68} true;
    $exn := false;
    return;
}



const _ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE: int;

axiom _ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE == NULL - 10384;

procedure _ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE10_M_insert_ISsEESt17_Rb_tree_iteratorISsEPSt18_Rb_tree_node_baseSA_OT_: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE10_M_insert_ISsEESt17_Rb_tree_iteratorISsEPSt18_Rb_tree_node_baseSA_OT_ == NULL - 10392;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE10_M_insert_ISsEESt17_Rb_tree_iteratorISsEPSt18_Rb_tree_node_baseSA_OT_(this: int, __x: int, __p: int, __v: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE10_M_insert_ISsEESt17_Rb_tree_iteratorISsEPSt18_Rb_tree_node_baseSA_OT_(this: int, __x: int, __p: int, __v: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var {:scalar} $i2: int;
  var $p4: int;
  var $p5: int;
  var {:scalar} $i6: int;
  var {:base "this"} $p7: int;
  var {:base "this"} $p8: int;
  var $p9: int;
  var $p10: int;
  var {:scalar} $i11: int;
  var {:scalar} $i3: int;
  var {:scalar} $i12: int;
  var $p13: int;
  var $p14: int;
  var {:scalar} $i15: int;
  var $p16: int;
  var {:base "this"} $p17: int;
  var {:base "this"} $p18: int;
  var {:base "this"} $p19: int;
  var {:base "this"} $p20: int;
  var {:scalar} $i21: int;
  var {:scalar} $i22: int;
  var {:base "$p0"} $p23: int;
  var $p24: int;

  $bb0:
    call $p0 := $alloc(8 * 1);
    call $p1 := $alloc(1 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    call {:cexpr "__v"} boogie_si_record_ref(__v);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1019, 29} true;
    $i2 := (if __x != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1019, 29} true;
    $i3 := 1;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1019, 29} true;
    assume {:partition} $i2 == 1;
    goto $bb2;

  $bb2:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1019, 12} true;
    $i12 := $i3;
    call {:cexpr "__insert_left"} boogie_si_record_i8($i12);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1023, 39} true;
    call $p13 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__v);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1023, 24} true;
    call $p14 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_create_nodeIJSsEEEPSt13_Rb_tree_nodeISsEDpOT_(this, $p13);
    call {:cexpr "__z"} boogie_si_record_ref($p14);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1025, 37} true;
    $i15 := $i12;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1025, 52} true;
    $p16 := $p14;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1025, 7} true;
    $p17 := this;
    $p18 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1025, 7} true;
    call _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_($i15, $p16, __p, $p18);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1027, 7} true;
    $p19 := this;
    $p20 := this + 40;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1027, 7} true;
    assert !aliasQ2693(this, NULL);
    $i21 := $M.2[$p20];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1027, 7} true;
    $i22 := $i21 + 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1027, 7} true;
    assert !aliasQ2694(this, NULL);
    $M.2 := $M.2[$p20 := $i22];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1028, 7} true;
    call _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE($p0, $p14);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1028, 7} true;
    $p23 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1028, 7} true;
    assert !aliasQ2695($p0, NULL);
    $p24 := $M.2[$p23];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1028, 7} true;
    $r := $p24;
    $exn := false;
    return;

  $bb3:
    assume {:partition} !($i2 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1019, 48} true;
    call $p4 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_M_endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1019, 48} true;
    $p5 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1019, 41} true;
    $i6 := (if __p == $p5 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1019, 29} true;
    $i3 := 1;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb4:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1019, 29} true;
    assume {:partition} $i6 == 1;
    goto $bb2;

  $bb5:
    assume {:partition} !($i6 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1020, 11} true;
    $p7 := this;
    $p8 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1020, 34} true;
    call $p9 := _ZNKSt9_IdentityISsEclERSs($p1, __v);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1021, 13} true;
    call $p10 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt18_Rb_tree_node_base(__p);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1020, 11} true;
    call $i11 := _ZNKSt4lessISsEclERKSsS2_($p8, $p9, $p10);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1019, 29} true;
    $i3 := $i11;
    goto $bb2;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_create_nodeIJSsEEEPSt13_Rb_tree_nodeISsEDpOT_: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_create_nodeIJSsEEEPSt13_Rb_tree_nodeISsEDpOT_ == NULL - 10400;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_create_nodeIJSsEEEPSt13_Rb_tree_nodeISsEDpOT_(this: int, __args: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_create_nodeIJSsEEEPSt13_Rb_tree_nodeISsEDpOT_(this: int, __args: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 403, 23} true;
    call $p0 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_get_nodeEv(this);
    call {:cexpr "__tmp"} boogie_si_record_ref($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 407, 13} true;
    call $p1 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE21_M_get_Node_allocatorEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 408, 6} true;
    call $p2 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 406, 8} true;
    call _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISsEEE9constructIS1_JSsEEEDTcl12_S_constructfp_fp0_spclsr3stdE7forwardIT0_Efp1_EEERS2_PT_DpOS5_($p1, $p0, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 415, 4} true;
    $r := $p0;
    $exn := false;
    return;
}



const _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISsEEE9constructIS1_JSsEEEDTcl12_S_constructfp_fp0_spclsr3stdE7forwardIT0_Efp1_EEERS2_PT_DpOS5_: int;

axiom _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISsEEE9constructIS1_JSsEEEDTcl12_S_constructfp_fp0_spclsr3stdE7forwardIT0_Efp1_EEERS2_PT_DpOS5_ == NULL - 10408;

procedure _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISsEEE9constructIS1_JSsEEEDTcl12_S_constructfp_fp0_spclsr3stdE7forwardIT0_Efp1_EEERS2_PT_DpOS5_(__a: int, __p: int, __args: int);



implementation _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISsEEE9constructIS1_JSsEEEDTcl12_S_constructfp_fp0_spclsr3stdE7forwardIT0_Efp1_EEERS2_PT_DpOS5_(__a: int, __p: int, __args: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "__a"} boogie_si_record_ref(__a);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 393, 27} true;
    call $p0 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 393, 4} true;
    call _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISsEEE12_S_constructIS1_JSsEEENSt9enable_ifIXsr18__construct_helperIT_DpT0_EE5valueEvE4typeERS2_PS6_DpOS7_(__a, __p, $p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 393, 60} true;
    $exn := false;
    return;
}



const _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISsEEE12_S_constructIS1_JSsEEENSt9enable_ifIXsr18__construct_helperIT_DpT0_EE5valueEvE4typeERS2_PS6_DpOS7_: int;

axiom _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISsEEE12_S_constructIS1_JSsEEENSt9enable_ifIXsr18__construct_helperIT_DpT0_EE5valueEvE4typeERS2_PS6_DpOS7_ == NULL - 10416;

procedure _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISsEEE12_S_constructIS1_JSsEEENSt9enable_ifIXsr18__construct_helperIT_DpT0_EE5valueEvE4typeERS2_PS6_DpOS7_(__a: int, __p: int, __args: int);



implementation _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISsEEE12_S_constructIS1_JSsEEENSt9enable_ifIXsr18__construct_helperIT_DpT0_EE5valueEvE4typeERS2_PS6_DpOS7_(__a: int, __p: int, __args: int)
{
  var $p0: int;
  var $p1: int;

  $bb0:
    call {:cexpr "__a"} boogie_si_record_ref(__a);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 254, 4} true;
    $p0 := __a;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 254, 23} true;
    call $p1 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 254, 4} true;
    call _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE9constructIS2_JSsEEEvPT_DpOT0_($p0, __p, $p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/alloc_traits.h", 254, 56} true;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE9constructIS2_JSsEEEvPT_DpOT0_: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE9constructIS2_JSsEEEvPT_DpOT0_ == NULL - 10424;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE9constructIS2_JSsEEEvPT_DpOT0_(this: int, __p: int, __args: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE9constructIS2_JSsEEEvPT_DpOT0_(this: int, __p: int, __args: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var $p2: int;
  var $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__p"} boogie_si_record_ref(__p);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 18} true;
    $p0 := __p;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    $i1 := (if $p0 == NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    assume {:partition} $i1 == 1;
    goto $bb2;

  $bb2:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 60} true;
    $exn := false;
    return;

  $bb3:
    assume {:partition} !($i1 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    $p2 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 27} true;
    call $p3 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    call _ZNSt13_Rb_tree_nodeISsEC2IJSsEEEDpOT_($p2, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 120, 4} true;
    goto $bb2;
}



const _ZNSt13_Rb_tree_nodeISsEC2IJSsEEEDpOT_: int;

axiom _ZNSt13_Rb_tree_nodeISsEC2IJSsEEEDpOT_ == NULL - 10432;

procedure _ZNSt13_Rb_tree_nodeISsEC2IJSsEEEDpOT_(this: int, __args: int);



implementation _ZNSt13_Rb_tree_nodeISsEC2IJSsEEEDpOT_(this: int, __args: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__args"} boogie_si_record_ref(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 51} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 51} true;
    $p1 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 51} true;
    assert !aliasQ2696($p1, NULL);
    $M.2[$p1] := NULL;
    assert !aliasQ2697($p1 + 8, NULL);
    $M.2[$p1 + 8] := NULL;
    assert !aliasQ2698($p1 + 16, NULL);
    $M.2[$p1 + 16] := NULL;
    assert !aliasQ2699($p1 + 24, NULL);
    $M.2[$p1 + 24] := NULL;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 4} true;
    $p2 := this + 32;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 19} true;
    call $p3 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__args);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 4} true;
    call _ZNSsC1EOSs($p2, $p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 140, 53} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_get_nodeEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_get_nodeEv == NULL - 10440;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_get_nodeEv(this: int) returns ($r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11_M_get_nodeEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 370, 16} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 370, 16} true;
    $p1 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 370, 16} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 370, 16} true;
    call $p3 := _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8allocateEmPKv($p2, 1, NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 370, 9} true;
    $r := $p3;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8allocateEmPKv: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8allocateEmPKv == NULL - 10448;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8allocateEmPKv(this: int, {:scalar} __n: int, $p0: int) returns ($r: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8allocateEmPKv(this: int, __n: int, $p0: int) returns ($r: int)
{
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var $p4: int;
  var $p5: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__n"} boogie_si_record_i64(__n);
    call {:cexpr ""} boogie_si_record_ref($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 101, 12} true;
    call $i1 := _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8max_sizeEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 101, 6} true;
    $i2 := (if __n > $i1 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 101, 6} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i2 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 102, 4} true;
    call _ZSt17__throw_bad_allocv();
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 102, 4} true;
    assume false;
    goto $bb2;

  $bb2:
    assume {:partition} !($i2 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 104, 42} true;
    $i3 := __n * 40;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 104, 27} true;
    call $p4 := _Znwm($i3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 104, 9} true;
    $p5 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 104, 2} true;
    $r := $p5;
    $exn := false;
    return;
}



const _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8max_sizeEv: int;

axiom _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8max_sizeEv == NULL - 10456;

procedure _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8max_sizeEv(this: int) returns ({:scalar} $r: int);



implementation _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8max_sizeEv(this: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 114, 9} true;
    $r := 461168601842738790;
    $exn := false;
    return;
}



const _ZNKSt9_IdentityISsEclERSs: int;

axiom _ZNKSt9_IdentityISsEclERSs == NULL - 10464;

procedure _ZNKSt9_IdentityISsEclERSs(this: int, __x: int) returns ($r: int);



implementation _ZNKSt9_IdentityISsEclERSs(this: int, __x: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_function.h", 478, 9} true;
    $r := __x;
    $exn := false;
    return;
}



const _ZNSt17_Rb_tree_iteratorISsEmmEv: int;

axiom _ZNSt17_Rb_tree_iteratorISsEmmEv == NULL - 10472;

procedure _ZNSt17_Rb_tree_iteratorISsEmmEv(this: int) returns ($r: int);



implementation _ZNSt17_Rb_tree_iteratorISsEmmEv(this: int) returns ($r: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 204, 31} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 204, 31} true;
    assert !aliasQ2700(this, NULL);
    $p1 := $M.2[$p0];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 204, 12} true;
    call $p2 := _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 204, 2} true;
    $p3 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 204, 2} true;
    assert !aliasQ2701(this, NULL);
    $M.2 := $M.2[$p3 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 205, 2} true;
    $r := this;
    $exn := false;
    return;
}



const _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeISsES7_vEEOT_OT0_: int;

axiom _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeISsES7_vEEOT_OT0_ == NULL - 10480;

procedure _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeISsES7_vEEOT_OT0_(this: int, __x: int, __y: int);



implementation _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeISsES7_vEEOT_OT0_(this: int, __x: int, __y: int)
{
  var {:base "this"} $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var {:base "this"} $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    call {:cexpr "__y"} boogie_si_record_ref(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    call $p1 := _ZSt7forwardIRPSt13_Rb_tree_nodeISsEEOT_RNSt16remove_referenceIS4_E4typeE(__x);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    assert !aliasQ2702($p1, NULL);
    $p2 := $M.154[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 10} true;
    $p3 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 4} true;
    assert !aliasQ2703(this, NULL);
    $M.133 := $M.133[$p0 := $p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    $p4 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    call $p5 := _ZSt7forwardIRPSt13_Rb_tree_nodeISsEEOT_RNSt16remove_referenceIS4_E4typeE(__y);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    assert !aliasQ2704($p5, NULL);
    $p6 := $M.154[$p5];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 42} true;
    $p7 := $p6;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 35} true;
    assert !aliasQ2705(this, NULL);
    $M.133 := $M.133[$p4 := $p6];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_pair.h", 145, 68} true;
    $exn := false;
    return;
}



const _ZSt7forwardIRPSt13_Rb_tree_nodeISsEEOT_RNSt16remove_referenceIS4_E4typeE: int;

axiom _ZSt7forwardIRPSt13_Rb_tree_nodeISsEEOT_RNSt16remove_referenceIS4_E4typeE == NULL - 10488;

procedure _ZSt7forwardIRPSt13_Rb_tree_nodeISsEEOT_RNSt16remove_referenceIS4_E4typeE(__t: int) returns ($r: int);



implementation _ZSt7forwardIRPSt13_Rb_tree_nodeISsEEOT_RNSt16remove_referenceIS4_E4typeE(__t: int) returns ($r: int)
{

  $bb0:
    call {:cexpr "__t"} boogie_si_record_ref(__t);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/move.h", 77, 7} true;
    $r := __t;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEEC2Ev: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEEC2Ev == NULL - 10496;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEEC2Ev(this: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEEC2Ev(this: int)
{
  var {:base "this"} $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 648, 7} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 648, 7} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE13_Rb_tree_implIS3_Lb1EEC2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 648, 20} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE13_Rb_tree_implIS3_Lb1EEC2Ev: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE13_Rb_tree_implIS3_Lb1EEC2Ev == NULL - 10504;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE13_Rb_tree_implIS3_Lb1EEC2Ev(this: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE13_Rb_tree_implIS3_Lb1EEC2Ev(this: int)
{
  var $p0: int;
  var {:base "this"} $p1: int;
  var $p2: int;
  var {:base "this"} $p3: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 448, 4} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 448, 4} true;
    call _ZNSaISt13_Rb_tree_nodeISsEEC2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 446, 43} true;
    $p1 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 446, 43} true;
    $p2 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 446, 43} true;
    assert !aliasQ2706($p2, NULL);
    $M.2[$p2] := NULL;
    assert !aliasQ2707($p2 + 8, NULL);
    $M.2[$p2 + 8] := NULL;
    assert !aliasQ2708($p2 + 16, NULL);
    $M.2[$p2 + 16] := NULL;
    assert !aliasQ2709($p2 + 24, NULL);
    $M.2[$p2 + 24] := NULL;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 447, 6} true;
    $p3 := this + 40;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 447, 6} true;
    assert !aliasQ2710(this, NULL);
    $M.2 := $M.2[$p3 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 448, 6} true;
    call _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE13_Rb_tree_implIS3_Lb1EE13_M_initializeEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 448, 23} true;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE13_Rb_tree_implIS3_Lb1EE13_M_initializeEv: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE13_Rb_tree_implIS3_Lb1EE13_M_initializeEv == NULL - 10512;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE13_Rb_tree_implIS3_Lb1EE13_M_initializeEv(this: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE13_Rb_tree_implIS3_Lb1EE13_M_initializeEv(this: int)
{
  var {:base "this"} $p0: int;
  var {:base "this"} $p1: int;
  var {:base "this"} $p2: int;
  var {:base "this"} $p3: int;
  var {:base "this"} $p4: int;
  var {:base "this"} $p5: int;
  var {:base "this"} $p6: int;
  var {:base "this"} $p7: int;
  var {:base "this"} $p8: int;
  var {:base "this"} $p9: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 466, 6} true;
    $p0 := this + 8;
    $p1 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 466, 6} true;
    assert !aliasQ2711(this, NULL);
    $M.2 := $M.2[$p1 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 467, 6} true;
    $p2 := this + 8;
    $p3 := this + 8 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 467, 6} true;
    assert !aliasQ2712(this, NULL);
    $M.2 := $M.2[$p3 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 468, 32} true;
    $p4 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 468, 6} true;
    $p5 := this + 8;
    $p6 := this + 8 + 16;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 468, 6} true;
    assert !aliasQ2713(this, NULL);
    $M.2 := $M.2[$p6 := $p4];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 469, 33} true;
    $p7 := this + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 469, 6} true;
    $p8 := this + 8;
    $p9 := this + 8 + 24;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 469, 6} true;
    assert !aliasQ2714(this, NULL);
    $M.2 := $M.2[$p9 := $p7];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 470, 4} true;
    $exn := false;
    return;
}



const _ZNSaISt13_Rb_tree_nodeISsEEC2Ev: int;

axiom _ZNSaISt13_Rb_tree_nodeISsEEC2Ev == NULL - 10520;

procedure _ZNSaISt13_Rb_tree_nodeISsEEC2Ev(this: int);



implementation _ZNSaISt13_Rb_tree_nodeISsEEC2Ev(this: int)
{
  var $p0: int;

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/allocator.h", 113, 27} true;
    $p0 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/allocator.h", 113, 27} true;
    call _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEEC2Ev($p0);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/allocator.h", 113, 29} true;
    $exn := false;
    return;
}



const _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEEC2Ev: int;

axiom _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEEC2Ev == NULL - 10528;

procedure _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEEC2Ev(this: int);



implementation _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEEC2Ev(this: int)
{

  $bb0:
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/ext/new_allocator.h", 79, 47} true;
    $exn := false;
    return;
}



const llvm.dbg.value: int;

axiom llvm.dbg.value == NULL - 10536;

procedure llvm.dbg.value({:scalar} $p0: int, {:scalar} $i1: int, {:scalar} $p2: int, {:scalar} $p3: int);



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE24_M_get_insert_unique_posERKSs1: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE24_M_get_insert_unique_posERKSs1 == NULL - 10544;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE24_M_get_insert_unique_posERKSs1(ret: int, this: int, __k: int) returns ({:scalar} $r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE24_M_get_insert_unique_posERKSs1(ret: int, this: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var {:scalar} $i8: int;
  var $p9: int;
  var {:scalar} $i10: int;
  var $p11: int;
  var {:base "this"} $p12: int;
  var {:base "this"} $p13: int;
  var $p14: int;
  var $p15: int;
  var {:scalar} $i16: int;
  var {:scalar} $i17: int;
  var {:scalar} $i18: int;
  var $p19: int;
  var $p20: int;
  var $p21: int;
  var $p23: int;
  var $p22: int;
  var $p24: int;
  var {:scalar} $i25: int;
  var $p26: int;
  var {:base "$p4"} $p27: int;
  var {:scalar} $i28: int;
  var $p29: int;
  var {:base "this"} $p30: int;
  var {:base "this"} $p31: int;
  var {:base "$p3"} $p32: int;
  var $p33: int;
  var $p34: int;
  var {:scalar} $i35: int;
  var {:base "$p3"} $p36: int;
  var $p37: int;
  var {:scalar} $p38: int;
  var $p39: int;
  var $p40: int;

  $bb0:
    call $p0 := $alloc(16 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(8 * 1);
    call $p4 := $alloc(8 * 1);
    call $p5 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1318, 24} true;
    call $p6 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_beginEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1318, 18} true;
    assert !aliasQ2715($p1, NULL);
    $M.154 := $M.154[$p1 := $p6];
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1319, 24} true;
    call $p7 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_M_endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1319, 18} true;
    assert !aliasQ2716($p2, NULL);
    $M.154 := $M.154[$p2 := $p7];
    call {:cexpr "__comp"} boogie_si_record_i8(1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1321, 7} true;
    $i8 := 1;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1321, 14} true;
    assert !aliasQ2717($p1, NULL);
    $p9 := $M.154[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1321, 14} true;
    $i10 := (if $p9 != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1321, 7} true;
    assume {:branchcond $i10} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i10 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1323, 10} true;
    assert !aliasQ2718($p1, NULL);
    $p11 := $M.154[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1323, 4} true;
    assert !aliasQ2719($p2, NULL);
    $M.154 := $M.154[$p2 := $p11];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1324, 13} true;
    $p12 := this;
    $p13 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1324, 48} true;
    assert !aliasQ2720($p1, NULL);
    $p14 := $M.154[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1324, 41} true;
    call $p15 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt13_Rb_tree_nodeISsE($p14);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1324, 13} true;
    call $i16 := _ZNKSt4lessISsEclERKSsS2_($p13, __k, $p15);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1324, 4} true;
    $i17 := $i16;
    call {:cexpr "__comp"} boogie_si_record_i8($i17);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 10} true;
    $i18 := $i17;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 27} true;
    assert !aliasQ2721($p1, NULL);
    $p19 := $M.154[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 27} true;
    $p20 := $p19;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 10} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:partition} !($i10 == 1);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1327, 31} true;
    assert !aliasQ2722($p2, NULL);
    $p24 := $M.154[$p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1327, 16} true;
    call _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE($p3, $p24);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1328, 11} true;
    $i25 := $i8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1328, 11} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb4:
    assume {:partition} $i18 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 19} true;
    call $p21 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_S_leftEPSt18_Rb_tree_node_base($p20);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 10} true;
    $p22 := $p21;
    goto $bb6;

  $bb5:
    assume {:partition} !($i18 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 34} true;
    call $p23 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_rightEPSt18_Rb_tree_node_base($p20);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 10} true;
    $p22 := $p23;
    goto $bb6;

  $bb6:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 10} true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 4} true;
    assert !aliasQ2723($p1, NULL);
    $M.154 := $M.154[$p1 := $p22];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1321, 7} true;
    $i8 := $i17;
    goto $bb1;

  $bb7:
    assume {:partition} $i25 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1330, 15} true;
    call $p26 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE5beginEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1330, 15} true;
    $p27 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1330, 15} true;
    assert !aliasQ2724($p4, NULL);
    $M.143 := $M.143[$p27 := $p26];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1330, 8} true;
    call $i28 := _ZNKSt17_Rb_tree_iteratorISsEeqERKS0_($p3, $p4);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1330, 8} true;
    assume {:branchcond $i28} true;
    goto $bb10, $bb11;

  $bb8:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1328, 11} true;
    assume {:partition} !($i25 == 1);
    goto $bb9;

  $bb9:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 11} true;
    $p30 := this;
    $p31 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 41} true;
    $p32 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 41} true;
    assert !aliasQ2725($p3, NULL);
    $p33 := $M.2[$p32];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 34} true;
    call $p34 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt18_Rb_tree_node_base($p33);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 11} true;
    call $i35 := _ZNKSt4lessISsEclERKSsS2_($p31, $p34, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 11} true;
    assume {:branchcond $i35} true;
    goto $bb13, $bb14;

  $bb10:
    assume {:partition} $i28 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1331, 6} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeISsES7_vEEOT_OT0_($p0, $p1, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1331, 6} true;
    goto $bb12;

  $bb11:
    assume {:partition} !($i28 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1333, 6} true;
    call $p29 := _ZNSt17_Rb_tree_iteratorISsEmmEv($p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1334, 2} true;
    goto $bb9;

  $bb12:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    $p37 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    assert !aliasQ2726($p37, NULL);
    $p38 := $M.133[$p37];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    $p39 := ret;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    $p40 := $p37;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    assert !aliasQ2727($p39, NULL);
    assert !aliasQ2728($p40, NULL);
    $M.133[$p39] := $M.133[$p40];
    assert !aliasQ2729($p39 + 8, NULL);
    assert !aliasQ2730($p40 + 8, NULL);
    $M.133[$p39 + 8] := $M.133[$p40 + 8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    $r := $p38;
    $exn := false;
    return;

  $bb13:
    assume {:partition} $i35 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1336, 2} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeISsES7_vEEOT_OT0_($p0, $p1, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1336, 2} true;
    goto $bb12;

  $bb14:
    assume {:partition} !($i35 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1337, 7} true;
    $p36 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1337, 7} true;
    assert !aliasQ2731($p5, NULL);
    $M.136 := $M.136[$p5 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1337, 7} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEEOT_RKS1_($p0, $p36, $p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1337, 7} true;
    goto $bb12;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE16_M_insert_uniqueISsEESt4pairISt17_Rb_tree_iteratorISsEbEOT_2: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE16_M_insert_uniqueISsEESt4pairISt17_Rb_tree_iteratorISsEbEOT_2 == NULL - 10552;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE16_M_insert_uniqueISsEESt4pairISt17_Rb_tree_iteratorISsEbEOT_2(ret: int, this: int, __v: int) returns ({:scalar} $r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE16_M_insert_uniqueISsEESt4pairISt17_Rb_tree_iteratorISsEbEOT_2(ret: int, this: int, __v: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var $p8: int;
  var {:scalar} $p9: int;
  var {:base "$p8"} $p10: int;
  var $p11: int;
  var {:base "$p8"} $p12: int;
  var $p13: int;
  var $p14: int;
  var {:base "$p14"} $p15: int;
  var {:base "$p14"} $p16: int;
  var {:base "$p1"} $p17: int;
  var $p18: int;
  var {:scalar} $i19: int;
  var {:base "$p1"} $p20: int;
  var $p21: int;
  var {:base "$p1"} $p22: int;
  var $p23: int;
  var $p24: int;
  var $p25: int;
  var {:base "$p3"} $p26: int;
  var $p27: int;
  var $p28: int;
  var {:scalar} $p29: int;
  var $p30: int;
  var $p31: int;

  $bb0:
    call $p0 := $alloc(16 * 1);
    call $p1 := $alloc(16 * 1);
    call $p2 := $alloc(1 * 1);
    call $p3 := $alloc(8 * 1);
    call $p4 := $alloc(1 * 1);
    call $p5 := $alloc(8 * 1);
    call $p6 := $alloc(1 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__v"} boogie_si_record_ref(__v);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1377, 29} true;
    call $p7 := _ZNKSt9_IdentityISsEclERSs($p2, __v);
    call $p8 := $alloc(16 * 1);
    call $p9 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE24_M_get_insert_unique_posERKSs1($p8, this, $p7);
    $p10 := $p8;
    assert !aliasQ2732($p8, NULL);
    $p11 := $M.133[$p10];
    $p12 := $p8 + 8;
    assert !aliasQ2733($p8, NULL);
    $p13 := $M.133[$p12];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1377, 4} true;
    $p14 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1377, 4} true;
    $p15 := $p14;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1377, 4} true;
    assert !aliasQ2734($p14, NULL);
    $M.155 := $M.155[$p15 := $p11];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1377, 4} true;
    $p16 := $p14 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1377, 4} true;
    assert !aliasQ2735($p14, NULL);
    $M.156 := $M.156[$p16 := $p13];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1379, 11} true;
    $p17 := $p1 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1379, 11} true;
    assert !aliasQ2736($p1, NULL);
    $p18 := $M.156[$p17];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1379, 11} true;
    $i19 := (if $p18 != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1380, 25} true;
    $p20 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1380, 25} true;
    assert !aliasQ2737($p1, NULL);
    $p21 := $M.155[$p20];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1379, 11} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i19 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1380, 38} true;
    $p22 := $p1 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1380, 38} true;
    assert !aliasQ2738($p1, NULL);
    $p23 := $M.156[$p22];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1381, 11} true;
    call $p24 := _ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE(__v);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1380, 14} true;
    call $p25 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE10_M_insert_ISsEESt17_Rb_tree_iteratorISsEPSt18_Rb_tree_node_baseSA_OT_(this, $p21, $p23, $p24);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1380, 14} true;
    $p26 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1380, 14} true;
    assert !aliasQ2739($p3, NULL);
    $M.2 := $M.2[$p26 := $p25];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1380, 2} true;
    assert !aliasQ2740($p4, NULL);
    $M.153 := $M.153[$p4 := 1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1380, 2} true;
    call _ZNSt4pairISt17_Rb_tree_iteratorISsEbEC2IS1_bvEEOT_OT0_($p0, $p3, $p4);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1380, 2} true;
    goto $bb3;

  $bb2:
    assume {:partition} !($i19 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1384, 28} true;
    $p27 := $p21;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1384, 7} true;
    call _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE($p5, $p27);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1384, 7} true;
    assert !aliasQ2741($p6, NULL);
    $M.153 := $M.153[$p6 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1384, 7} true;
    call _ZNSt4pairISt17_Rb_tree_iteratorISsEbEC2IS1_bvEEOT_OT0_($p0, $p5, $p6);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1384, 7} true;
    goto $bb3;

  $bb3:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1385, 5} true;
    $p28 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1385, 5} true;
    assert !aliasQ2742($p28, NULL);
    $p29 := $M.2[$p28];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1385, 5} true;
    $p30 := ret;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1385, 5} true;
    $p31 := $p28;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1385, 5} true;
    assert !aliasQ2743($p30, NULL);
    assert !aliasQ2744($p31, NULL);
    $M.2[$p30] := $M.2[$p31];
    assert !aliasQ2745($p30 + 8, NULL);
    assert !aliasQ2746($p31 + 8, NULL);
    $M.2[$p30 + 8] := $M.2[$p31 + 8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1385, 5} true;
    $r := $p29;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11equal_rangeERKSs3: int;

axiom _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11equal_rangeERKSs3 == NULL - 10560;

procedure _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11equal_rangeERKSs3(ret: int, this: int, __k: int) returns ({:scalar} $r: int);



implementation _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE11equal_rangeERKSs3(ret: int, this: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var $p8: int;
  var {:scalar} $i9: int;
  var {:base "this"} $p10: int;
  var {:base "this"} $p11: int;
  var $p12: int;
  var {:scalar} $i13: int;
  var $p14: int;
  var $p15: int;
  var {:base "this"} $p16: int;
  var {:base "this"} $p17: int;
  var $p18: int;
  var {:scalar} $i19: int;
  var $p20: int;
  var $p21: int;
  var $p22: int;
  var $p23: int;
  var $p24: int;
  var $p25: int;
  var $p26: int;
  var {:base "$p1"} $p27: int;
  var $p28: int;
  var {:base "$p2"} $p29: int;
  var $p30: int;
  var {:scalar} $p31: int;
  var $p32: int;
  var $p33: int;

  $bb0:
    call $p0 := $alloc(16 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(8 * 1);
    call $p4 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1205, 24} true;
    call $p5 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_beginEv(this);
    call {:cexpr "__x"} boogie_si_record_ref($p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1206, 24} true;
    call $p6 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_M_endEv(this);
    call {:cexpr "__y"} boogie_si_record_ref($p6);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1207, 7} true;
    $p7, $p8 := $p5, $p6;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1207, 14} true;
    $i9 := (if $p7 != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1207, 7} true;
    assume {:branchcond $i9} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i9 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1209, 8} true;
    $p10 := this;
    $p11 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1209, 31} true;
    call $p12 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt13_Rb_tree_nodeISsE($p7);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1209, 8} true;
    call $i13 := _ZNKSt4lessISsEclERKSsS2_($p11, $p12, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1209, 8} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:partition} !($i9 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1223, 7} true;
    call _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE($p3, $p8);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1223, 7} true;
    call _ZNSt17_Rb_tree_iteratorISsEC2EPSt13_Rb_tree_nodeISsE($p4, $p8);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1223, 7} true;
    call _ZNSt4pairISt17_Rb_tree_iteratorISsES1_EC2IS1_S1_vEEOT_OT0_($p0, $p3, $p4);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1223, 7} true;
    goto $bb8;

  $bb4:
    assume {:partition} $i13 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1210, 21} true;
    $p14 := $p7;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1210, 12} true;
    call $p15 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_rightEPSt18_Rb_tree_node_base($p14);
    call {:cexpr "__x"} boogie_si_record_ref($p15);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1210, 6} true;
    $p7, $p8 := $p15, $p8;
    goto $bb1;

  $bb5:
    assume {:partition} !($i13 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1211, 13} true;
    $p16 := this;
    $p17 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1211, 41} true;
    call $p18 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE6_S_keyEPKSt13_Rb_tree_nodeISsE($p7);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1211, 13} true;
    call $i19 := _ZNKSt4lessISsEclERKSsS2_($p17, __k, $p18);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1211, 13} true;
    assume {:branchcond $i19} true;
    goto $bb6, $bb7;

  $bb6:
    assume {:partition} $i19 == 1;
    call {:cexpr "__y"} boogie_si_record_ref($p7);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1212, 31} true;
    $p20 := $p7;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1212, 23} true;
    call $p21 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_S_leftEPSt18_Rb_tree_node_base($p20);
    call {:cexpr "__x"} boogie_si_record_ref($p21);
    $p7, $p8 := $p21, $p7;
    goto $bb1;

  $bb7:
    assume {:partition} !($i19 == 1);
    call {:cexpr "__xu"} boogie_si_record_ref($p7);
    call {:cexpr "__yu"} boogie_si_record_ref($p8);
    call {:cexpr "__y"} boogie_si_record_ref($p7);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1216, 33} true;
    $p22 := $p7;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1216, 25} true;
    call $p23 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE7_S_leftEPSt18_Rb_tree_node_base($p22);
    call {:cexpr "__x"} boogie_si_record_ref($p23);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1217, 24} true;
    $p24 := $p7;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1217, 15} true;
    call $p25 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_S_rightEPSt18_Rb_tree_node_base($p24);
    call {:cexpr "__xu"} boogie_si_record_ref($p25);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1219, 23} true;
    call $p26 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_lower_boundEPSt13_Rb_tree_nodeISsES8_RKSs(this, $p23, $p7, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1219, 23} true;
    $p27 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1219, 23} true;
    assert !aliasQ2747($p1, NULL);
    $M.2 := $M.2[$p27 := $p26];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1220, 9} true;
    call $p28 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE14_M_upper_boundEPSt13_Rb_tree_nodeISsES8_RKSs(this, $p25, $p8, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1220, 9} true;
    $p29 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1220, 9} true;
    assert !aliasQ2748($p2, NULL);
    $M.2 := $M.2[$p29 := $p28];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1218, 8} true;
    call _ZNSt4pairISt17_Rb_tree_iteratorISsES1_EC2IS1_S1_vEEOT_OT0_($p0, $p1, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1218, 8} true;
    goto $bb8;

  $bb8:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1225, 5} true;
    $p30 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1225, 5} true;
    assert !aliasQ2749($p30, NULL);
    $p31 := $M.2[$p30];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1225, 5} true;
    $p32 := ret;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1225, 5} true;
    $p33 := $p30;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1225, 5} true;
    assert !aliasQ2750($p32, NULL);
    assert !aliasQ2751($p33, NULL);
    $M.2[$p32] := $M.2[$p33];
    assert !aliasQ2752($p32 + 8, NULL);
    assert !aliasQ2753($p33 + 8, NULL);
    $M.2[$p32 + 8] := $M.2[$p33 + 8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1225, 5} true;
    $r := $p31;
    $exn := false;
    return;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_4: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_4 == NULL - 10568;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_4(ret: int, this: int, __k: int) returns ({:scalar} $r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_4(ret: int, this: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var {:scalar} $i8: int;
  var $p9: int;
  var {:scalar} $i10: int;
  var $p11: int;
  var {:base "this"} $p12: int;
  var {:base "this"} $p13: int;
  var $p14: int;
  var $p15: int;
  var {:scalar} $i16: int;
  var {:scalar} $i17: int;
  var {:scalar} $i18: int;
  var $p19: int;
  var $p20: int;
  var $p21: int;
  var $p23: int;
  var $p22: int;
  var $p24: int;
  var {:scalar} $i25: int;
  var $p26: int;
  var {:base "$p4"} $p27: int;
  var {:scalar} $i28: int;
  var $p29: int;
  var {:base "this"} $p30: int;
  var {:base "this"} $p31: int;
  var {:base "$p3"} $p32: int;
  var $p33: int;
  var $p34: int;
  var {:scalar} $i35: int;
  var {:base "$p3"} $p36: int;
  var $p37: int;
  var {:scalar} $p38: int;
  var $p39: int;
  var $p40: int;

  $bb0:
    call $p0 := $alloc(16 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(8 * 1);
    call $p4 := $alloc(8 * 1);
    call $p5 := $alloc(8 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1318, 24} true;
    call $p6 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_beginEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1318, 18} true;
    assert !aliasQ2754($p1, NULL);
    $M.137 := $M.137[$p1 := $p6];
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1319, 24} true;
    call $p7 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_M_endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1319, 18} true;
    assert !aliasQ2755($p2, NULL);
    $M.137 := $M.137[$p2 := $p7];
    call {:cexpr "__comp"} boogie_si_record_i8(1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1321, 7} true;
    $i8 := 1;
    goto $bb1;

  $bb1:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1321, 14} true;
    assert !aliasQ2756($p1, NULL);
    $p9 := $M.137[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1321, 14} true;
    $i10 := (if $p9 != NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1321, 7} true;
    assume {:branchcond $i10} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i10 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1323, 10} true;
    assert !aliasQ2757($p1, NULL);
    $p11 := $M.137[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1323, 4} true;
    assert !aliasQ2758($p2, NULL);
    $M.137 := $M.137[$p2 := $p11];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1324, 13} true;
    $p12 := this;
    $p13 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1324, 48} true;
    assert !aliasQ2759($p1, NULL);
    $p14 := $M.137[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1324, 41} true;
    call $p15 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E($p14);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1324, 13} true;
    call $i16 := _ZNKSt4lessISsEclERKSsS2_($p13, __k, $p15);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1324, 4} true;
    $i17 := $i16;
    call {:cexpr "__comp"} boogie_si_record_i8($i17);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 10} true;
    $i18 := $i17;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 27} true;
    assert !aliasQ2760($p1, NULL);
    $p19 := $M.137[$p1];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 27} true;
    $p20 := $p19;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 10} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb3:
    assume {:partition} !($i10 == 1);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1327, 31} true;
    assert !aliasQ2761($p2, NULL);
    $p24 := $M.137[$p2];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1327, 16} true;
    call _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEC2EPSt13_Rb_tree_nodeIS5_E($p3, $p24);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1328, 11} true;
    $i25 := $i8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1328, 11} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb4:
    assume {:partition} $i18 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 19} true;
    call $p21 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base($p20);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 10} true;
    $p22 := $p21;
    goto $bb6;

  $bb5:
    assume {:partition} !($i18 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 34} true;
    call $p23 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base($p20);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 10} true;
    $p22 := $p23;
    goto $bb6;

  $bb6:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 10} true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1325, 4} true;
    assert !aliasQ2762($p1, NULL);
    $M.137 := $M.137[$p1 := $p22];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1321, 7} true;
    $i8 := $i17;
    goto $bb1;

  $bb7:
    assume {:partition} $i25 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1330, 15} true;
    call $p26 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE5beginEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1330, 15} true;
    $p27 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1330, 15} true;
    assert !aliasQ2763($p4, NULL);
    $M.119 := $M.119[$p27 := $p26];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1330, 8} true;
    call $i28 := _ZNKSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEeqERKS6_($p3, $p4);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1330, 8} true;
    assume {:branchcond $i28} true;
    goto $bb10, $bb11;

  $bb8:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1328, 11} true;
    assume {:partition} !($i25 == 1);
    goto $bb9;

  $bb9:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 11} true;
    $p30 := this;
    $p31 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 41} true;
    $p32 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 41} true;
    assert !aliasQ2764($p3, NULL);
    $p33 := $M.2[$p32];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 34} true;
    call $p34 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base($p33);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 11} true;
    call $i35 := _ZNKSt4lessISsEclERKSsS2_($p31, $p34, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1335, 11} true;
    assume {:branchcond $i35} true;
    goto $bb13, $bb14;

  $bb10:
    assume {:partition} $i28 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1331, 6} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKSsPN4uORB10DeviceNodeEEESC_vEEOT_OT0_($p0, $p1, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1331, 6} true;
    goto $bb12;

  $bb11:
    assume {:partition} !($i28 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1333, 6} true;
    call $p29 := _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEmmEv($p3);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1334, 2} true;
    goto $bb9;

  $bb12:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    $p37 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    assert !aliasQ2765($p37, NULL);
    $p38 := $M.133[$p37];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    $p39 := ret;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    $p40 := $p37;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    assert !aliasQ2766($p39, NULL);
    assert !aliasQ2767($p40, NULL);
    $M.133[$p39] := $M.133[$p40];
    assert !aliasQ2768($p39 + 8, NULL);
    assert !aliasQ2769($p40 + 8, NULL);
    $M.133[$p39 + 8] := $M.133[$p40 + 8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1338, 5} true;
    $r := $p38;
    $exn := false;
    return;

  $bb13:
    assume {:partition} $i35 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1336, 2} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKSsPN4uORB10DeviceNodeEEESC_vEEOT_OT0_($p0, $p1, $p2);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1336, 2} true;
    goto $bb12;

  $bb14:
    assume {:partition} !($i35 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1337, 7} true;
    $p36 := $p3;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1337, 7} true;
    assert !aliasQ2770($p5, NULL);
    $M.136 := $M.136[$p5 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1337, 7} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEEOT_RKS1_($p0, $p36, $p5);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1337, 7} true;
    goto $bb12;
}



const _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_5: int;

axiom _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_5 == NULL - 10576;

procedure _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_5(ret: int, this: int, __position.coerce: int, __k: int) returns ({:scalar} $r: int);



implementation _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_5(ret: int, this: int, __position.coerce: int, __k: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var $p8: int;
  var $p9: int;
  var {:base "$p1"} $p10: int;
  var $p11: int;
  var {:base "$p2"} $p12: int;
  var {:base "$p2"} $p13: int;
  var $p14: int;
  var $p15: int;
  var $p16: int;
  var {:scalar} $i17: int;
  var {:scalar} $i18: int;
  var {:scalar} $i19: int;
  var {:base "this"} $p20: int;
  var {:base "this"} $p21: int;
  var $p22: int;
  var $p23: int;
  var $p24: int;
  var {:scalar} $i25: int;
  var $p26: int;
  var $p27: int;
  var {:scalar} $p28: int;
  var {:base "$p27"} $p29: int;
  var $p30: int;
  var {:base "$p27"} $p31: int;
  var $p32: int;
  var $p33: int;
  var {:base "$p33"} $p34: int;
  var {:base "$p33"} $p35: int;
  var {:base "this"} $p36: int;
  var {:base "this"} $p37: int;
  var {:base "$p2"} $p38: int;
  var $p39: int;
  var $p40: int;
  var {:scalar} $i41: int;
  var $p42: int;
  var $p43: int;
  var {:base "$p2"} $p44: int;
  var $p45: int;
  var $p46: int;
  var $p47: int;
  var {:scalar} $i48: int;
  var $p49: int;
  var $p50: int;
  var {:base "this"} $p51: int;
  var {:base "this"} $p52: int;
  var $p53: int;
  var {:base "$p53"} $p54: int;
  var $p55: int;
  var $p56: int;
  var {:scalar} $i57: int;
  var {:base "$p4"} $p58: int;
  var $p59: int;
  var $p60: int;
  var {:scalar} $i61: int;
  var {:base "$p4"} $p62: int;
  var {:base "$p2"} $p63: int;
  var {:base "$p2"} $p64: int;
  var $p65: int;
  var {:scalar} $p66: int;
  var {:base "$p65"} $p67: int;
  var $p68: int;
  var {:base "$p65"} $p69: int;
  var $p70: int;
  var $p71: int;
  var {:base "$p71"} $p72: int;
  var {:base "$p71"} $p73: int;
  var {:base "this"} $p74: int;
  var {:base "this"} $p75: int;
  var {:base "$p2"} $p76: int;
  var $p77: int;
  var $p78: int;
  var {:scalar} $i79: int;
  var $p80: int;
  var $p81: int;
  var {:base "$p2"} $p82: int;
  var $p83: int;
  var $p84: int;
  var $p85: int;
  var {:scalar} $i86: int;
  var $p87: int;
  var {:base "this"} $p88: int;
  var {:base "this"} $p89: int;
  var $p90: int;
  var {:base "$p90"} $p91: int;
  var $p92: int;
  var $p93: int;
  var {:scalar} $i94: int;
  var {:base "$p2"} $p95: int;
  var $p96: int;
  var $p97: int;
  var {:scalar} $i98: int;
  var {:base "$p2"} $p99: int;
  var {:base "$p6"} $p100: int;
  var {:base "$p6"} $p101: int;
  var $p102: int;
  var {:scalar} $p103: int;
  var {:base "$p102"} $p104: int;
  var $p105: int;
  var {:base "$p102"} $p106: int;
  var $p107: int;
  var $p108: int;
  var {:base "$p108"} $p109: int;
  var {:base "$p108"} $p110: int;
  var {:base "$p2"} $p111: int;
  var $p112: int;
  var {:scalar} $p113: int;
  var $p114: int;
  var $p115: int;

  $bb0:
    call $p0 := $alloc(16 * 1);
    call $p1 := $alloc(8 * 1);
    call $p2 := $alloc(8 * 1);
    call $p3 := $alloc(8 * 1);
    call $p4 := $alloc(8 * 1);
    call $p5 := $alloc(8 * 1);
    call $p6 := $alloc(8 * 1);
    call $p7 := $alloc(8 * 1);
    call $p8 := $alloc(8 * 1);
    call $p9 := $alloc(8 * 1);
    $p10 := $p1;
    assert !aliasQ2771($p1, NULL);
    $M.139 := $M.139[$p10 := __position.coerce];
    call {:cexpr "this"} boogie_si_record_ref(this);
    assume true;
    call {:cexpr "__k"} boogie_si_record_ref(__k);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1415, 24} true;
    call $p11 := _ZNKSt23_Rb_tree_const_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEE13_M_const_castEv($p1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1415, 24} true;
    $p12 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1415, 24} true;
    assert !aliasQ2772($p2, NULL);
    $M.2 := $M.2[$p12 := $p11];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1419, 11} true;
    $p13 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1419, 11} true;
    assert !aliasQ2773($p2, NULL);
    $p14 := $M.2[$p13];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1419, 28} true;
    call $p15 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_M_endEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1419, 28} true;
    $p16 := $p15;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1419, 11} true;
    $i17 := (if $p14 == $p16 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1419, 11} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb1:
    assume {:partition} $i17 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1421, 8} true;
    call $i18 := _ZNKSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4sizeEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1421, 8} true;
    $i19 := (if $i18 > NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1421, 8} true;
    assume {:branchcond $i19} true;
    goto $bb3, $bb4;

  $bb2:
    assume {:partition} !($i17 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1427, 16} true;
    $p36 := this;
    $p37 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1427, 51} true;
    $p38 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1427, 51} true;
    assert !aliasQ2774($p2, NULL);
    $p39 := $M.2[$p38];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1427, 44} true;
    call $p40 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base($p39);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1427, 16} true;
    call $i41 := _ZNKSt4lessISsEclERKSsS2_($p37, __k, $p40);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1427, 16} true;
    assume {:branchcond $i41} true;
    goto $bb9, $bb10;

  $bb3:
    assume {:partition} $i19 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1422, 11} true;
    $p20 := this;
    $p21 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1422, 41} true;
    call $p22 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE12_M_rightmostEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1422, 41} true;
    assert !aliasQ2775($p22, NULL);
    $p23 := $M.2[$p22];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1422, 34} true;
    call $p24 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base($p23);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1422, 11} true;
    call $i25 := _ZNKSt4lessISsEclERKSsS2_($p21, $p24, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1421, 8} true;
    assume {:branchcond $i25} true;
    goto $bb6, $bb7;

  $bb4:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1421, 8} true;
    assume {:partition} !($i19 == 1);
    goto $bb5;

  $bb5:
    call $p27 := $alloc(16 * 1);
    call $p28 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_4($p27, this, __k);
    $p29 := $p27;
    assert !aliasQ2776($p27, NULL);
    $p30 := $M.133[$p29];
    $p31 := $p27 + 8;
    assert !aliasQ2777($p27, NULL);
    $p32 := $M.133[$p31];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1425, 13} true;
    $p33 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1425, 13} true;
    $p34 := $p33;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1425, 13} true;
    assert !aliasQ2778($p33, NULL);
    $M.133 := $M.133[$p34 := $p30];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1425, 13} true;
    $p35 := $p33 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1425, 13} true;
    assert !aliasQ2779($p33, NULL);
    $M.133 := $M.133[$p35 := $p32];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1425, 6} true;
    goto $bb8;

  $bb6:
    assume {:partition} $i25 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1423, 6} true;
    assert !aliasQ2780($p3, NULL);
    $M.138 := $M.138[$p3 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1423, 21} true;
    call $p26 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE12_M_rightmostEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1423, 6} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEERKS1_OT_($p0, $p3, $p26);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1423, 6} true;
    goto $bb8;

  $bb7:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1421, 8} true;
    assume {:partition} !($i25 == 1);
    goto $bb5;

  $bb8:
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1462, 5} true;
    $p112 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1462, 5} true;
    assert !aliasQ2781($p112, NULL);
    $p113 := $M.133[$p112];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1462, 5} true;
    $p114 := ret;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1462, 5} true;
    $p115 := $p112;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1462, 5} true;
    assert !aliasQ2782($p114, NULL);
    assert !aliasQ2783($p115, NULL);
    $M.133[$p114] := $M.133[$p115];
    assert !aliasQ2784($p114 + 8, NULL);
    assert !aliasQ2785($p115 + 8, NULL);
    $M.133[$p114 + 8] := $M.133[$p115 + 8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1462, 5} true;
    $r := $p113;
    $exn := false;
    return;

  $bb9:
    assume {:partition} $i41 == 1;
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1430, 13} true;
    $p42 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1430, 13} true;
    $p43 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1430, 13} true;
    assert !aliasQ2786($p42, NULL);
    assert !aliasQ2787($p43, NULL);
    $M.2[$p42] := $M.2[$p43];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1431, 8} true;
    $p44 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1431, 8} true;
    assert !aliasQ2788($p2, NULL);
    $p45 := $M.2[$p44];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1431, 25} true;
    call $p46 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_leftmostEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1431, 25} true;
    assert !aliasQ2789($p46, NULL);
    $p47 := $M.2[$p46];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1431, 8} true;
    $i48 := (if $p45 == $p47 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1431, 8} true;
    assume {:branchcond $i48} true;
    goto $bb11, $bb12;

  $bb10:
    assume {:partition} !($i41 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1443, 16} true;
    $p74 := this;
    $p75 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1443, 46} true;
    $p76 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1443, 46} true;
    assert !aliasQ2790($p2, NULL);
    $p77 := $M.2[$p76];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1443, 39} true;
    call $p78 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base($p77);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1443, 16} true;
    call $i79 := _ZNKSt4lessISsEclERKSsS2_($p75, $p78, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1443, 16} true;
    assume {:branchcond $i79} true;
    goto $bb17, $bb18;

  $bb11:
    assume {:partition} $i48 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1432, 18} true;
    call $p49 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_leftmostEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1432, 33} true;
    call $p50 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE11_M_leftmostEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1432, 6} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_vEEOT_OT0_($p0, $p49, $p50);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1432, 6} true;
    goto $bb8;

  $bb12:
    assume {:partition} !($i48 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1433, 13} true;
    $p51 := this;
    $p52 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1433, 44} true;
    call $p53 := _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEmmEv($p4);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1433, 43} true;
    $p54 := $p53;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1433, 43} true;
    assert !aliasQ2791($p53, NULL);
    $p55 := $M.2[$p54];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1433, 36} true;
    call $p56 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base($p55);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1433, 13} true;
    call $i57 := _ZNKSt4lessISsEclERKSsS2_($p52, $p56, __k);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1433, 13} true;
    assume {:branchcond $i57} true;
    goto $bb13, $bb14;

  $bb13:
    assume {:partition} $i57 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1435, 21} true;
    $p58 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1435, 21} true;
    assert !aliasQ2792($p4, NULL);
    $p59 := $M.2[$p58];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1435, 12} true;
    call $p60 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base($p59);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1435, 12} true;
    $i61 := (if $p60 == NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1435, 12} true;
    assume {:branchcond $i61} true;
    goto $bb15, $bb16;

  $bb14:
    assume {:partition} !($i57 == 1);
    call $p65 := $alloc(16 * 1);
    call $p66 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_4($p65, this, __k);
    $p67 := $p65;
    assert !aliasQ2793($p65, NULL);
    $p68 := $M.133[$p67];
    $p69 := $p65 + 8;
    assert !aliasQ2794($p65, NULL);
    $p70 := $M.133[$p69];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1441, 13} true;
    $p71 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1441, 13} true;
    $p72 := $p71;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1441, 13} true;
    assert !aliasQ2795($p71, NULL);
    $M.133 := $M.133[$p72 := $p68];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1441, 13} true;
    $p73 := $p71 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1441, 13} true;
    assert !aliasQ2796($p71, NULL);
    $M.133 := $M.133[$p73 := $p70];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1441, 6} true;
    goto $bb8;

  $bb15:
    assume {:partition} $i61 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1436, 3} true;
    assert !aliasQ2797($p5, NULL);
    $M.138 := $M.138[$p5 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1436, 3} true;
    $p62 := $p4;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1436, 3} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEERKS1_OT_($p0, $p5, $p62);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1436, 3} true;
    goto $bb8;

  $bb16:
    assume {:partition} !($i61 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1438, 3} true;
    $p63 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1438, 3} true;
    $p64 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1438, 3} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_vEEOT_OT0_($p0, $p63, $p64);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1438, 3} true;
    goto $bb8;

  $bb17:
    assume {:partition} $i79 == 1;
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1446, 13} true;
    $p80 := $p6;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1446, 13} true;
    $p81 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1446, 13} true;
    assert !aliasQ2798($p80, NULL);
    assert !aliasQ2799($p81, NULL);
    $M.2[$p80] := $M.2[$p81];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1447, 8} true;
    $p82 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1447, 8} true;
    assert !aliasQ2800($p2, NULL);
    $p83 := $M.2[$p82];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1447, 25} true;
    call $p84 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE12_M_rightmostEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1447, 25} true;
    assert !aliasQ2801($p84, NULL);
    $p85 := $M.2[$p84];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1447, 8} true;
    $i86 := (if $p83 == $p85 then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1447, 8} true;
    assume {:branchcond $i86} true;
    goto $bb19, $bb20;

  $bb18:
    assume {:partition} !($i79 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1461, 2} true;
    $p111 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1461, 2} true;
    assert !aliasQ2802($p9, NULL);
    $M.136 := $M.136[$p9 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1461, 2} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEEOT_RKS1_($p0, $p111, $p9);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1461, 2} true;
    goto $bb8;

  $bb19:
    assume {:partition} $i86 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1448, 6} true;
    assert !aliasQ2803($p7, NULL);
    $M.138 := $M.138[$p7 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1448, 21} true;
    call $p87 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE12_M_rightmostEv(this);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1448, 6} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEERKS1_OT_($p0, $p7, $p87);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1448, 6} true;
    goto $bb8;

  $bb20:
    assume {:partition} !($i86 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1449, 13} true;
    $p88 := this;
    $p89 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1449, 49} true;
    call $p90 := _ZNSt17_Rb_tree_iteratorISt4pairIKSsPN4uORB10DeviceNodeEEEppEv($p6);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1449, 48} true;
    $p91 := $p90;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1449, 48} true;
    assert !aliasQ2804($p90, NULL);
    $p92 := $M.2[$p91];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1449, 41} true;
    call $p93 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base($p92);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1449, 13} true;
    call $i94 := _ZNKSt4lessISsEclERKSsS2_($p89, __k, $p93);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1449, 13} true;
    assume {:branchcond $i94} true;
    goto $bb21, $bb22;

  $bb21:
    assume {:partition} $i94 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1451, 21} true;
    $p95 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1451, 21} true;
    assert !aliasQ2805($p2, NULL);
    $p96 := $M.2[$p95];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1451, 12} true;
    call $p97 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base($p96);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1451, 12} true;
    $i98 := (if $p97 == NULL then 1 else NULL);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1451, 12} true;
    assume {:branchcond $i98} true;
    goto $bb23, $bb24;

  $bb22:
    assume {:partition} !($i94 == 1);
    call $p102 := $alloc(16 * 1);
    call $p103 := _ZNSt8_Rb_treeISsSt4pairIKSsPN4uORB10DeviceNodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_4($p102, this, __k);
    $p104 := $p102;
    assert !aliasQ2806($p102, NULL);
    $p105 := $M.133[$p104];
    $p106 := $p102 + 8;
    assert !aliasQ2807($p102, NULL);
    $p107 := $M.133[$p106];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1457, 13} true;
    $p108 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1457, 13} true;
    $p109 := $p108;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1457, 13} true;
    assert !aliasQ2808($p108, NULL);
    $M.133 := $M.133[$p109 := $p105];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1457, 13} true;
    $p110 := $p108 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1457, 13} true;
    assert !aliasQ2809($p108, NULL);
    $M.133 := $M.133[$p110 := $p107];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1457, 6} true;
    goto $bb8;

  $bb23:
    assume {:partition} $i98 == 1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1452, 3} true;
    assert !aliasQ2810($p8, NULL);
    $M.138 := $M.138[$p8 := NULL];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1452, 3} true;
    $p99 := $p2;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1452, 3} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEERKS1_OT_($p0, $p8, $p99);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1452, 3} true;
    goto $bb8;

  $bb24:
    assume {:partition} !($i98 == 1);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1454, 3} true;
    $p100 := $p6;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1454, 3} true;
    $p101 := $p6;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1454, 3} true;
    call _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_vEEOT_OT0_($p0, $p100, $p101);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_tree.h", 1454, 3} true;
    goto $bb8;
}



const _ZNSt3setISsSt4lessISsESaISsEE6insertEOSs6: int;

axiom _ZNSt3setISsSt4lessISsESaISsEE6insertEOSs6 == NULL - 10584;

procedure _ZNSt3setISsSt4lessISsESaISsEE6insertEOSs6(ret: int, this: int, __x: int) returns ({:scalar} $r: int);



implementation _ZNSt3setISsSt4lessISsESaISsEE6insertEOSs6(ret: int, this: int, __x: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var {:base "this"} $p2: int;
  var $p3: int;
  var $p4: int;
  var {:scalar} $p5: int;
  var {:base "$p4"} $p6: int;
  var $p7: int;
  var {:base "$p4"} $p8: int;
  var {:scalar} $i9: int;
  var $p10: int;
  var {:base "$p10"} $p11: int;
  var {:base "$p10"} $p12: int;
  var {:base "$p1"} $p13: int;
  var {:base "$p1"} $p14: int;
  var $p15: int;
  var {:scalar} $p16: int;
  var $p17: int;
  var $p18: int;

  $bb0:
    call $p0 := $alloc(16 * 1);
    call $p1 := $alloc(16 * 1);
    call {:cexpr "this"} boogie_si_record_ref(this);
    call {:cexpr "__x"} boogie_si_record_ref(__x);
    assume true;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 472, 4} true;
    $p2 := this;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 472, 26} true;
    call $p3 := _ZSt4moveIRSsEONSt16remove_referenceIT_E4typeEOS2_(__x);
    call $p4 := $alloc(16 * 1);
    call $p5 := _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE16_M_insert_uniqueISsEESt4pairISt17_Rb_tree_iteratorISsEbEOT_2($p4, $p2, $p3);
    $p6 := $p4;
    assert !aliasQ2811($p4, NULL);
    $p7 := $M.2[$p6];
    $p8 := $p4 + 8;
    assert !aliasQ2812($p4, NULL);
    $i9 := $M.2[$p8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 472, 4} true;
    $p10 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 472, 4} true;
    $p11 := $p10;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 472, 4} true;
    assert !aliasQ2813($p10, NULL);
    $M.124 := $M.124[$p11 := $p7];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 472, 4} true;
    $p12 := $p10 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 472, 4} true;
    assert !aliasQ2814($p10, NULL);
    $M.144 := $M.144[$p12 := $i9];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 473, 2} true;
    $p13 := $p1;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 473, 2} true;
    $p14 := $p1 + 8;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 473, 2} true;
    call _ZNSt4pairISt23_Rb_tree_const_iteratorISsEbEC2IRSt17_Rb_tree_iteratorISsERbvEEOT_OT0_($p0, $p13, $p14);
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 473, 2} true;
    $p15 := $p0;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 473, 2} true;
    assert !aliasQ2815($p15, NULL);
    $p16 := $M.113[$p15];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 473, 2} true;
    $p17 := ret;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 473, 2} true;
    $p18 := $p15;
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 473, 2} true;
    assert !aliasQ2816($p17, NULL);
    assert !aliasQ2817($p18, NULL);
    $M.113[$p17] := $M.113[$p18];
    assert !aliasQ2818($p17 + 8, NULL);
    assert !aliasQ2819($p18 + 8, NULL);
    $M.113[$p17 + 8] := $M.113[$p18 + 8];
    assume {:sourceloc "/usr/bin/../lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_set.h", 473, 2} true;
    $r := $p16;
    $exn := false;
    return;
}



const __SMACK_static_init: int;

axiom __SMACK_static_init == NULL - 10592;

procedure __SMACK_static_init();



implementation __SMACK_static_init()
{

  $bb0:
    assert !aliasQ2820(_ZTVN4uORB11PublicationI18vehicle_attitude_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18vehicle_attitude_sEE := NULL];
    assert !aliasQ2821(_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 8 := NULL];
    assert !aliasQ2822(_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 16 := _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev];
    assert !aliasQ2823(_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 24 := _ZN4uORB11PublicationI18vehicle_attitude_sED0Ev];
    assert !aliasQ2824(_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 32 := _ZN4uORB11PublicationI18vehicle_attitude_sE6updateEv];
    assert !aliasQ2825(_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 40 := NULL - 32];
    assert !aliasQ2826(_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 48 := NULL];
    assert !aliasQ2827(_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 56 := _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED1Ev];
    assert !aliasQ2828(_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18vehicle_attitude_sEE + 64 := _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED0Ev];
    assert !aliasQ2829(_ZTVN4uORB11PublicationI24vehicle_local_position_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_local_position_sEE := NULL];
    assert !aliasQ2830(_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 8 := NULL];
    assert !aliasQ2831(_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 16 := _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev];
    assert !aliasQ2832(_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 24 := _ZN4uORB11PublicationI24vehicle_local_position_sED0Ev];
    assert !aliasQ2833(_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 32 := _ZN4uORB11PublicationI24vehicle_local_position_sE6updateEv];
    assert !aliasQ2834(_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 40 := NULL - 32];
    assert !aliasQ2835(_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 48 := NULL];
    assert !aliasQ2836(_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 56 := _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED1Ev];
    assert !aliasQ2837(_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_local_position_sEE + 64 := _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED0Ev];
    assert !aliasQ2838(_ZTVN4uORB11PublicationI25vehicle_global_position_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI25vehicle_global_position_sEE := NULL];
    assert !aliasQ2839(_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 8 := NULL];
    assert !aliasQ2840(_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 16 := _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev];
    assert !aliasQ2841(_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 24 := _ZN4uORB11PublicationI25vehicle_global_position_sED0Ev];
    assert !aliasQ2842(_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 32 := _ZN4uORB11PublicationI25vehicle_global_position_sE6updateEv];
    assert !aliasQ2843(_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 40 := NULL - 32];
    assert !aliasQ2844(_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 48 := NULL];
    assert !aliasQ2845(_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 56 := _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED1Ev];
    assert !aliasQ2846(_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI25vehicle_global_position_sEE + 64 := _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED0Ev];
    assert !aliasQ2847(_ZTVN4uORB11PublicationI17debug_key_value_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17debug_key_value_sEE := NULL];
    assert !aliasQ2848(_ZTVN4uORB11PublicationI17debug_key_value_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17debug_key_value_sEE + 8 := NULL];
    assert !aliasQ2849(_ZTVN4uORB11PublicationI17debug_key_value_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17debug_key_value_sEE + 16 := _ZN4uORB11PublicationI17debug_key_value_sED2Ev];
    assert !aliasQ2850(_ZTVN4uORB11PublicationI17debug_key_value_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17debug_key_value_sEE + 24 := _ZN4uORB11PublicationI17debug_key_value_sED0Ev];
    assert !aliasQ2851(_ZTVN4uORB11PublicationI17debug_key_value_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17debug_key_value_sEE + 32 := _ZN4uORB11PublicationI17debug_key_value_sE6updateEv];
    assert !aliasQ2852(_ZTVN4uORB11PublicationI17debug_key_value_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17debug_key_value_sEE + 40 := NULL - 32];
    assert !aliasQ2853(_ZTVN4uORB11PublicationI17debug_key_value_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17debug_key_value_sEE + 48 := NULL];
    assert !aliasQ2854(_ZTVN4uORB11PublicationI17debug_key_value_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17debug_key_value_sEE + 56 := _ZThn32_N4uORB11PublicationI17debug_key_value_sED1Ev];
    assert !aliasQ2855(_ZTVN4uORB11PublicationI17debug_key_value_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17debug_key_value_sEE + 64 := _ZThn32_N4uORB11PublicationI17debug_key_value_sED0Ev];
    assert !aliasQ2856(_ZTVN4uORB11PublicationI19actuator_controls_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI19actuator_controls_sEE := NULL];
    assert !aliasQ2857(_ZTVN4uORB11PublicationI19actuator_controls_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI19actuator_controls_sEE + 8 := NULL];
    assert !aliasQ2858(_ZTVN4uORB11PublicationI19actuator_controls_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI19actuator_controls_sEE + 16 := _ZN4uORB11PublicationI19actuator_controls_sED2Ev];
    assert !aliasQ2859(_ZTVN4uORB11PublicationI19actuator_controls_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI19actuator_controls_sEE + 24 := _ZN4uORB11PublicationI19actuator_controls_sED0Ev];
    assert !aliasQ2860(_ZTVN4uORB11PublicationI19actuator_controls_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI19actuator_controls_sEE + 32 := _ZN4uORB11PublicationI19actuator_controls_sE6updateEv];
    assert !aliasQ2861(_ZTVN4uORB11PublicationI19actuator_controls_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI19actuator_controls_sEE + 40 := NULL - 32];
    assert !aliasQ2862(_ZTVN4uORB11PublicationI19actuator_controls_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI19actuator_controls_sEE + 48 := NULL];
    assert !aliasQ2863(_ZTVN4uORB11PublicationI19actuator_controls_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI19actuator_controls_sEE + 56 := _ZThn32_N4uORB11PublicationI19actuator_controls_sED1Ev];
    assert !aliasQ2864(_ZTVN4uORB11PublicationI19actuator_controls_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI19actuator_controls_sEE + 64 := _ZThn32_N4uORB11PublicationI19actuator_controls_sED0Ev];
    assert !aliasQ2865(_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE := NULL];
    assert !aliasQ2866(_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 8 := NULL];
    assert !aliasQ2867(_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 16 := _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev];
    assert !aliasQ2868(_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 24 := _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev];
    assert !aliasQ2869(_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 32 := _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE6updateEv];
    assert !aliasQ2870(_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 40 := NULL - 32];
    assert !aliasQ2871(_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 48 := NULL];
    assert !aliasQ2872(_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 56 := _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED1Ev];
    assert !aliasQ2873(_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI34vehicle_global_velocity_setpoint_sEE + 64 := _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev];
    assert !aliasQ2874(_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE := NULL];
    assert !aliasQ2875(_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 8 := NULL];
    assert !aliasQ2876(_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 16 := _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev];
    assert !aliasQ2877(_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 24 := _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev];
    assert !aliasQ2878(_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 32 := _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE6updateEv];
    assert !aliasQ2879(_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 40 := NULL - 32];
    assert !aliasQ2880(_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 48 := NULL];
    assert !aliasQ2881(_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 56 := _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED1Ev];
    assert !aliasQ2882(_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI27vehicle_attitude_setpoint_sEE + 64 := _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev];
    assert !aliasQ2883(_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE := NULL];
    assert !aliasQ2884(_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 8 := NULL];
    assert !aliasQ2885(_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 16 := _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev];
    assert !aliasQ2886(_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 24 := _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev];
    assert !aliasQ2887(_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 32 := _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE6updateEv];
    assert !aliasQ2888(_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 40 := NULL - 32];
    assert !aliasQ2889(_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 48 := NULL];
    assert !aliasQ2890(_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 56 := _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED1Ev];
    assert !aliasQ2891(_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI24vehicle_rates_setpoint_sEE + 64 := _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev];
    assert !aliasQ2892(_ZTVN4uORB11PublicationI18actuator_outputs_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18actuator_outputs_sEE := NULL];
    assert !aliasQ2893(_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 8 := NULL];
    assert !aliasQ2894(_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 16 := _ZN4uORB11PublicationI18actuator_outputs_sED2Ev];
    assert !aliasQ2895(_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 24 := _ZN4uORB11PublicationI18actuator_outputs_sED0Ev];
    assert !aliasQ2896(_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 32 := _ZN4uORB11PublicationI18actuator_outputs_sE6updateEv];
    assert !aliasQ2897(_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 40 := NULL - 32];
    assert !aliasQ2898(_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 48 := NULL];
    assert !aliasQ2899(_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 56 := _ZThn32_N4uORB11PublicationI18actuator_outputs_sED1Ev];
    assert !aliasQ2900(_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI18actuator_outputs_sEE + 64 := _ZThn32_N4uORB11PublicationI18actuator_outputs_sED0Ev];
    assert !aliasQ2901(_ZTVN4uORB11PublicationI17actuator_direct_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17actuator_direct_sEE := NULL];
    assert !aliasQ2902(_ZTVN4uORB11PublicationI17actuator_direct_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17actuator_direct_sEE + 8 := NULL];
    assert !aliasQ2903(_ZTVN4uORB11PublicationI17actuator_direct_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17actuator_direct_sEE + 16 := _ZN4uORB11PublicationI17actuator_direct_sED2Ev];
    assert !aliasQ2904(_ZTVN4uORB11PublicationI17actuator_direct_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17actuator_direct_sEE + 24 := _ZN4uORB11PublicationI17actuator_direct_sED0Ev];
    assert !aliasQ2905(_ZTVN4uORB11PublicationI17actuator_direct_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17actuator_direct_sEE + 32 := _ZN4uORB11PublicationI17actuator_direct_sE6updateEv];
    assert !aliasQ2906(_ZTVN4uORB11PublicationI17actuator_direct_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17actuator_direct_sEE + 40 := NULL - 32];
    assert !aliasQ2907(_ZTVN4uORB11PublicationI17actuator_direct_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17actuator_direct_sEE + 48 := NULL];
    assert !aliasQ2908(_ZTVN4uORB11PublicationI17actuator_direct_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17actuator_direct_sEE + 56 := _ZThn32_N4uORB11PublicationI17actuator_direct_sED1Ev];
    assert !aliasQ2909(_ZTVN4uORB11PublicationI17actuator_direct_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI17actuator_direct_sEE + 64 := _ZThn32_N4uORB11PublicationI17actuator_direct_sED0Ev];
    assert !aliasQ2910(_ZTVN4uORB11PublicationI10encoders_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI10encoders_sEE := NULL];
    assert !aliasQ2911(_ZTVN4uORB11PublicationI10encoders_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI10encoders_sEE + 8 := NULL];
    assert !aliasQ2912(_ZTVN4uORB11PublicationI10encoders_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI10encoders_sEE + 16 := _ZN4uORB11PublicationI10encoders_sED2Ev];
    assert !aliasQ2913(_ZTVN4uORB11PublicationI10encoders_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI10encoders_sEE + 24 := _ZN4uORB11PublicationI10encoders_sED0Ev];
    assert !aliasQ2914(_ZTVN4uORB11PublicationI10encoders_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI10encoders_sEE + 32 := _ZN4uORB11PublicationI10encoders_sE6updateEv];
    assert !aliasQ2915(_ZTVN4uORB11PublicationI10encoders_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI10encoders_sEE + 40 := NULL - 32];
    assert !aliasQ2916(_ZTVN4uORB11PublicationI10encoders_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI10encoders_sEE + 48 := NULL];
    assert !aliasQ2917(_ZTVN4uORB11PublicationI10encoders_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI10encoders_sEE + 56 := _ZThn32_N4uORB11PublicationI10encoders_sED1Ev];
    assert !aliasQ2918(_ZTVN4uORB11PublicationI10encoders_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI10encoders_sEE + 64 := _ZThn32_N4uORB11PublicationI10encoders_sED0Ev];
    assert !aliasQ2919(_ZTVN4uORB11PublicationI13tecs_status_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13tecs_status_sEE := NULL];
    assert !aliasQ2920(_ZTVN4uORB11PublicationI13tecs_status_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13tecs_status_sEE + 8 := NULL];
    assert !aliasQ2921(_ZTVN4uORB11PublicationI13tecs_status_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13tecs_status_sEE + 16 := _ZN4uORB11PublicationI13tecs_status_sED2Ev];
    assert !aliasQ2922(_ZTVN4uORB11PublicationI13tecs_status_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13tecs_status_sEE + 24 := _ZN4uORB11PublicationI13tecs_status_sED0Ev];
    assert !aliasQ2923(_ZTVN4uORB11PublicationI13tecs_status_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13tecs_status_sEE + 32 := _ZN4uORB11PublicationI13tecs_status_sE6updateEv];
    assert !aliasQ2924(_ZTVN4uORB11PublicationI13tecs_status_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13tecs_status_sEE + 40 := NULL - 32];
    assert !aliasQ2925(_ZTVN4uORB11PublicationI13tecs_status_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13tecs_status_sEE + 48 := NULL];
    assert !aliasQ2926(_ZTVN4uORB11PublicationI13tecs_status_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13tecs_status_sEE + 56 := _ZThn32_N4uORB11PublicationI13tecs_status_sED1Ev];
    assert !aliasQ2927(_ZTVN4uORB11PublicationI13tecs_status_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13tecs_status_sEE + 64 := _ZThn32_N4uORB11PublicationI13tecs_status_sED0Ev];
    assert !aliasQ2928(_ZTVN4uORB11PublicationI13rc_channels_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13rc_channels_sEE := NULL];
    assert !aliasQ2929(_ZTVN4uORB11PublicationI13rc_channels_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13rc_channels_sEE + 8 := NULL];
    assert !aliasQ2930(_ZTVN4uORB11PublicationI13rc_channels_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13rc_channels_sEE + 16 := _ZN4uORB11PublicationI13rc_channels_sED2Ev];
    assert !aliasQ2931(_ZTVN4uORB11PublicationI13rc_channels_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13rc_channels_sEE + 24 := _ZN4uORB11PublicationI13rc_channels_sED0Ev];
    assert !aliasQ2932(_ZTVN4uORB11PublicationI13rc_channels_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13rc_channels_sEE + 32 := _ZN4uORB11PublicationI13rc_channels_sE6updateEv];
    assert !aliasQ2933(_ZTVN4uORB11PublicationI13rc_channels_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13rc_channels_sEE + 40 := NULL - 32];
    assert !aliasQ2934(_ZTVN4uORB11PublicationI13rc_channels_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13rc_channels_sEE + 48 := NULL];
    assert !aliasQ2935(_ZTVN4uORB11PublicationI13rc_channels_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13rc_channels_sEE + 56 := _ZThn32_N4uORB11PublicationI13rc_channels_sED1Ev];
    assert !aliasQ2936(_ZTVN4uORB11PublicationI13rc_channels_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI13rc_channels_sEE + 64 := _ZThn32_N4uORB11PublicationI13rc_channels_sED0Ev];
    assert !aliasQ2937(_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE := NULL];
    assert !aliasQ2938(_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 8 := NULL];
    assert !aliasQ2939(_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 16 := _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev];
    assert !aliasQ2940(_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 24 := _ZN4uORB11PublicationI22filtered_bottom_flow_sED0Ev];
    assert !aliasQ2941(_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 32 := _ZN4uORB11PublicationI22filtered_bottom_flow_sE6updateEv];
    assert !aliasQ2942(_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 40 := NULL - 32];
    assert !aliasQ2943(_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 48 := NULL];
    assert !aliasQ2944(_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 56 := _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED1Ev];
    assert !aliasQ2945(_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB11PublicationI22filtered_bottom_flow_sEE + 64 := _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED0Ev];
    assert !aliasQ2946(_ZTVN4uORB15PublicationBaseE, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationBaseE := NULL];
    assert !aliasQ2947(_ZTVN4uORB15PublicationBaseE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationBaseE + 8 := NULL];
    assert !aliasQ2948(_ZTVN4uORB15PublicationBaseE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationBaseE + 16 := _ZN4uORB15PublicationBaseD2Ev];
    assert !aliasQ2949(_ZTVN4uORB15PublicationBaseE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationBaseE + 24 := _ZN4uORB15PublicationBaseD0Ev];
    assert !aliasQ2950(_ZTVN4uORB12SubscriptionI18parameter_update_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18parameter_update_sEE := NULL];
    assert !aliasQ2951(_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 8 := NULL];
    assert !aliasQ2952(_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 16 := _ZN4uORB12SubscriptionI18parameter_update_sED2Ev];
    assert !aliasQ2953(_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 24 := _ZN4uORB12SubscriptionI18parameter_update_sED0Ev];
    assert !aliasQ2954(_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 32 := _ZN4uORB12SubscriptionI18parameter_update_sE6updateEv];
    assert !aliasQ2955(_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 40 := NULL - 24];
    assert !aliasQ2956(_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 48 := NULL];
    assert !aliasQ2957(_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 56 := _ZThn24_N4uORB12SubscriptionI18parameter_update_sED1Ev];
    assert !aliasQ2958(_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18parameter_update_sEE + 64 := _ZThn24_N4uORB12SubscriptionI18parameter_update_sED0Ev];
    assert !aliasQ2959(_ZTVN4uORB12SubscriptionI19actuator_controls_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI19actuator_controls_sEE := NULL];
    assert !aliasQ2960(_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 8 := NULL];
    assert !aliasQ2961(_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 16 := _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev];
    assert !aliasQ2962(_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 24 := _ZN4uORB12SubscriptionI19actuator_controls_sED0Ev];
    assert !aliasQ2963(_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 32 := _ZN4uORB12SubscriptionI19actuator_controls_sE6updateEv];
    assert !aliasQ2964(_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 40 := NULL - 24];
    assert !aliasQ2965(_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 48 := NULL];
    assert !aliasQ2966(_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 56 := _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED1Ev];
    assert !aliasQ2967(_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI19actuator_controls_sEE + 64 := _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED0Ev];
    assert !aliasQ2968(_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE := NULL];
    assert !aliasQ2969(_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 8 := NULL];
    assert !aliasQ2970(_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 16 := _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev];
    assert !aliasQ2971(_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 24 := _ZN4uORB12SubscriptionI22vehicle_gps_position_sED0Ev];
    assert !aliasQ2972(_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 32 := _ZN4uORB12SubscriptionI22vehicle_gps_position_sE6updateEv];
    assert !aliasQ2973(_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 40 := NULL - 24];
    assert !aliasQ2974(_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 48 := NULL];
    assert !aliasQ2975(_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 56 := _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED1Ev];
    assert !aliasQ2976(_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_gps_position_sEE + 64 := _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED0Ev];
    assert !aliasQ2977(_ZTVN4uORB12SubscriptionI16satellite_info_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16satellite_info_sEE := NULL];
    assert !aliasQ2978(_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 8 := NULL];
    assert !aliasQ2979(_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 16 := _ZN4uORB12SubscriptionI16satellite_info_sED2Ev];
    assert !aliasQ2980(_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 24 := _ZN4uORB12SubscriptionI16satellite_info_sED0Ev];
    assert !aliasQ2981(_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 32 := _ZN4uORB12SubscriptionI16satellite_info_sE6updateEv];
    assert !aliasQ2982(_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 40 := NULL - 24];
    assert !aliasQ2983(_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 48 := NULL];
    assert !aliasQ2984(_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 56 := _ZThn24_N4uORB12SubscriptionI16satellite_info_sED1Ev];
    assert !aliasQ2985(_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16satellite_info_sEE + 64 := _ZThn24_N4uORB12SubscriptionI16satellite_info_sED0Ev];
    assert !aliasQ2986(_ZTVN4uORB12SubscriptionI17sensor_combined_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17sensor_combined_sEE := NULL];
    assert !aliasQ2987(_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 8 := NULL];
    assert !aliasQ2988(_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 16 := _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev];
    assert !aliasQ2989(_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 24 := _ZN4uORB12SubscriptionI17sensor_combined_sED0Ev];
    assert !aliasQ2990(_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 32 := _ZN4uORB12SubscriptionI17sensor_combined_sE6updateEv];
    assert !aliasQ2991(_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 40 := NULL - 24];
    assert !aliasQ2992(_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 48 := NULL];
    assert !aliasQ2993(_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 56 := _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED1Ev];
    assert !aliasQ2994(_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17sensor_combined_sEE + 64 := _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED0Ev];
    assert !aliasQ2995(_ZTVN4uORB12SubscriptionI12hil_sensor_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI12hil_sensor_sEE := NULL];
    assert !aliasQ2996(_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 8 := NULL];
    assert !aliasQ2997(_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 16 := _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev];
    assert !aliasQ2998(_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 24 := _ZN4uORB12SubscriptionI12hil_sensor_sED0Ev];
    assert !aliasQ2999(_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 32 := _ZN4uORB12SubscriptionI12hil_sensor_sE6updateEv];
    assert !aliasQ3000(_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 40 := NULL - 24];
    assert !aliasQ3001(_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 48 := NULL];
    assert !aliasQ3002(_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 56 := _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED1Ev];
    assert !aliasQ3003(_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI12hil_sensor_sEE + 64 := _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED0Ev];
    assert !aliasQ3004(_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE := NULL];
    assert !aliasQ3005(_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 8 := NULL];
    assert !aliasQ3006(_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 16 := _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev];
    assert !aliasQ3007(_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 24 := _ZN4uORB12SubscriptionI18vehicle_attitude_sED0Ev];
    assert !aliasQ3008(_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 32 := _ZN4uORB12SubscriptionI18vehicle_attitude_sE6updateEv];
    assert !aliasQ3009(_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 40 := NULL - 24];
    assert !aliasQ3010(_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 48 := NULL];
    assert !aliasQ3011(_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 56 := _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED1Ev];
    assert !aliasQ3012(_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI18vehicle_attitude_sEE + 64 := _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED0Ev];
    assert !aliasQ3013(_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE := NULL];
    assert !aliasQ3014(_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 8 := NULL];
    assert !aliasQ3015(_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 16 := _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev];
    assert !aliasQ3016(_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 24 := _ZN4uORB12SubscriptionI25vehicle_global_position_sED0Ev];
    assert !aliasQ3017(_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 32 := _ZN4uORB12SubscriptionI25vehicle_global_position_sE6updateEv];
    assert !aliasQ3018(_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 40 := NULL - 24];
    assert !aliasQ3019(_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 48 := NULL];
    assert !aliasQ3020(_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 56 := _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED1Ev];
    assert !aliasQ3021(_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25vehicle_global_position_sEE + 64 := _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED0Ev];
    assert !aliasQ3022(_ZTVN4uORB12SubscriptionI10encoders_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI10encoders_sEE := NULL];
    assert !aliasQ3023(_ZTVN4uORB12SubscriptionI10encoders_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI10encoders_sEE + 8 := NULL];
    assert !aliasQ3024(_ZTVN4uORB12SubscriptionI10encoders_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI10encoders_sEE + 16 := _ZN4uORB12SubscriptionI10encoders_sED2Ev];
    assert !aliasQ3025(_ZTVN4uORB12SubscriptionI10encoders_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI10encoders_sEE + 24 := _ZN4uORB12SubscriptionI10encoders_sED0Ev];
    assert !aliasQ3026(_ZTVN4uORB12SubscriptionI10encoders_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI10encoders_sEE + 32 := _ZN4uORB12SubscriptionI10encoders_sE6updateEv];
    assert !aliasQ3027(_ZTVN4uORB12SubscriptionI10encoders_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI10encoders_sEE + 40 := NULL - 24];
    assert !aliasQ3028(_ZTVN4uORB12SubscriptionI10encoders_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI10encoders_sEE + 48 := NULL];
    assert !aliasQ3029(_ZTVN4uORB12SubscriptionI10encoders_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI10encoders_sEE + 56 := _ZThn24_N4uORB12SubscriptionI10encoders_sED1Ev];
    assert !aliasQ3030(_ZTVN4uORB12SubscriptionI10encoders_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI10encoders_sEE + 64 := _ZThn24_N4uORB12SubscriptionI10encoders_sED0Ev];
    assert !aliasQ3031(_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE := NULL];
    assert !aliasQ3032(_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 8 := NULL];
    assert !aliasQ3033(_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 16 := _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev];
    assert !aliasQ3034(_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 24 := _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev];
    assert !aliasQ3035(_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 32 := _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE6updateEv];
    assert !aliasQ3036(_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 40 := NULL - 24];
    assert !aliasQ3037(_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 48 := NULL];
    assert !aliasQ3038(_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 56 := _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED1Ev];
    assert !aliasQ3039(_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27position_setpoint_triplet_sEE + 64 := _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev];
    assert !aliasQ3040(_ZTVN4uORB12SubscriptionI16vehicle_status_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16vehicle_status_sEE := NULL];
    assert !aliasQ3041(_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 8 := NULL];
    assert !aliasQ3042(_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 16 := _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev];
    assert !aliasQ3043(_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 24 := _ZN4uORB12SubscriptionI16vehicle_status_sED0Ev];
    assert !aliasQ3044(_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 32 := _ZN4uORB12SubscriptionI16vehicle_status_sE6updateEv];
    assert !aliasQ3045(_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 40 := NULL - 24];
    assert !aliasQ3046(_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 48 := NULL];
    assert !aliasQ3047(_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 56 := _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED1Ev];
    assert !aliasQ3048(_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16vehicle_status_sEE + 64 := _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED0Ev];
    assert !aliasQ3049(_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE := NULL];
    assert !aliasQ3050(_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 8 := NULL];
    assert !aliasQ3051(_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 16 := _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev];
    assert !aliasQ3052(_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 24 := _ZN4uORB12SubscriptionI25manual_control_setpoint_sED0Ev];
    assert !aliasQ3053(_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 32 := _ZN4uORB12SubscriptionI25manual_control_setpoint_sE6updateEv];
    assert !aliasQ3054(_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 40 := NULL - 24];
    assert !aliasQ3055(_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 48 := NULL];
    assert !aliasQ3056(_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 56 := _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED1Ev];
    assert !aliasQ3057(_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI25manual_control_setpoint_sEE + 64 := _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED0Ev];
    assert !aliasQ3058(_ZTVN4uORB12SubscriptionI13mavlink_log_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13mavlink_log_sEE := NULL];
    assert !aliasQ3059(_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 8 := NULL];
    assert !aliasQ3060(_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 16 := _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev];
    assert !aliasQ3061(_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 24 := _ZN4uORB12SubscriptionI13mavlink_log_sED0Ev];
    assert !aliasQ3062(_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 32 := _ZN4uORB12SubscriptionI13mavlink_log_sE6updateEv];
    assert !aliasQ3063(_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 40 := NULL - 24];
    assert !aliasQ3064(_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 48 := NULL];
    assert !aliasQ3065(_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 56 := _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED1Ev];
    assert !aliasQ3066(_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13mavlink_log_sEE + 64 := _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED0Ev];
    assert !aliasQ3067(_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE := NULL];
    assert !aliasQ3068(_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 8 := NULL];
    assert !aliasQ3069(_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 16 := _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev];
    assert !aliasQ3070(_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 24 := _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev];
    assert !aliasQ3071(_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 32 := _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE6updateEv];
    assert !aliasQ3072(_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 40 := NULL - 24];
    assert !aliasQ3073(_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 48 := NULL];
    assert !aliasQ3074(_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 56 := _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED1Ev];
    assert !aliasQ3075(_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI33vehicle_local_position_setpoint_sEE + 64 := _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev];
    assert !aliasQ3076(_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE := NULL];
    assert !aliasQ3077(_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 8 := NULL];
    assert !aliasQ3078(_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 16 := _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev];
    assert !aliasQ3079(_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 24 := _ZN4uORB12SubscriptionI24vehicle_local_position_sED0Ev];
    assert !aliasQ3080(_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 32 := _ZN4uORB12SubscriptionI24vehicle_local_position_sE6updateEv];
    assert !aliasQ3081(_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 40 := NULL - 24];
    assert !aliasQ3082(_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 48 := NULL];
    assert !aliasQ3083(_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 56 := _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED1Ev];
    assert !aliasQ3084(_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_local_position_sEE + 64 := _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED0Ev];
    assert !aliasQ3085(_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE := NULL];
    assert !aliasQ3086(_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 8 := NULL];
    assert !aliasQ3087(_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 16 := _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev];
    assert !aliasQ3088(_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 24 := _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev];
    assert !aliasQ3089(_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 32 := _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE6updateEv];
    assert !aliasQ3090(_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 40 := NULL - 24];
    assert !aliasQ3091(_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 48 := NULL];
    assert !aliasQ3092(_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 56 := _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED1Ev];
    assert !aliasQ3093(_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI27vehicle_attitude_setpoint_sEE + 64 := _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev];
    assert !aliasQ3094(_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE := NULL];
    assert !aliasQ3095(_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 8 := NULL];
    assert !aliasQ3096(_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 16 := _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev];
    assert !aliasQ3097(_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 24 := _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev];
    assert !aliasQ3098(_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 32 := _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE6updateEv];
    assert !aliasQ3099(_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 40 := NULL - 24];
    assert !aliasQ3100(_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 48 := NULL];
    assert !aliasQ3101(_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 56 := _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED1Ev];
    assert !aliasQ3102(_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI24vehicle_rates_setpoint_sEE + 64 := _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev];
    assert !aliasQ3103(_ZTVN4uORB12SubscriptionI13rc_channels_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13rc_channels_sEE := NULL];
    assert !aliasQ3104(_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 8 := NULL];
    assert !aliasQ3105(_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 16 := _ZN4uORB12SubscriptionI13rc_channels_sED2Ev];
    assert !aliasQ3106(_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 24 := _ZN4uORB12SubscriptionI13rc_channels_sED0Ev];
    assert !aliasQ3107(_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 32 := _ZN4uORB12SubscriptionI13rc_channels_sE6updateEv];
    assert !aliasQ3108(_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 40 := NULL - 24];
    assert !aliasQ3109(_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 48 := NULL];
    assert !aliasQ3110(_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 56 := _ZThn24_N4uORB12SubscriptionI13rc_channels_sED1Ev];
    assert !aliasQ3111(_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI13rc_channels_sEE + 64 := _ZThn24_N4uORB12SubscriptionI13rc_channels_sED0Ev];
    assert !aliasQ3112(_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE := NULL];
    assert !aliasQ3113(_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 8 := NULL];
    assert !aliasQ3114(_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 16 := _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev];
    assert !aliasQ3115(_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 24 := _ZN4uORB12SubscriptionI22vehicle_control_mode_sED0Ev];
    assert !aliasQ3116(_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 32 := _ZN4uORB12SubscriptionI22vehicle_control_mode_sE6updateEv];
    assert !aliasQ3117(_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 40 := NULL - 24];
    assert !aliasQ3118(_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 48 := NULL];
    assert !aliasQ3119(_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 56 := _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED1Ev];
    assert !aliasQ3120(_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI22vehicle_control_mode_sEE + 64 := _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED0Ev];
    assert !aliasQ3121(_ZTVN4uORB12SubscriptionI16actuator_armed_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16actuator_armed_sEE := NULL];
    assert !aliasQ3122(_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 8 := NULL];
    assert !aliasQ3123(_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 16 := _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev];
    assert !aliasQ3124(_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 24 := _ZN4uORB12SubscriptionI16actuator_armed_sED0Ev];
    assert !aliasQ3125(_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 32 := _ZN4uORB12SubscriptionI16actuator_armed_sE6updateEv];
    assert !aliasQ3126(_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 40 := NULL - 24];
    assert !aliasQ3127(_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 48 := NULL];
    assert !aliasQ3128(_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 56 := _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED1Ev];
    assert !aliasQ3129(_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16actuator_armed_sEE + 64 := _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED0Ev];
    assert !aliasQ3130(_ZTVN4uORB12SubscriptionI16battery_status_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16battery_status_sEE := NULL];
    assert !aliasQ3131(_ZTVN4uORB12SubscriptionI16battery_status_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16battery_status_sEE + 8 := NULL];
    assert !aliasQ3132(_ZTVN4uORB12SubscriptionI16battery_status_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16battery_status_sEE + 16 := _ZN4uORB12SubscriptionI16battery_status_sED2Ev];
    assert !aliasQ3133(_ZTVN4uORB12SubscriptionI16battery_status_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16battery_status_sEE + 24 := _ZN4uORB12SubscriptionI16battery_status_sED0Ev];
    assert !aliasQ3134(_ZTVN4uORB12SubscriptionI16battery_status_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16battery_status_sEE + 32 := _ZN4uORB12SubscriptionI16battery_status_sE6updateEv];
    assert !aliasQ3135(_ZTVN4uORB12SubscriptionI16battery_status_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16battery_status_sEE + 40 := NULL - 24];
    assert !aliasQ3136(_ZTVN4uORB12SubscriptionI16battery_status_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16battery_status_sEE + 48 := NULL];
    assert !aliasQ3137(_ZTVN4uORB12SubscriptionI16battery_status_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16battery_status_sEE + 56 := _ZThn24_N4uORB12SubscriptionI16battery_status_sED1Ev];
    assert !aliasQ3138(_ZTVN4uORB12SubscriptionI16battery_status_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI16battery_status_sEE + 64 := _ZThn24_N4uORB12SubscriptionI16battery_status_sED0Ev];
    assert !aliasQ3139(_ZTVN4uORB12SubscriptionI15home_position_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15home_position_sEE := NULL];
    assert !aliasQ3140(_ZTVN4uORB12SubscriptionI15home_position_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15home_position_sEE + 8 := NULL];
    assert !aliasQ3141(_ZTVN4uORB12SubscriptionI15home_position_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15home_position_sEE + 16 := _ZN4uORB12SubscriptionI15home_position_sED2Ev];
    assert !aliasQ3142(_ZTVN4uORB12SubscriptionI15home_position_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15home_position_sEE + 24 := _ZN4uORB12SubscriptionI15home_position_sED0Ev];
    assert !aliasQ3143(_ZTVN4uORB12SubscriptionI15home_position_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15home_position_sEE + 32 := _ZN4uORB12SubscriptionI15home_position_sE6updateEv];
    assert !aliasQ3144(_ZTVN4uORB12SubscriptionI15home_position_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15home_position_sEE + 40 := NULL - 24];
    assert !aliasQ3145(_ZTVN4uORB12SubscriptionI15home_position_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15home_position_sEE + 48 := NULL];
    assert !aliasQ3146(_ZTVN4uORB12SubscriptionI15home_position_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15home_position_sEE + 56 := _ZThn24_N4uORB12SubscriptionI15home_position_sED1Ev];
    assert !aliasQ3147(_ZTVN4uORB12SubscriptionI15home_position_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15home_position_sEE + 64 := _ZThn24_N4uORB12SubscriptionI15home_position_sED0Ev];
    assert !aliasQ3148(_ZTVN4uORB12SubscriptionI14optical_flow_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI14optical_flow_sEE := NULL];
    assert !aliasQ3149(_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 8 := NULL];
    assert !aliasQ3150(_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 16 := _ZN4uORB12SubscriptionI14optical_flow_sED2Ev];
    assert !aliasQ3151(_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 24 := _ZN4uORB12SubscriptionI14optical_flow_sED0Ev];
    assert !aliasQ3152(_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 32 := _ZN4uORB12SubscriptionI14optical_flow_sE6updateEv];
    assert !aliasQ3153(_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 40 := NULL - 24];
    assert !aliasQ3154(_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 48 := NULL];
    assert !aliasQ3155(_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 56 := _ZThn24_N4uORB12SubscriptionI14optical_flow_sED1Ev];
    assert !aliasQ3156(_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI14optical_flow_sEE + 64 := _ZThn24_N4uORB12SubscriptionI14optical_flow_sED0Ev];
    assert !aliasQ3157(_ZTVN4uORB12SubscriptionI17distance_sensor_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17distance_sensor_sEE := NULL];
    assert !aliasQ3158(_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 8 := NULL];
    assert !aliasQ3159(_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 16 := _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev];
    assert !aliasQ3160(_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 24 := _ZN4uORB12SubscriptionI17distance_sensor_sED0Ev];
    assert !aliasQ3161(_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 32 := _ZN4uORB12SubscriptionI17distance_sensor_sE6updateEv];
    assert !aliasQ3162(_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 40 := NULL - 24];
    assert !aliasQ3163(_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 48 := NULL];
    assert !aliasQ3164(_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 56 := _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED1Ev];
    assert !aliasQ3165(_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI17distance_sensor_sEE + 64 := _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED0Ev];
    assert !aliasQ3166(_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE := NULL];
    assert !aliasQ3167(_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 8 := NULL];
    assert !aliasQ3168(_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 16 := _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev];
    assert !aliasQ3169(_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 24 := _ZN4uORB12SubscriptionI15att_pos_mocap_sED0Ev];
    assert !aliasQ3170(_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 32 := _ZN4uORB12SubscriptionI15att_pos_mocap_sE6updateEv];
    assert !aliasQ3171(_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 40 := NULL - 24];
    assert !aliasQ3172(_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 48 := NULL];
    assert !aliasQ3173(_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 56 := _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED1Ev];
    assert !aliasQ3174(_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15att_pos_mocap_sEE + 64 := _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED0Ev];
    assert !aliasQ3175(_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE := NULL];
    assert !aliasQ3176(_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 8 := NULL];
    assert !aliasQ3177(_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 16 := _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev];
    assert !aliasQ3178(_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 24 := _ZN4uORB12SubscriptionI26vision_position_estimate_sED0Ev];
    assert !aliasQ3179(_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 32 := _ZN4uORB12SubscriptionI26vision_position_estimate_sE6updateEv];
    assert !aliasQ3180(_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 40 := NULL - 24];
    assert !aliasQ3181(_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 48 := NULL];
    assert !aliasQ3182(_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 56 := _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED1Ev];
    assert !aliasQ3183(_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI26vision_position_estimate_sEE + 64 := _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED0Ev];
    assert !aliasQ3184(_ZTVN4uORB12SubscriptionI15control_state_sEE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15control_state_sEE := NULL];
    assert !aliasQ3185(_ZTVN4uORB12SubscriptionI15control_state_sEE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15control_state_sEE + 8 := NULL];
    assert !aliasQ3186(_ZTVN4uORB12SubscriptionI15control_state_sEE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15control_state_sEE + 16 := _ZN4uORB12SubscriptionI15control_state_sED2Ev];
    assert !aliasQ3187(_ZTVN4uORB12SubscriptionI15control_state_sEE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15control_state_sEE + 24 := _ZN4uORB12SubscriptionI15control_state_sED0Ev];
    assert !aliasQ3188(_ZTVN4uORB12SubscriptionI15control_state_sEE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15control_state_sEE + 32 := _ZN4uORB12SubscriptionI15control_state_sE6updateEv];
    assert !aliasQ3189(_ZTVN4uORB12SubscriptionI15control_state_sEE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15control_state_sEE + 40 := NULL - 24];
    assert !aliasQ3190(_ZTVN4uORB12SubscriptionI15control_state_sEE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15control_state_sEE + 48 := NULL];
    assert !aliasQ3191(_ZTVN4uORB12SubscriptionI15control_state_sEE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15control_state_sEE + 56 := _ZThn24_N4uORB12SubscriptionI15control_state_sED1Ev];
    assert !aliasQ3192(_ZTVN4uORB12SubscriptionI15control_state_sEE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12SubscriptionI15control_state_sEE + 64 := _ZThn24_N4uORB12SubscriptionI15control_state_sED0Ev];
    assert !aliasQ3193(_ZTVN4uORB16SubscriptionBaseE, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionBaseE := NULL];
    assert !aliasQ3194(_ZTVN4uORB16SubscriptionBaseE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionBaseE + 8 := NULL];
    assert !aliasQ3195(_ZTVN4uORB16SubscriptionBaseE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionBaseE + 16 := _ZN4uORB16SubscriptionBaseD2Ev];
    assert !aliasQ3196(_ZTVN4uORB16SubscriptionBaseE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionBaseE + 24 := _ZN4uORB16SubscriptionBaseD0Ev];
    assert !aliasQ3197(_ZN4uORB12DeviceMaster9_node_mapE, NULL);
    $M.2 := $M.2[_ZN4uORB12DeviceMaster9_node_mapE := NULL];
    assert !aliasQ3198(_ZN4uORB12DeviceMaster9_node_mapE + 8, NULL);
    $M.2 := $M.2[_ZN4uORB12DeviceMaster9_node_mapE + 8 := NULL];
    assert !aliasQ3199(_ZN4uORB12DeviceMaster9_node_mapE + 8 + 8, NULL);
    $M.2 := $M.2[_ZN4uORB12DeviceMaster9_node_mapE + 8 + 8 := NULL];
    assert !aliasQ3200(_ZN4uORB12DeviceMaster9_node_mapE + 8 + 16, NULL);
    $M.2 := $M.2[_ZN4uORB12DeviceMaster9_node_mapE + 8 + 16 := NULL];
    assert !aliasQ3201(_ZN4uORB12DeviceMaster9_node_mapE + 8 + 24, NULL);
    $M.2 := $M.2[_ZN4uORB12DeviceMaster9_node_mapE + 8 + 24 := NULL];
    assert !aliasQ3202(_ZN4uORB12DeviceMaster9_node_mapE + 40, NULL);
    $M.2 := $M.2[_ZN4uORB12DeviceMaster9_node_mapE + 40 := NULL];
    assert !aliasQ3203(_ZTVN4uORB10DeviceNodeE, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE := NULL];
    assert !aliasQ3204(_ZTVN4uORB10DeviceNodeE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 8 := NULL];
    assert !aliasQ3205(_ZTVN4uORB10DeviceNodeE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 16 := _ZN4uORB10DeviceNodeD2Ev];
    assert !aliasQ3206(_ZTVN4uORB10DeviceNodeE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 24 := _ZN4uORB10DeviceNodeD0Ev];
    assert !aliasQ3207(_ZTVN4uORB10DeviceNodeE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 32 := _ZN6device4VDev4initEv];
    assert !aliasQ3208(_ZTVN4uORB10DeviceNodeE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 40 := _ZN6device6Device8dev_readEjPvj];
    assert !aliasQ3209(_ZTVN4uORB10DeviceNodeE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 48 := _ZN6device6Device9dev_writeEjPvj];
    assert !aliasQ3210(_ZTVN4uORB10DeviceNodeE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 56 := _ZN6device6Device9dev_ioctlEjj];
    assert !aliasQ3211(_ZTVN4uORB10DeviceNodeE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 64 := _ZN6device4VDev4pollEPNS_6file_tEP19px4_pollfd_struct_tb];
    assert !aliasQ3212(_ZTVN4uORB10DeviceNodeE + 72, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 72 := _ZN4uORB10DeviceNode4openEPN6device6file_tE];
    assert !aliasQ3213(_ZTVN4uORB10DeviceNodeE + 80, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 80 := _ZN4uORB10DeviceNode5closeEPN6device6file_tE];
    assert !aliasQ3214(_ZTVN4uORB10DeviceNodeE + 88, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 88 := _ZN4uORB10DeviceNode4readEPN6device6file_tEPcm];
    assert !aliasQ3215(_ZTVN4uORB10DeviceNodeE + 96, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 96 := _ZN4uORB10DeviceNode5writeEPN6device6file_tEPKcm];
    assert !aliasQ3216(_ZTVN4uORB10DeviceNodeE + 104, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 104 := _ZN6device4VDev4seekEPNS_6file_tEli];
    assert !aliasQ3217(_ZTVN4uORB10DeviceNodeE + 112, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 112 := _ZN4uORB10DeviceNode5ioctlEPN6device6file_tEim];
    assert !aliasQ3218(_ZTVN4uORB10DeviceNodeE + 120, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 120 := _ZN4uORB10DeviceNode10poll_stateEPN6device6file_tE];
    assert !aliasQ3219(_ZTVN4uORB10DeviceNodeE + 128, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 128 := _ZN6device4VDev11poll_notifyEs];
    assert !aliasQ3220(_ZTVN4uORB10DeviceNodeE + 136, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 136 := _ZN4uORB10DeviceNode15poll_notify_oneEP19px4_pollfd_struct_ts];
    assert !aliasQ3221(_ZTVN4uORB10DeviceNodeE + 144, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 144 := _ZN6device4VDev10open_firstEPNS_6file_tE];
    assert !aliasQ3222(_ZTVN4uORB10DeviceNodeE + 152, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 152 := _ZN6device4VDev10close_lastEPNS_6file_tE];
    assert !aliasQ3223(_ZTVN4uORB10DeviceNodeE + 160, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 160 := _ZN6device4VDev22register_class_devnameEPKc];
    assert !aliasQ3224(_ZTVN4uORB10DeviceNodeE + 168, NULL);
    $M.2 := $M.2[_ZTVN4uORB10DeviceNodeE + 168 := _ZN6device4VDev24unregister_class_devnameEPKcj];
    assert !aliasQ3225(_ZTVN4uORB12DeviceMasterE, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE := NULL];
    assert !aliasQ3226(_ZTVN4uORB12DeviceMasterE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 8 := NULL];
    assert !aliasQ3227(_ZTVN4uORB12DeviceMasterE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 16 := _ZN4uORB12DeviceMasterD2Ev];
    assert !aliasQ3228(_ZTVN4uORB12DeviceMasterE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 24 := _ZN4uORB12DeviceMasterD0Ev];
    assert !aliasQ3229(_ZTVN4uORB12DeviceMasterE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 32 := _ZN6device4VDev4initEv];
    assert !aliasQ3230(_ZTVN4uORB12DeviceMasterE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 40 := _ZN6device6Device8dev_readEjPvj];
    assert !aliasQ3231(_ZTVN4uORB12DeviceMasterE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 48 := _ZN6device6Device9dev_writeEjPvj];
    assert !aliasQ3232(_ZTVN4uORB12DeviceMasterE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 56 := _ZN6device6Device9dev_ioctlEjj];
    assert !aliasQ3233(_ZTVN4uORB12DeviceMasterE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 64 := _ZN6device4VDev4pollEPNS_6file_tEP19px4_pollfd_struct_tb];
    assert !aliasQ3234(_ZTVN4uORB12DeviceMasterE + 72, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 72 := _ZN6device4VDev4openEPNS_6file_tE];
    assert !aliasQ3235(_ZTVN4uORB12DeviceMasterE + 80, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 80 := _ZN6device4VDev5closeEPNS_6file_tE];
    assert !aliasQ3236(_ZTVN4uORB12DeviceMasterE + 88, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 88 := _ZN6device4VDev4readEPNS_6file_tEPcm];
    assert !aliasQ3237(_ZTVN4uORB12DeviceMasterE + 96, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 96 := _ZN6device4VDev5writeEPNS_6file_tEPKcm];
    assert !aliasQ3238(_ZTVN4uORB12DeviceMasterE + 104, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 104 := _ZN6device4VDev4seekEPNS_6file_tEli];
    assert !aliasQ3239(_ZTVN4uORB12DeviceMasterE + 112, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 112 := _ZN4uORB12DeviceMaster5ioctlEPN6device6file_tEim];
    assert !aliasQ3240(_ZTVN4uORB12DeviceMasterE + 120, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 120 := _ZN6device4VDev10poll_stateEPNS_6file_tE];
    assert !aliasQ3241(_ZTVN4uORB12DeviceMasterE + 128, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 128 := _ZN6device4VDev11poll_notifyEs];
    assert !aliasQ3242(_ZTVN4uORB12DeviceMasterE + 136, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 136 := _ZN6device4VDev15poll_notify_oneEP19px4_pollfd_struct_ts];
    assert !aliasQ3243(_ZTVN4uORB12DeviceMasterE + 144, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 144 := _ZN6device4VDev10open_firstEPNS_6file_tE];
    assert !aliasQ3244(_ZTVN4uORB12DeviceMasterE + 152, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 152 := _ZN6device4VDev10close_lastEPNS_6file_tE];
    assert !aliasQ3245(_ZTVN4uORB12DeviceMasterE + 160, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 160 := _ZN6device4VDev22register_class_devnameEPKc];
    assert !aliasQ3246(_ZTVN4uORB12DeviceMasterE + 168, NULL);
    $M.2 := $M.2[_ZTVN4uORB12DeviceMasterE + 168 := _ZN6device4VDev24unregister_class_devnameEPKcj];
    assert !aliasQ3247(llvm.global_ctors, NULL);
    $M.2 := $M.2[llvm.global_ctors := 65535];
    assert !aliasQ3248(llvm.global_ctors + 8, NULL);
    $M.2 := $M.2[llvm.global_ctors + 8 := _GLOBAL__sub_I_uORBDevices_posix.cpp];
    assert !aliasQ3249(llvm.global_ctors + 16, NULL);
    $M.2 := $M.2[llvm.global_ctors + 16 := NULL];
    $M.97 := NULL;
    call {:cexpr "_ZN4uORB7Manager9_InstanceE"} boogie_si_record_ref(NULL);
    assert !aliasQ3250(_ZTVN4uORB7ManagerE, NULL);
    $M.2 := $M.2[_ZTVN4uORB7ManagerE := NULL];
    assert !aliasQ3251(_ZTVN4uORB7ManagerE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB7ManagerE + 8 := NULL];
    assert !aliasQ3252(_ZTVN4uORB7ManagerE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB7ManagerE + 16 := _ZN4uORB7Manager24process_add_subscriptionEPKci];
    assert !aliasQ3253(_ZTVN4uORB7ManagerE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB7ManagerE + 24 := _ZN4uORB7Manager27process_remove_subscriptionEPKc];
    assert !aliasQ3254(_ZTVN4uORB7ManagerE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB7ManagerE + 32 := _ZN4uORB7Manager24process_received_messageEPKciPh];
    assert !aliasQ3255(_ZTVN4uORB15PublicationNodeE, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationNodeE := NULL];
    assert !aliasQ3256(_ZTVN4uORB15PublicationNodeE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationNodeE + 8 := NULL];
    assert !aliasQ3257(_ZTVN4uORB15PublicationNodeE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationNodeE + 16 := _ZN4uORB15PublicationNodeD2Ev];
    assert !aliasQ3258(_ZTVN4uORB15PublicationNodeE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationNodeE + 24 := _ZN4uORB15PublicationNodeD0Ev];
    assert !aliasQ3259(_ZTVN4uORB15PublicationNodeE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationNodeE + 32 := __cxa_pure_virtual];
    assert !aliasQ3260(_ZTVN4uORB15PublicationNodeE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationNodeE + 40 := NULL - 32];
    assert !aliasQ3261(_ZTVN4uORB15PublicationNodeE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationNodeE + 48 := NULL];
    assert !aliasQ3262(_ZTVN4uORB15PublicationNodeE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationNodeE + 56 := _ZThn32_N4uORB15PublicationNodeD1Ev];
    assert !aliasQ3263(_ZTVN4uORB15PublicationNodeE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB15PublicationNodeE + 64 := _ZThn32_N4uORB15PublicationNodeD0Ev];
    $M.96 := NULL;
    call {:cexpr "_ZL5g_dev"} boogie_si_record_ref(NULL);
    assert !aliasQ3264(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj := 105];
    assert !aliasQ3265(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 1, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 1 := 110];
    assert !aliasQ3266(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 2, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 2 := 116];
    assert !aliasQ3267(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 3, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 3 := 32];
    assert !aliasQ3268(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 4, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 4 := 117];
    assert !aliasQ3269(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 5, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 5 := 79];
    assert !aliasQ3270(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 6, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 6 := 82];
    assert !aliasQ3271(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 7, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 7 := 66];
    assert !aliasQ3272(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 8, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 8 := 58];
    assert !aliasQ3273(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 9, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 9 := 58];
    assert !aliasQ3274(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 10, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 10 := 77];
    assert !aliasQ3275(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 11, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 11 := 97];
    assert !aliasQ3276(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 12, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 12 := 110];
    assert !aliasQ3277(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 13, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 13 := 97];
    assert !aliasQ3278(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 14, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 14 := 103];
    assert !aliasQ3279(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 15, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 15 := 101];
    assert !aliasQ3280(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 16, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 16 := 114];
    assert !aliasQ3281(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 17, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 17 := 58];
    assert !aliasQ3282(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 18, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 18 := 58];
    assert !aliasQ3283(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 19, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 19 := 111];
    assert !aliasQ3284(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 20, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 20 := 114];
    assert !aliasQ3285(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 21, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 21 := 98];
    assert !aliasQ3286(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 22, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 22 := 95];
    assert !aliasQ3287(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 23, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 23 := 103];
    assert !aliasQ3288(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 24, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 24 := 101];
    assert !aliasQ3289(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 25, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 25 := 116];
    assert !aliasQ3290(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 26, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 26 := 95];
    assert !aliasQ3291(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 27, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 27 := 105];
    assert !aliasQ3292(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 28, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 28 := 110];
    assert !aliasQ3293(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 29, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 29 := 116];
    assert !aliasQ3294(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 30, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 30 := 101];
    assert !aliasQ3295(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 31, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 31 := 114];
    assert !aliasQ3296(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 32, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 32 := 118];
    assert !aliasQ3297(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 33, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 33 := 97];
    assert !aliasQ3298(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 34, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 34 := 108];
    assert !aliasQ3299(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 35, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 35 := 40];
    assert !aliasQ3300(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 36, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 36 := 105];
    assert !aliasQ3301(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 37, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 37 := 110];
    assert !aliasQ3302(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 38, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 38 := 116];
    assert !aliasQ3303(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 39, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 39 := 44];
    assert !aliasQ3304(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 40, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 40 := 32];
    assert !aliasQ3305(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 41, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 41 := 117];
    assert !aliasQ3306(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 42, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 42 := 110];
    assert !aliasQ3307(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 43, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 43 := 115];
    assert !aliasQ3308(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 44, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 44 := 105];
    assert !aliasQ3309(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 45, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 45 := 103];
    assert !aliasQ3310(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 46, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 46 := 110];
    assert !aliasQ3311(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 47, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 47 := 101];
    assert !aliasQ3312(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 48, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 48 := 100];
    assert !aliasQ3313(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 49, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 49 := 32];
    assert !aliasQ3314(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 50, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 50 := 105];
    assert !aliasQ3315(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 51, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 51 := 110];
    assert !aliasQ3316(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 52, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 52 := 116];
    assert !aliasQ3317(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 53, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 53 := 32];
    assert !aliasQ3318(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 54, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 54 := 42];
    assert !aliasQ3319(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 55, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 55 := 41];
    assert !aliasQ3320(__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 56, NULL);
    $M.2 := $M.2[__PRETTY_FUNCTION__._ZN4uORB7Manager16orb_get_intervalEiPj + 56 := NULL];
    $M.131 := $u0;
    assert !aliasQ3321(_ZTV8ListNodeIPN4uORB16SubscriptionNodeEE, NULL);
    $M.2 := $M.2[_ZTV8ListNodeIPN4uORB16SubscriptionNodeEE := NULL];
    assert !aliasQ3322(_ZTV8ListNodeIPN4uORB16SubscriptionNodeEE + 8, NULL);
    $M.2 := $M.2[_ZTV8ListNodeIPN4uORB16SubscriptionNodeEE + 8 := NULL];
    assert !aliasQ3323(_ZTV8ListNodeIPN4uORB16SubscriptionNodeEE + 16, NULL);
    $M.2 := $M.2[_ZTV8ListNodeIPN4uORB16SubscriptionNodeEE + 16 := _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev];
    assert !aliasQ3324(_ZTV8ListNodeIPN4uORB16SubscriptionNodeEE + 24, NULL);
    $M.2 := $M.2[_ZTV8ListNodeIPN4uORB16SubscriptionNodeEE + 24 := _ZN8ListNodeIPN4uORB16SubscriptionNodeEED0Ev];
    assert !aliasQ3325(_ZTVN16uORBCommunicator17IChannelRxHandlerE, NULL);
    $M.2 := $M.2[_ZTVN16uORBCommunicator17IChannelRxHandlerE := NULL];
    assert !aliasQ3326(_ZTVN16uORBCommunicator17IChannelRxHandlerE + 8, NULL);
    $M.2 := $M.2[_ZTVN16uORBCommunicator17IChannelRxHandlerE + 8 := NULL];
    assert !aliasQ3327(_ZTVN16uORBCommunicator17IChannelRxHandlerE + 16, NULL);
    $M.2 := $M.2[_ZTVN16uORBCommunicator17IChannelRxHandlerE + 16 := __cxa_pure_virtual];
    assert !aliasQ3328(_ZTVN16uORBCommunicator17IChannelRxHandlerE + 24, NULL);
    $M.2 := $M.2[_ZTVN16uORBCommunicator17IChannelRxHandlerE + 24 := __cxa_pure_virtual];
    assert !aliasQ3329(_ZTVN16uORBCommunicator17IChannelRxHandlerE + 32, NULL);
    $M.2 := $M.2[_ZTVN16uORBCommunicator17IChannelRxHandlerE + 32 := __cxa_pure_virtual];
    assert !aliasQ3330(_ZTVN4uORB16SubscriptionNodeE, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionNodeE := NULL];
    assert !aliasQ3331(_ZTVN4uORB16SubscriptionNodeE + 8, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionNodeE + 8 := NULL];
    assert !aliasQ3332(_ZTVN4uORB16SubscriptionNodeE + 16, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionNodeE + 16 := _ZN4uORB16SubscriptionNodeD2Ev];
    assert !aliasQ3333(_ZTVN4uORB16SubscriptionNodeE + 24, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionNodeE + 24 := _ZN4uORB16SubscriptionNodeD0Ev];
    assert !aliasQ3334(_ZTVN4uORB16SubscriptionNodeE + 32, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionNodeE + 32 := __cxa_pure_virtual];
    assert !aliasQ3335(_ZTVN4uORB16SubscriptionNodeE + 40, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionNodeE + 40 := NULL - 24];
    assert !aliasQ3336(_ZTVN4uORB16SubscriptionNodeE + 48, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionNodeE + 48 := NULL];
    assert !aliasQ3337(_ZTVN4uORB16SubscriptionNodeE + 56, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionNodeE + 56 := _ZThn24_N4uORB16SubscriptionNodeD1Ev];
    assert !aliasQ3338(_ZTVN4uORB16SubscriptionNodeE + 64, NULL);
    $M.2 := $M.2[_ZTVN4uORB16SubscriptionNodeE + 64 := _ZThn24_N4uORB16SubscriptionNodeD0Ev];
    assert !aliasQ3339(_ZTV8ListNodeIPN4uORB15PublicationNodeEE, NULL);
    $M.2 := $M.2[_ZTV8ListNodeIPN4uORB15PublicationNodeEE := NULL];
    assert !aliasQ3340(_ZTV8ListNodeIPN4uORB15PublicationNodeEE + 8, NULL);
    $M.2 := $M.2[_ZTV8ListNodeIPN4uORB15PublicationNodeEE + 8 := NULL];
    assert !aliasQ3341(_ZTV8ListNodeIPN4uORB15PublicationNodeEE + 16, NULL);
    $M.2 := $M.2[_ZTV8ListNodeIPN4uORB15PublicationNodeEE + 16 := _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev];
    assert !aliasQ3342(_ZTV8ListNodeIPN4uORB15PublicationNodeEE + 24, NULL);
    $M.2 := $M.2[_ZTV8ListNodeIPN4uORB15PublicationNodeEE + 24 := _ZN8ListNodeIPN4uORB15PublicationNodeEED0Ev];
    $exn := false;
    return;
}



const devirtbounce: int;

axiom devirtbounce == NULL - 10600;

procedure devirtbounce(funcPtr: int, arg: int, arg1: int, {:scalar} arg2: int) returns ({:scalar} $r: int);



implementation devirtbounce(funcPtr: int, arg: int, arg1: int, arg2: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;

  $bb0:
    $p0 := funcPtr;
    goto $bb1;

  $bb1:
    $i3 := (if _ZN4uORB7Manager24process_add_subscriptionEPKci == $p0 then 1 else NULL);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i3 == 1;
    $p1 := arg;
    call $i2 := _ZN4uORB7Manager24process_add_subscriptionEPKci($p1, arg1, arg2);
    $r := $i2;
    $exn := false;
    return;

  $bb3:
    assume {:partition} !($i3 == 1);
    assume false;
    return;
}



const devirtbounce7: int;

axiom devirtbounce7 == NULL - 10608;

procedure devirtbounce7(funcPtr: int, arg: int, arg1: int) returns ({:scalar} $r: int);



implementation devirtbounce7(funcPtr: int, arg: int, arg1: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:scalar} $i3: int;
  var $p4: int;
  var $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var {:scalar} $i8: int;
  var {:scalar} $i9: int;
  var {:scalar} $i10: int;
  var {:scalar} $i11: int;

  $bb0:
    $p0 := funcPtr;
    goto $bb1;

  $bb1:
    $i11 := (if _ZN4uORB7Manager27process_remove_subscriptionEPKc == $p0 then 1 else NULL);
    assume {:branchcond $i11} true;
    goto $bb4, $bb7;

  $bb2:
    assume {:partition} $i9 == 1;
    $p1 := arg;
    $p2 := arg1;
    call $i3 := _ZN4uORB10DeviceNode10poll_stateEPN6device6file_tE($p1, $p2);
    $r := $i3;
    $exn := false;
    return;

  $bb3:
    assume {:partition} $i10 == 1;
    $p4 := arg;
    $p5 := arg1;
    call $i6 := _ZN6device4VDev10poll_stateEPNS_6file_tE($p4, $p5);
    $r := $i6;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i11 == 1;
    $p7 := arg;
    call $i8 := _ZN4uORB7Manager27process_remove_subscriptionEPKc($p7, arg1);
    $r := $i8;
    $exn := false;
    return;

  $bb5:
    assume {:partition} !($i9 == 1);
    assume false;
    goto $bb6;

  $bb6:
    assume {:partition} !($i10 == 1);
    $i9 := (if _ZN4uORB10DeviceNode10poll_stateEPN6device6file_tE == $p0 then 1 else NULL);
    assume {:branchcond $i9} true;
    goto $bb2, $bb5;

  $bb7:
    assume {:partition} !($i11 == 1);
    $i10 := (if _ZN6device4VDev10poll_stateEPNS_6file_tE == $p0 then 1 else NULL);
    assume {:branchcond $i10} true;
    goto $bb3, $bb6;
}



const devirtbounce8: int;

axiom devirtbounce8 == NULL - 10616;

procedure devirtbounce8(funcPtr: int, arg: int, {:scalar} arg1: int);



implementation devirtbounce8(funcPtr: int, arg: int, arg1: int)
{
  var $p0: int;
  var $p1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;
  var {:scalar} $i4: int;

  $bb0:
    $p0 := funcPtr;
    goto $bb1;

  $bb1:
    $i4 := (if _ZN6device4VDev11poll_notifyEs == $p0 then 1 else NULL);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb2:
    assume {:partition} $i3 == 1;
    $p1 := arg;
    $i2 := arg1;
    call _ZN4uORB12DeviceMasterC2ENS_6FlavorE($p1, $i2);
    $exn := false;
    return;

  $bb3:
    assume {:partition} $i4 == 1;
    call _ZN6device4VDev11poll_notifyEs(arg, arg1);
    $exn := false;
    return;

  $bb4:
    assume {:partition} !($i3 == 1);
    assume false;
    goto $bb5;

  $bb5:
    assume {:partition} !($i4 == 1);
    $i3 := (if _ZN4uORB12DeviceMasterC2ENS_6FlavorE == $p0 then 1 else NULL);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;
}



const devirtbounce9: int;

axiom devirtbounce9 == NULL - 10624;

procedure devirtbounce9(funcPtr: int, arg: int, arg1: int, arg2: int, {:scalar} arg3: int) returns ({:scalar} $r: int);



implementation devirtbounce9(funcPtr: int, arg: int, arg1: int, arg2: int, arg3: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;
  var $p3: int;
  var {:scalar} $i4: int;
  var $p5: int;
  var {:scalar} $i6: int;
  var {:scalar} $i7: int;
  var {:scalar} $i8: int;
  var {:scalar} $i9: int;
  var {:scalar} $i10: int;

  $bb0:
    $p0 := funcPtr;
    goto $bb1;

  $bb1:
    $i10 := (if _ZN6device4VDev5writeEPNS_6file_tEPKcm == $p0 then 1 else NULL);
    assume {:branchcond $i10} true;
    goto $bb5, $bb9;

  $bb2:
    assume {:partition} $i7 == 1;
    call $i1 := _ZN4uORB10DeviceNode4readEPN6device6file_tEPcm(arg, arg1, arg2, arg3);
    $r := $i1;
    $exn := false;
    return;

  $bb3:
    assume {:partition} $i8 == 1;
    call $i2 := _ZN4uORB10DeviceNode5writeEPN6device6file_tEPKcm(arg, arg1, arg2, arg3);
    $r := $i2;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i9 == 1;
    $p3 := arg;
    call $i4 := _ZN6device4VDev4readEPNS_6file_tEPcm($p3, arg1, arg2, arg3);
    $r := $i4;
    $exn := false;
    return;

  $bb5:
    assume {:partition} $i10 == 1;
    $p5 := arg;
    call $i6 := _ZN6device4VDev5writeEPNS_6file_tEPKcm($p5, arg1, arg2, arg3);
    $r := $i6;
    $exn := false;
    return;

  $bb6:
    assume {:partition} !($i7 == 1);
    assume false;
    goto $bb7;

  $bb7:
    assume {:partition} !($i8 == 1);
    $i7 := (if _ZN4uORB10DeviceNode4readEPN6device6file_tEPcm == $p0 then 1 else NULL);
    assume {:branchcond $i7} true;
    goto $bb2, $bb6;

  $bb8:
    assume {:partition} !($i9 == 1);
    $i8 := (if _ZN4uORB10DeviceNode5writeEPN6device6file_tEPKcm == $p0 then 1 else NULL);
    assume {:branchcond $i8} true;
    goto $bb3, $bb7;

  $bb9:
    assume {:partition} !($i10 == 1);
    $i9 := (if _ZN6device4VDev4readEPNS_6file_tEPcm == $p0 then 1 else NULL);
    assume {:branchcond $i9} true;
    goto $bb4, $bb8;
}



const devirtbounce10: int;

axiom devirtbounce10 == NULL - 10632;

procedure devirtbounce10(funcPtr: int, arg: int, arg1: int, {:scalar} arg2: int, arg3: int) returns ({:scalar} $r: int);



implementation devirtbounce10(funcPtr: int, arg: int, arg1: int, arg2: int, arg3: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var {:scalar} $i2: int;
  var {:scalar} $i3: int;

  $bb0:
    $p0 := funcPtr;
    goto $bb1;

  $bb1:
    $i3 := (if _ZN4uORB7Manager24process_received_messageEPKciPh == $p0 then 1 else NULL);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i3 == 1;
    $p1 := arg;
    call $i2 := _ZN4uORB7Manager24process_received_messageEPKciPh($p1, arg1, arg2, arg3);
    $r := $i2;
    $exn := false;
    return;

  $bb3:
    assume {:partition} !($i3 == 1);
    assume false;
    return;
}



const devirtbounce11: int;

axiom devirtbounce11 == NULL - 10640;

procedure devirtbounce11(funcPtr: int, arg: int) returns ({:scalar} $r: int);



implementation devirtbounce11(funcPtr: int, arg: int) returns ($r: int)
{
  var $p0: int;
  var {:scalar} $i1: int;
  var {:scalar} $i2: int;

  $bb0:
    $p0 := funcPtr;
    goto $bb1;

  $bb1:
    $i2 := (if _ZN6device4VDev4initEv == $p0 then 1 else NULL);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb2:
    assume {:partition} $i2 == 1;
    call $i1 := _ZN6device4VDev4initEv(arg);
    $r := $i1;
    $exn := false;
    return;

  $bb3:
    assume {:partition} !($i2 == 1);
    assume false;
    return;
}



const devirtbounce12: int;

axiom devirtbounce12 == NULL - 10648;

procedure devirtbounce12(funcPtr: int, arg: int);



implementation devirtbounce12(funcPtr: int, arg: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var $p8: int;
  var $p9: int;
  var $p10: int;
  var $p11: int;
  var $p12: int;
  var $p13: int;
  var $p14: int;
  var $p15: int;
  var $p16: int;
  var $p17: int;
  var $p18: int;
  var $p19: int;
  var $p20: int;
  var $p21: int;
  var $p22: int;
  var $p23: int;
  var $p24: int;
  var $p25: int;
  var $p26: int;
  var $p27: int;
  var $p28: int;
  var $p29: int;
  var $p30: int;
  var $p31: int;
  var $p32: int;
  var $p33: int;
  var $p34: int;
  var $p35: int;
  var $p36: int;
  var $p37: int;
  var $p38: int;
  var $p39: int;
  var $p40: int;
  var $p41: int;
  var $p42: int;
  var $p43: int;
  var $p44: int;
  var $p45: int;
  var $p46: int;
  var $p47: int;
  var $p48: int;
  var $p49: int;
  var $p50: int;
  var $p51: int;
  var $p52: int;
  var $p53: int;
  var $p54: int;
  var $p55: int;
  var $p56: int;
  var $p57: int;
  var $p58: int;
  var $p59: int;
  var $p60: int;
  var $p61: int;
  var $p62: int;
  var $p63: int;
  var $p64: int;
  var $p65: int;
  var $p66: int;
  var $p67: int;
  var $p68: int;
  var $p69: int;
  var $p70: int;
  var $p71: int;
  var $p72: int;
  var $p73: int;
  var $p74: int;
  var $p75: int;
  var $p76: int;
  var $p77: int;
  var $p78: int;
  var $p79: int;
  var $p80: int;
  var $p81: int;
  var $p82: int;
  var $p83: int;
  var $p84: int;
  var $p85: int;
  var $p86: int;
  var $p87: int;
  var $p88: int;
  var $p89: int;
  var $p90: int;
  var $p91: int;
  var $p92: int;
  var $p93: int;
  var $p94: int;
  var $p95: int;
  var $p96: int;
  var $p97: int;
  var $p98: int;
  var $p99: int;
  var $p100: int;
  var $p101: int;
  var $p102: int;
  var $p103: int;
  var $p104: int;
  var $p105: int;
  var $p106: int;
  var $p107: int;
  var $p108: int;
  var $p109: int;
  var $p110: int;
  var $p111: int;
  var $p112: int;
  var $p113: int;
  var $p114: int;
  var $p115: int;
  var $p116: int;
  var $p117: int;
  var $p118: int;
  var $p119: int;
  var $p120: int;
  var $p121: int;
  var $p122: int;
  var $p123: int;
  var $p124: int;
  var $p125: int;
  var $p126: int;
  var $p127: int;
  var $p128: int;
  var $p129: int;
  var $p130: int;
  var $p131: int;
  var $p132: int;
  var $p133: int;
  var $p134: int;
  var $p135: int;
  var $p136: int;
  var $p137: int;
  var $p138: int;
  var $p139: int;
  var $p140: int;
  var $p141: int;
  var $p142: int;
  var $p143: int;
  var $p144: int;
  var $p145: int;
  var $p146: int;
  var $p147: int;
  var $p148: int;
  var $p149: int;
  var $p150: int;
  var $p151: int;
  var $p152: int;
  var $p153: int;
  var $p154: int;
  var $p155: int;
  var $p156: int;
  var $p157: int;
  var $p158: int;
  var $p159: int;
  var $p160: int;
  var $p161: int;
  var $p162: int;
  var $p163: int;
  var $p164: int;
  var $p165: int;
  var $p166: int;
  var $p167: int;
  var $p168: int;
  var $p169: int;
  var $p170: int;
  var $p171: int;
  var $p172: int;
  var $p173: int;
  var $p174: int;
  var $p175: int;
  var $p176: int;
  var $p177: int;
  var $p178: int;
  var $p179: int;
  var $p180: int;
  var $p181: int;
  var $p182: int;
  var $p183: int;
  var $p184: int;
  var $p185: int;
  var $p186: int;
  var $p187: int;
  var $p188: int;
  var $p189: int;
  var $p190: int;
  var $p191: int;
  var $p192: int;
  var $p193: int;
  var $p194: int;
  var $p195: int;
  var $p196: int;
  var $p197: int;
  var $p198: int;
  var $p199: int;
  var $p200: int;
  var $p201: int;
  var $p202: int;
  var $p203: int;
  var $p204: int;
  var $p205: int;
  var $p206: int;
  var $p207: int;
  var $p208: int;
  var $p209: int;
  var $p210: int;
  var $p211: int;
  var $p212: int;
  var $p213: int;
  var $p214: int;
  var $p215: int;
  var $p216: int;
  var $p217: int;
  var $p218: int;
  var $p219: int;
  var $p220: int;
  var $p221: int;
  var $p222: int;
  var $p223: int;
  var $p224: int;
  var $p225: int;
  var {:scalar} $i226: int;
  var {:scalar} $i227: int;
  var {:scalar} $i228: int;
  var {:scalar} $i229: int;
  var {:scalar} $i230: int;
  var {:scalar} $i231: int;
  var {:scalar} $i232: int;
  var {:scalar} $i233: int;
  var {:scalar} $i234: int;
  var {:scalar} $i235: int;
  var {:scalar} $i236: int;
  var {:scalar} $i237: int;
  var {:scalar} $i238: int;
  var {:scalar} $i239: int;
  var {:scalar} $i240: int;
  var {:scalar} $i241: int;
  var {:scalar} $i242: int;
  var {:scalar} $i243: int;
  var {:scalar} $i244: int;
  var {:scalar} $i245: int;
  var {:scalar} $i246: int;
  var {:scalar} $i247: int;
  var {:scalar} $i248: int;
  var {:scalar} $i249: int;
  var {:scalar} $i250: int;
  var {:scalar} $i251: int;
  var {:scalar} $i252: int;
  var {:scalar} $i253: int;
  var {:scalar} $i254: int;
  var {:scalar} $i255: int;
  var {:scalar} $i256: int;
  var {:scalar} $i257: int;
  var {:scalar} $i258: int;
  var {:scalar} $i259: int;
  var {:scalar} $i260: int;
  var {:scalar} $i261: int;
  var {:scalar} $i262: int;
  var {:scalar} $i263: int;
  var {:scalar} $i264: int;
  var {:scalar} $i265: int;
  var {:scalar} $i266: int;
  var {:scalar} $i267: int;
  var {:scalar} $i268: int;
  var {:scalar} $i269: int;
  var {:scalar} $i270: int;
  var {:scalar} $i271: int;
  var {:scalar} $i272: int;
  var {:scalar} $i273: int;
  var {:scalar} $i274: int;
  var {:scalar} $i275: int;
  var {:scalar} $i276: int;
  var {:scalar} $i277: int;
  var {:scalar} $i278: int;
  var {:scalar} $i279: int;
  var {:scalar} $i280: int;
  var {:scalar} $i281: int;
  var {:scalar} $i282: int;
  var {:scalar} $i283: int;
  var {:scalar} $i284: int;
  var {:scalar} $i285: int;
  var {:scalar} $i286: int;
  var {:scalar} $i287: int;
  var {:scalar} $i288: int;
  var {:scalar} $i289: int;
  var {:scalar} $i290: int;
  var {:scalar} $i291: int;
  var {:scalar} $i292: int;
  var {:scalar} $i293: int;
  var {:scalar} $i294: int;
  var {:scalar} $i295: int;
  var {:scalar} $i296: int;
  var {:scalar} $i297: int;
  var {:scalar} $i298: int;
  var {:scalar} $i299: int;
  var {:scalar} $i300: int;
  var {:scalar} $i301: int;
  var {:scalar} $i302: int;
  var {:scalar} $i303: int;
  var {:scalar} $i304: int;
  var {:scalar} $i305: int;
  var {:scalar} $i306: int;
  var {:scalar} $i307: int;
  var {:scalar} $i308: int;
  var {:scalar} $i309: int;
  var {:scalar} $i310: int;
  var {:scalar} $i311: int;
  var {:scalar} $i312: int;
  var {:scalar} $i313: int;
  var {:scalar} $i314: int;
  var {:scalar} $i315: int;
  var {:scalar} $i316: int;
  var {:scalar} $i317: int;
  var {:scalar} $i318: int;
  var {:scalar} $i319: int;
  var {:scalar} $i320: int;
  var {:scalar} $i321: int;
  var {:scalar} $i322: int;
  var {:scalar} $i323: int;
  var {:scalar} $i324: int;
  var {:scalar} $i325: int;
  var {:scalar} $i326: int;
  var {:scalar} $i327: int;
  var {:scalar} $i328: int;
  var {:scalar} $i329: int;
  var {:scalar} $i330: int;
  var {:scalar} $i331: int;
  var {:scalar} $i332: int;
  var {:scalar} $i333: int;
  var {:scalar} $i334: int;
  var {:scalar} $i335: int;
  var {:scalar} $i336: int;
  var {:scalar} $i337: int;
  var {:scalar} $i338: int;
  var {:scalar} $i339: int;
  var {:scalar} $i340: int;
  var {:scalar} $i341: int;
  var {:scalar} $i342: int;
  var {:scalar} $i343: int;
  var {:scalar} $i344: int;
  var {:scalar} $i345: int;
  var {:scalar} $i346: int;
  var {:scalar} $i347: int;
  var {:scalar} $i348: int;
  var {:scalar} $i349: int;
  var {:scalar} $i350: int;
  var {:scalar} $i351: int;
  var {:scalar} $i352: int;
  var {:scalar} $i353: int;
  var {:scalar} $i354: int;
  var {:scalar} $i355: int;
  var {:scalar} $i356: int;
  var {:scalar} $i357: int;
  var {:scalar} $i358: int;
  var {:scalar} $i359: int;
  var {:scalar} $i360: int;
  var {:scalar} $i361: int;
  var {:scalar} $i362: int;
  var {:scalar} $i363: int;
  var {:scalar} $i364: int;
  var {:scalar} $i365: int;
  var {:scalar} $i366: int;
  var {:scalar} $i367: int;
  var {:scalar} $i368: int;
  var {:scalar} $i369: int;
  var {:scalar} $i370: int;
  var {:scalar} $i371: int;
  var {:scalar} $i372: int;
  var {:scalar} $i373: int;
  var {:scalar} $i374: int;
  var {:scalar} $i375: int;
  var {:scalar} $i376: int;
  var {:scalar} $i377: int;
  var {:scalar} $i378: int;
  var {:scalar} $i379: int;
  var {:scalar} $i380: int;
  var {:scalar} $i381: int;
  var {:scalar} $i382: int;
  var {:scalar} $i383: int;
  var {:scalar} $i384: int;
  var {:scalar} $i385: int;
  var {:scalar} $i386: int;
  var {:scalar} $i387: int;
  var {:scalar} $i388: int;
  var {:scalar} $i389: int;
  var {:scalar} $i390: int;
  var {:scalar} $i391: int;
  var {:scalar} $i392: int;
  var {:scalar} $i393: int;
  var {:scalar} $i394: int;
  var {:scalar} $i395: int;
  var {:scalar} $i396: int;
  var {:scalar} $i397: int;
  var {:scalar} $i398: int;
  var {:scalar} $i399: int;
  var {:scalar} $i400: int;
  var {:scalar} $i401: int;
  var {:scalar} $i402: int;
  var {:scalar} $i403: int;
  var {:scalar} $i404: int;
  var {:scalar} $i405: int;
  var {:scalar} $i406: int;
  var {:scalar} $i407: int;
  var {:scalar} $i408: int;
  var {:scalar} $i409: int;
  var {:scalar} $i410: int;
  var {:scalar} $i411: int;
  var {:scalar} $i412: int;
  var {:scalar} $i413: int;
  var {:scalar} $i414: int;
  var {:scalar} $i415: int;
  var {:scalar} $i416: int;
  var {:scalar} $i417: int;
  var {:scalar} $i418: int;
  var {:scalar} $i419: int;
  var {:scalar} $i420: int;
  var {:scalar} $i421: int;
  var {:scalar} $i422: int;
  var {:scalar} $i423: int;
  var {:scalar} $i424: int;
  var {:scalar} $i425: int;
  var {:scalar} $i426: int;
  var {:scalar} $i427: int;
  var {:scalar} $i428: int;
  var {:scalar} $i429: int;
  var {:scalar} $i430: int;
  var {:scalar} $i431: int;
  var {:scalar} $i432: int;
  var {:scalar} $i433: int;
  var {:scalar} $i434: int;
  var {:scalar} $i435: int;
  var {:scalar} $i436: int;
  var {:scalar} $i437: int;
  var {:scalar} $i438: int;
  var {:scalar} $i439: int;
  var {:scalar} $i440: int;
  var {:scalar} $i441: int;
  var {:scalar} $i442: int;
  var {:scalar} $i443: int;
  var {:scalar} $i444: int;
  var {:scalar} $i445: int;
  var {:scalar} $i446: int;
  var {:scalar} $i447: int;
  var {:scalar} $i448: int;
  var {:scalar} $i449: int;
  var {:scalar} $i450: int;
  var {:scalar} $i451: int;
  var {:scalar} $i452: int;

  $bb0:
    $p0 := funcPtr;
    goto $bb1;

  $bb1:
    $i452 := (if _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i452} true;
    goto $bb228, $bb455;

  $bb2:
    assume {:partition} $i226 == 1;
    $p1 := arg;
    call _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev($p1);
    $exn := false;
    return;

  $bb3:
    assume {:partition} $i227 == 1;
    $p2 := arg;
    call _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED1Ev($p2);
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i228 == 1;
    $p3 := arg;
    call _ZN4uORB11PublicationI18vehicle_attitude_sED0Ev($p3);
    $exn := false;
    return;

  $bb5:
    assume {:partition} $i229 == 1;
    $p4 := arg;
    call _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED0Ev($p4);
    $exn := false;
    return;

  $bb6:
    assume {:partition} $i230 == 1;
    $p5 := arg;
    call _ZN4uORB11PublicationI18vehicle_attitude_sE6updateEv($p5);
    $exn := false;
    return;

  $bb7:
    assume {:partition} $i231 == 1;
    $p6 := arg;
    call _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev($p6);
    $exn := false;
    return;

  $bb8:
    assume {:partition} $i232 == 1;
    $p7 := arg;
    call _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED1Ev($p7);
    $exn := false;
    return;

  $bb9:
    assume {:partition} $i233 == 1;
    $p8 := arg;
    call _ZN4uORB11PublicationI24vehicle_local_position_sED0Ev($p8);
    $exn := false;
    return;

  $bb10:
    assume {:partition} $i234 == 1;
    $p9 := arg;
    call _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED0Ev($p9);
    $exn := false;
    return;

  $bb11:
    assume {:partition} $i235 == 1;
    $p10 := arg;
    call _ZN4uORB11PublicationI24vehicle_local_position_sE6updateEv($p10);
    $exn := false;
    return;

  $bb12:
    assume {:partition} $i236 == 1;
    $p11 := arg;
    call _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev($p11);
    $exn := false;
    return;

  $bb13:
    assume {:partition} $i237 == 1;
    $p12 := arg;
    call _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED1Ev($p12);
    $exn := false;
    return;

  $bb14:
    assume {:partition} $i238 == 1;
    $p13 := arg;
    call _ZN4uORB11PublicationI25vehicle_global_position_sED0Ev($p13);
    $exn := false;
    return;

  $bb15:
    assume {:partition} $i239 == 1;
    $p14 := arg;
    call _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED0Ev($p14);
    $exn := false;
    return;

  $bb16:
    assume {:partition} $i240 == 1;
    $p15 := arg;
    call _ZN4uORB11PublicationI25vehicle_global_position_sE6updateEv($p15);
    $exn := false;
    return;

  $bb17:
    assume {:partition} $i241 == 1;
    $p16 := arg;
    call _ZN4uORB11PublicationI17debug_key_value_sED2Ev($p16);
    $exn := false;
    return;

  $bb18:
    assume {:partition} $i242 == 1;
    $p17 := arg;
    call _ZThn32_N4uORB11PublicationI17debug_key_value_sED1Ev($p17);
    $exn := false;
    return;

  $bb19:
    assume {:partition} $i243 == 1;
    $p18 := arg;
    call _ZN4uORB11PublicationI17debug_key_value_sED0Ev($p18);
    $exn := false;
    return;

  $bb20:
    assume {:partition} $i244 == 1;
    $p19 := arg;
    call _ZThn32_N4uORB11PublicationI17debug_key_value_sED0Ev($p19);
    $exn := false;
    return;

  $bb21:
    assume {:partition} $i245 == 1;
    $p20 := arg;
    call _ZN4uORB11PublicationI17debug_key_value_sE6updateEv($p20);
    $exn := false;
    return;

  $bb22:
    assume {:partition} $i246 == 1;
    $p21 := arg;
    call _ZN4uORB11PublicationI19actuator_controls_sED2Ev($p21);
    $exn := false;
    return;

  $bb23:
    assume {:partition} $i247 == 1;
    $p22 := arg;
    call _ZThn32_N4uORB11PublicationI19actuator_controls_sED1Ev($p22);
    $exn := false;
    return;

  $bb24:
    assume {:partition} $i248 == 1;
    $p23 := arg;
    call _ZN4uORB11PublicationI19actuator_controls_sED0Ev($p23);
    $exn := false;
    return;

  $bb25:
    assume {:partition} $i249 == 1;
    $p24 := arg;
    call _ZThn32_N4uORB11PublicationI19actuator_controls_sED0Ev($p24);
    $exn := false;
    return;

  $bb26:
    assume {:partition} $i250 == 1;
    $p25 := arg;
    call _ZN4uORB11PublicationI19actuator_controls_sE6updateEv($p25);
    $exn := false;
    return;

  $bb27:
    assume {:partition} $i251 == 1;
    $p26 := arg;
    call _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev($p26);
    $exn := false;
    return;

  $bb28:
    assume {:partition} $i252 == 1;
    $p27 := arg;
    call _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED1Ev($p27);
    $exn := false;
    return;

  $bb29:
    assume {:partition} $i253 == 1;
    $p28 := arg;
    call _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev($p28);
    $exn := false;
    return;

  $bb30:
    assume {:partition} $i254 == 1;
    $p29 := arg;
    call _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev($p29);
    $exn := false;
    return;

  $bb31:
    assume {:partition} $i255 == 1;
    $p30 := arg;
    call _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE6updateEv($p30);
    $exn := false;
    return;

  $bb32:
    assume {:partition} $i256 == 1;
    $p31 := arg;
    call _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev($p31);
    $exn := false;
    return;

  $bb33:
    assume {:partition} $i257 == 1;
    $p32 := arg;
    call _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED1Ev($p32);
    $exn := false;
    return;

  $bb34:
    assume {:partition} $i258 == 1;
    $p33 := arg;
    call _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev($p33);
    $exn := false;
    return;

  $bb35:
    assume {:partition} $i259 == 1;
    $p34 := arg;
    call _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev($p34);
    $exn := false;
    return;

  $bb36:
    assume {:partition} $i260 == 1;
    $p35 := arg;
    call _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE6updateEv($p35);
    $exn := false;
    return;

  $bb37:
    assume {:partition} $i261 == 1;
    $p36 := arg;
    call _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev($p36);
    $exn := false;
    return;

  $bb38:
    assume {:partition} $i262 == 1;
    $p37 := arg;
    call _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED1Ev($p37);
    $exn := false;
    return;

  $bb39:
    assume {:partition} $i263 == 1;
    $p38 := arg;
    call _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev($p38);
    $exn := false;
    return;

  $bb40:
    assume {:partition} $i264 == 1;
    $p39 := arg;
    call _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev($p39);
    $exn := false;
    return;

  $bb41:
    assume {:partition} $i265 == 1;
    $p40 := arg;
    call _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE6updateEv($p40);
    $exn := false;
    return;

  $bb42:
    assume {:partition} $i266 == 1;
    $p41 := arg;
    call _ZN4uORB11PublicationI18actuator_outputs_sED2Ev($p41);
    $exn := false;
    return;

  $bb43:
    assume {:partition} $i267 == 1;
    $p42 := arg;
    call _ZThn32_N4uORB11PublicationI18actuator_outputs_sED1Ev($p42);
    $exn := false;
    return;

  $bb44:
    assume {:partition} $i268 == 1;
    $p43 := arg;
    call _ZN4uORB11PublicationI18actuator_outputs_sED0Ev($p43);
    $exn := false;
    return;

  $bb45:
    assume {:partition} $i269 == 1;
    $p44 := arg;
    call _ZThn32_N4uORB11PublicationI18actuator_outputs_sED0Ev($p44);
    $exn := false;
    return;

  $bb46:
    assume {:partition} $i270 == 1;
    $p45 := arg;
    call _ZN4uORB11PublicationI18actuator_outputs_sE6updateEv($p45);
    $exn := false;
    return;

  $bb47:
    assume {:partition} $i271 == 1;
    $p46 := arg;
    call _ZN4uORB11PublicationI17actuator_direct_sED2Ev($p46);
    $exn := false;
    return;

  $bb48:
    assume {:partition} $i272 == 1;
    $p47 := arg;
    call _ZThn32_N4uORB11PublicationI17actuator_direct_sED1Ev($p47);
    $exn := false;
    return;

  $bb49:
    assume {:partition} $i273 == 1;
    $p48 := arg;
    call _ZN4uORB11PublicationI17actuator_direct_sED0Ev($p48);
    $exn := false;
    return;

  $bb50:
    assume {:partition} $i274 == 1;
    $p49 := arg;
    call _ZThn32_N4uORB11PublicationI17actuator_direct_sED0Ev($p49);
    $exn := false;
    return;

  $bb51:
    assume {:partition} $i275 == 1;
    $p50 := arg;
    call _ZN4uORB11PublicationI17actuator_direct_sE6updateEv($p50);
    $exn := false;
    return;

  $bb52:
    assume {:partition} $i276 == 1;
    $p51 := arg;
    call _ZN4uORB11PublicationI10encoders_sED2Ev($p51);
    $exn := false;
    return;

  $bb53:
    assume {:partition} $i277 == 1;
    $p52 := arg;
    call _ZThn32_N4uORB11PublicationI10encoders_sED1Ev($p52);
    $exn := false;
    return;

  $bb54:
    assume {:partition} $i278 == 1;
    $p53 := arg;
    call _ZN4uORB11PublicationI10encoders_sED0Ev($p53);
    $exn := false;
    return;

  $bb55:
    assume {:partition} $i279 == 1;
    $p54 := arg;
    call _ZThn32_N4uORB11PublicationI10encoders_sED0Ev($p54);
    $exn := false;
    return;

  $bb56:
    assume {:partition} $i280 == 1;
    $p55 := arg;
    call _ZN4uORB11PublicationI10encoders_sE6updateEv($p55);
    $exn := false;
    return;

  $bb57:
    assume {:partition} $i281 == 1;
    $p56 := arg;
    call _ZN4uORB11PublicationI13tecs_status_sED2Ev($p56);
    $exn := false;
    return;

  $bb58:
    assume {:partition} $i282 == 1;
    $p57 := arg;
    call _ZThn32_N4uORB11PublicationI13tecs_status_sED1Ev($p57);
    $exn := false;
    return;

  $bb59:
    assume {:partition} $i283 == 1;
    $p58 := arg;
    call _ZN4uORB11PublicationI13tecs_status_sED0Ev($p58);
    $exn := false;
    return;

  $bb60:
    assume {:partition} $i284 == 1;
    $p59 := arg;
    call _ZThn32_N4uORB11PublicationI13tecs_status_sED0Ev($p59);
    $exn := false;
    return;

  $bb61:
    assume {:partition} $i285 == 1;
    $p60 := arg;
    call _ZN4uORB11PublicationI13tecs_status_sE6updateEv($p60);
    $exn := false;
    return;

  $bb62:
    assume {:partition} $i286 == 1;
    $p61 := arg;
    call _ZN4uORB11PublicationI13rc_channels_sED2Ev($p61);
    $exn := false;
    return;

  $bb63:
    assume {:partition} $i287 == 1;
    $p62 := arg;
    call _ZThn32_N4uORB11PublicationI13rc_channels_sED1Ev($p62);
    $exn := false;
    return;

  $bb64:
    assume {:partition} $i288 == 1;
    $p63 := arg;
    call _ZN4uORB11PublicationI13rc_channels_sED0Ev($p63);
    $exn := false;
    return;

  $bb65:
    assume {:partition} $i289 == 1;
    $p64 := arg;
    call _ZThn32_N4uORB11PublicationI13rc_channels_sED0Ev($p64);
    $exn := false;
    return;

  $bb66:
    assume {:partition} $i290 == 1;
    $p65 := arg;
    call _ZN4uORB11PublicationI13rc_channels_sE6updateEv($p65);
    $exn := false;
    return;

  $bb67:
    assume {:partition} $i291 == 1;
    $p66 := arg;
    call _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev($p66);
    $exn := false;
    return;

  $bb68:
    assume {:partition} $i292 == 1;
    $p67 := arg;
    call _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED1Ev($p67);
    $exn := false;
    return;

  $bb69:
    assume {:partition} $i293 == 1;
    $p68 := arg;
    call _ZN4uORB11PublicationI22filtered_bottom_flow_sED0Ev($p68);
    $exn := false;
    return;

  $bb70:
    assume {:partition} $i294 == 1;
    $p69 := arg;
    call _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED0Ev($p69);
    $exn := false;
    return;

  $bb71:
    assume {:partition} $i295 == 1;
    $p70 := arg;
    call _ZN4uORB11PublicationI22filtered_bottom_flow_sE6updateEv($p70);
    $exn := false;
    return;

  $bb72:
    assume {:partition} $i296 == 1;
    $p71 := arg;
    call _ZN4uORB15PublicationBaseD2Ev($p71);
    $exn := false;
    return;

  $bb73:
    assume {:partition} $i297 == 1;
    $p72 := arg;
    call _ZN4uORB15PublicationBaseD0Ev($p72);
    $exn := false;
    return;

  $bb74:
    assume {:partition} $i298 == 1;
    $p73 := arg;
    call _ZN4uORB12SubscriptionI18parameter_update_sED2Ev($p73);
    $exn := false;
    return;

  $bb75:
    assume {:partition} $i299 == 1;
    $p74 := arg;
    call _ZThn24_N4uORB12SubscriptionI18parameter_update_sED1Ev($p74);
    $exn := false;
    return;

  $bb76:
    assume {:partition} $i300 == 1;
    $p75 := arg;
    call _ZN4uORB12SubscriptionI18parameter_update_sED0Ev($p75);
    $exn := false;
    return;

  $bb77:
    assume {:partition} $i301 == 1;
    $p76 := arg;
    call _ZThn24_N4uORB12SubscriptionI18parameter_update_sED0Ev($p76);
    $exn := false;
    return;

  $bb78:
    assume {:partition} $i302 == 1;
    $p77 := arg;
    call _ZN4uORB12SubscriptionI18parameter_update_sE6updateEv($p77);
    $exn := false;
    return;

  $bb79:
    assume {:partition} $i303 == 1;
    $p78 := arg;
    call _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev($p78);
    $exn := false;
    return;

  $bb80:
    assume {:partition} $i304 == 1;
    $p79 := arg;
    call _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED1Ev($p79);
    $exn := false;
    return;

  $bb81:
    assume {:partition} $i305 == 1;
    $p80 := arg;
    call _ZN4uORB12SubscriptionI19actuator_controls_sED0Ev($p80);
    $exn := false;
    return;

  $bb82:
    assume {:partition} $i306 == 1;
    $p81 := arg;
    call _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED0Ev($p81);
    $exn := false;
    return;

  $bb83:
    assume {:partition} $i307 == 1;
    $p82 := arg;
    call _ZN4uORB12SubscriptionI19actuator_controls_sE6updateEv($p82);
    $exn := false;
    return;

  $bb84:
    assume {:partition} $i308 == 1;
    $p83 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev($p83);
    $exn := false;
    return;

  $bb85:
    assume {:partition} $i309 == 1;
    $p84 := arg;
    call _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED1Ev($p84);
    $exn := false;
    return;

  $bb86:
    assume {:partition} $i310 == 1;
    $p85 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_gps_position_sED0Ev($p85);
    $exn := false;
    return;

  $bb87:
    assume {:partition} $i311 == 1;
    $p86 := arg;
    call _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED0Ev($p86);
    $exn := false;
    return;

  $bb88:
    assume {:partition} $i312 == 1;
    $p87 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_gps_position_sE6updateEv($p87);
    $exn := false;
    return;

  $bb89:
    assume {:partition} $i313 == 1;
    $p88 := arg;
    call _ZN4uORB12SubscriptionI16satellite_info_sED2Ev($p88);
    $exn := false;
    return;

  $bb90:
    assume {:partition} $i314 == 1;
    $p89 := arg;
    call _ZThn24_N4uORB12SubscriptionI16satellite_info_sED1Ev($p89);
    $exn := false;
    return;

  $bb91:
    assume {:partition} $i315 == 1;
    $p90 := arg;
    call _ZN4uORB12SubscriptionI16satellite_info_sED0Ev($p90);
    $exn := false;
    return;

  $bb92:
    assume {:partition} $i316 == 1;
    $p91 := arg;
    call _ZThn24_N4uORB12SubscriptionI16satellite_info_sED0Ev($p91);
    $exn := false;
    return;

  $bb93:
    assume {:partition} $i317 == 1;
    $p92 := arg;
    call _ZN4uORB12SubscriptionI16satellite_info_sE6updateEv($p92);
    $exn := false;
    return;

  $bb94:
    assume {:partition} $i318 == 1;
    $p93 := arg;
    call _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev($p93);
    $exn := false;
    return;

  $bb95:
    assume {:partition} $i319 == 1;
    $p94 := arg;
    call _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED1Ev($p94);
    $exn := false;
    return;

  $bb96:
    assume {:partition} $i320 == 1;
    $p95 := arg;
    call _ZN4uORB12SubscriptionI17sensor_combined_sED0Ev($p95);
    $exn := false;
    return;

  $bb97:
    assume {:partition} $i321 == 1;
    $p96 := arg;
    call _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED0Ev($p96);
    $exn := false;
    return;

  $bb98:
    assume {:partition} $i322 == 1;
    $p97 := arg;
    call _ZN4uORB12SubscriptionI17sensor_combined_sE6updateEv($p97);
    $exn := false;
    return;

  $bb99:
    assume {:partition} $i323 == 1;
    $p98 := arg;
    call _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev($p98);
    $exn := false;
    return;

  $bb100:
    assume {:partition} $i324 == 1;
    $p99 := arg;
    call _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED1Ev($p99);
    $exn := false;
    return;

  $bb101:
    assume {:partition} $i325 == 1;
    $p100 := arg;
    call _ZN4uORB12SubscriptionI12hil_sensor_sED0Ev($p100);
    $exn := false;
    return;

  $bb102:
    assume {:partition} $i326 == 1;
    $p101 := arg;
    call _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED0Ev($p101);
    $exn := false;
    return;

  $bb103:
    assume {:partition} $i327 == 1;
    $p102 := arg;
    call _ZN4uORB12SubscriptionI12hil_sensor_sE6updateEv($p102);
    $exn := false;
    return;

  $bb104:
    assume {:partition} $i328 == 1;
    $p103 := arg;
    call _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev($p103);
    $exn := false;
    return;

  $bb105:
    assume {:partition} $i329 == 1;
    $p104 := arg;
    call _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED1Ev($p104);
    $exn := false;
    return;

  $bb106:
    assume {:partition} $i330 == 1;
    $p105 := arg;
    call _ZN4uORB12SubscriptionI18vehicle_attitude_sED0Ev($p105);
    $exn := false;
    return;

  $bb107:
    assume {:partition} $i331 == 1;
    $p106 := arg;
    call _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED0Ev($p106);
    $exn := false;
    return;

  $bb108:
    assume {:partition} $i332 == 1;
    $p107 := arg;
    call _ZN4uORB12SubscriptionI18vehicle_attitude_sE6updateEv($p107);
    $exn := false;
    return;

  $bb109:
    assume {:partition} $i333 == 1;
    $p108 := arg;
    call _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev($p108);
    $exn := false;
    return;

  $bb110:
    assume {:partition} $i334 == 1;
    $p109 := arg;
    call _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED1Ev($p109);
    $exn := false;
    return;

  $bb111:
    assume {:partition} $i335 == 1;
    $p110 := arg;
    call _ZN4uORB12SubscriptionI25vehicle_global_position_sED0Ev($p110);
    $exn := false;
    return;

  $bb112:
    assume {:partition} $i336 == 1;
    $p111 := arg;
    call _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED0Ev($p111);
    $exn := false;
    return;

  $bb113:
    assume {:partition} $i337 == 1;
    $p112 := arg;
    call _ZN4uORB12SubscriptionI25vehicle_global_position_sE6updateEv($p112);
    $exn := false;
    return;

  $bb114:
    assume {:partition} $i338 == 1;
    $p113 := arg;
    call _ZN4uORB12SubscriptionI10encoders_sED2Ev($p113);
    $exn := false;
    return;

  $bb115:
    assume {:partition} $i339 == 1;
    $p114 := arg;
    call _ZThn24_N4uORB12SubscriptionI10encoders_sED1Ev($p114);
    $exn := false;
    return;

  $bb116:
    assume {:partition} $i340 == 1;
    $p115 := arg;
    call _ZN4uORB12SubscriptionI10encoders_sED0Ev($p115);
    $exn := false;
    return;

  $bb117:
    assume {:partition} $i341 == 1;
    $p116 := arg;
    call _ZThn24_N4uORB12SubscriptionI10encoders_sED0Ev($p116);
    $exn := false;
    return;

  $bb118:
    assume {:partition} $i342 == 1;
    $p117 := arg;
    call _ZN4uORB12SubscriptionI10encoders_sE6updateEv($p117);
    $exn := false;
    return;

  $bb119:
    assume {:partition} $i343 == 1;
    $p118 := arg;
    call _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev($p118);
    $exn := false;
    return;

  $bb120:
    assume {:partition} $i344 == 1;
    $p119 := arg;
    call _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED1Ev($p119);
    $exn := false;
    return;

  $bb121:
    assume {:partition} $i345 == 1;
    $p120 := arg;
    call _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev($p120);
    $exn := false;
    return;

  $bb122:
    assume {:partition} $i346 == 1;
    $p121 := arg;
    call _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev($p121);
    $exn := false;
    return;

  $bb123:
    assume {:partition} $i347 == 1;
    $p122 := arg;
    call _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE6updateEv($p122);
    $exn := false;
    return;

  $bb124:
    assume {:partition} $i348 == 1;
    $p123 := arg;
    call _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev($p123);
    $exn := false;
    return;

  $bb125:
    assume {:partition} $i349 == 1;
    $p124 := arg;
    call _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED1Ev($p124);
    $exn := false;
    return;

  $bb126:
    assume {:partition} $i350 == 1;
    $p125 := arg;
    call _ZN4uORB12SubscriptionI16vehicle_status_sED0Ev($p125);
    $exn := false;
    return;

  $bb127:
    assume {:partition} $i351 == 1;
    $p126 := arg;
    call _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED0Ev($p126);
    $exn := false;
    return;

  $bb128:
    assume {:partition} $i352 == 1;
    $p127 := arg;
    call _ZN4uORB12SubscriptionI16vehicle_status_sE6updateEv($p127);
    $exn := false;
    return;

  $bb129:
    assume {:partition} $i353 == 1;
    $p128 := arg;
    call _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev($p128);
    $exn := false;
    return;

  $bb130:
    assume {:partition} $i354 == 1;
    $p129 := arg;
    call _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED1Ev($p129);
    $exn := false;
    return;

  $bb131:
    assume {:partition} $i355 == 1;
    $p130 := arg;
    call _ZN4uORB12SubscriptionI25manual_control_setpoint_sED0Ev($p130);
    $exn := false;
    return;

  $bb132:
    assume {:partition} $i356 == 1;
    $p131 := arg;
    call _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED0Ev($p131);
    $exn := false;
    return;

  $bb133:
    assume {:partition} $i357 == 1;
    $p132 := arg;
    call _ZN4uORB12SubscriptionI25manual_control_setpoint_sE6updateEv($p132);
    $exn := false;
    return;

  $bb134:
    assume {:partition} $i358 == 1;
    $p133 := arg;
    call _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev($p133);
    $exn := false;
    return;

  $bb135:
    assume {:partition} $i359 == 1;
    $p134 := arg;
    call _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED1Ev($p134);
    $exn := false;
    return;

  $bb136:
    assume {:partition} $i360 == 1;
    $p135 := arg;
    call _ZN4uORB12SubscriptionI13mavlink_log_sED0Ev($p135);
    $exn := false;
    return;

  $bb137:
    assume {:partition} $i361 == 1;
    $p136 := arg;
    call _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED0Ev($p136);
    $exn := false;
    return;

  $bb138:
    assume {:partition} $i362 == 1;
    $p137 := arg;
    call _ZN4uORB12SubscriptionI13mavlink_log_sE6updateEv($p137);
    $exn := false;
    return;

  $bb139:
    assume {:partition} $i363 == 1;
    $p138 := arg;
    call _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev($p138);
    $exn := false;
    return;

  $bb140:
    assume {:partition} $i364 == 1;
    $p139 := arg;
    call _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED1Ev($p139);
    $exn := false;
    return;

  $bb141:
    assume {:partition} $i365 == 1;
    $p140 := arg;
    call _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev($p140);
    $exn := false;
    return;

  $bb142:
    assume {:partition} $i366 == 1;
    $p141 := arg;
    call _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev($p141);
    $exn := false;
    return;

  $bb143:
    assume {:partition} $i367 == 1;
    $p142 := arg;
    call _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE6updateEv($p142);
    $exn := false;
    return;

  $bb144:
    assume {:partition} $i368 == 1;
    $p143 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev($p143);
    $exn := false;
    return;

  $bb145:
    assume {:partition} $i369 == 1;
    $p144 := arg;
    call _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED1Ev($p144);
    $exn := false;
    return;

  $bb146:
    assume {:partition} $i370 == 1;
    $p145 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_local_position_sED0Ev($p145);
    $exn := false;
    return;

  $bb147:
    assume {:partition} $i371 == 1;
    $p146 := arg;
    call _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED0Ev($p146);
    $exn := false;
    return;

  $bb148:
    assume {:partition} $i372 == 1;
    $p147 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_local_position_sE6updateEv($p147);
    $exn := false;
    return;

  $bb149:
    assume {:partition} $i373 == 1;
    $p148 := arg;
    call _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev($p148);
    $exn := false;
    return;

  $bb150:
    assume {:partition} $i374 == 1;
    $p149 := arg;
    call _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED1Ev($p149);
    $exn := false;
    return;

  $bb151:
    assume {:partition} $i375 == 1;
    $p150 := arg;
    call _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev($p150);
    $exn := false;
    return;

  $bb152:
    assume {:partition} $i376 == 1;
    $p151 := arg;
    call _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev($p151);
    $exn := false;
    return;

  $bb153:
    assume {:partition} $i377 == 1;
    $p152 := arg;
    call _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE6updateEv($p152);
    $exn := false;
    return;

  $bb154:
    assume {:partition} $i378 == 1;
    $p153 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev($p153);
    $exn := false;
    return;

  $bb155:
    assume {:partition} $i379 == 1;
    $p154 := arg;
    call _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED1Ev($p154);
    $exn := false;
    return;

  $bb156:
    assume {:partition} $i380 == 1;
    $p155 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev($p155);
    $exn := false;
    return;

  $bb157:
    assume {:partition} $i381 == 1;
    $p156 := arg;
    call _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev($p156);
    $exn := false;
    return;

  $bb158:
    assume {:partition} $i382 == 1;
    $p157 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE6updateEv($p157);
    $exn := false;
    return;

  $bb159:
    assume {:partition} $i383 == 1;
    $p158 := arg;
    call _ZN4uORB12SubscriptionI13rc_channels_sED2Ev($p158);
    $exn := false;
    return;

  $bb160:
    assume {:partition} $i384 == 1;
    $p159 := arg;
    call _ZThn24_N4uORB12SubscriptionI13rc_channels_sED1Ev($p159);
    $exn := false;
    return;

  $bb161:
    assume {:partition} $i385 == 1;
    $p160 := arg;
    call _ZN4uORB12SubscriptionI13rc_channels_sED0Ev($p160);
    $exn := false;
    return;

  $bb162:
    assume {:partition} $i386 == 1;
    $p161 := arg;
    call _ZThn24_N4uORB12SubscriptionI13rc_channels_sED0Ev($p161);
    $exn := false;
    return;

  $bb163:
    assume {:partition} $i387 == 1;
    $p162 := arg;
    call _ZN4uORB12SubscriptionI13rc_channels_sE6updateEv($p162);
    $exn := false;
    return;

  $bb164:
    assume {:partition} $i388 == 1;
    $p163 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev($p163);
    $exn := false;
    return;

  $bb165:
    assume {:partition} $i389 == 1;
    $p164 := arg;
    call _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED1Ev($p164);
    $exn := false;
    return;

  $bb166:
    assume {:partition} $i390 == 1;
    $p165 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_control_mode_sED0Ev($p165);
    $exn := false;
    return;

  $bb167:
    assume {:partition} $i391 == 1;
    $p166 := arg;
    call _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED0Ev($p166);
    $exn := false;
    return;

  $bb168:
    assume {:partition} $i392 == 1;
    $p167 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_control_mode_sE6updateEv($p167);
    $exn := false;
    return;

  $bb169:
    assume {:partition} $i393 == 1;
    $p168 := arg;
    call _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev($p168);
    $exn := false;
    return;

  $bb170:
    assume {:partition} $i394 == 1;
    $p169 := arg;
    call _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED1Ev($p169);
    $exn := false;
    return;

  $bb171:
    assume {:partition} $i395 == 1;
    $p170 := arg;
    call _ZN4uORB12SubscriptionI16actuator_armed_sED0Ev($p170);
    $exn := false;
    return;

  $bb172:
    assume {:partition} $i396 == 1;
    $p171 := arg;
    call _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED0Ev($p171);
    $exn := false;
    return;

  $bb173:
    assume {:partition} $i397 == 1;
    $p172 := arg;
    call _ZN4uORB12SubscriptionI16actuator_armed_sE6updateEv($p172);
    $exn := false;
    return;

  $bb174:
    assume {:partition} $i398 == 1;
    $p173 := arg;
    call _ZN4uORB12SubscriptionI16battery_status_sED2Ev($p173);
    $exn := false;
    return;

  $bb175:
    assume {:partition} $i399 == 1;
    $p174 := arg;
    call _ZThn24_N4uORB12SubscriptionI16battery_status_sED1Ev($p174);
    $exn := false;
    return;

  $bb176:
    assume {:partition} $i400 == 1;
    $p175 := arg;
    call _ZN4uORB12SubscriptionI16battery_status_sED0Ev($p175);
    $exn := false;
    return;

  $bb177:
    assume {:partition} $i401 == 1;
    $p176 := arg;
    call _ZThn24_N4uORB12SubscriptionI16battery_status_sED0Ev($p176);
    $exn := false;
    return;

  $bb178:
    assume {:partition} $i402 == 1;
    $p177 := arg;
    call _ZN4uORB12SubscriptionI16battery_status_sE6updateEv($p177);
    $exn := false;
    return;

  $bb179:
    assume {:partition} $i403 == 1;
    $p178 := arg;
    call _ZN4uORB12SubscriptionI15home_position_sED2Ev($p178);
    $exn := false;
    return;

  $bb180:
    assume {:partition} $i404 == 1;
    $p179 := arg;
    call _ZThn24_N4uORB12SubscriptionI15home_position_sED1Ev($p179);
    $exn := false;
    return;

  $bb181:
    assume {:partition} $i405 == 1;
    $p180 := arg;
    call _ZN4uORB12SubscriptionI15home_position_sED0Ev($p180);
    $exn := false;
    return;

  $bb182:
    assume {:partition} $i406 == 1;
    $p181 := arg;
    call _ZThn24_N4uORB12SubscriptionI15home_position_sED0Ev($p181);
    $exn := false;
    return;

  $bb183:
    assume {:partition} $i407 == 1;
    $p182 := arg;
    call _ZN4uORB12SubscriptionI15home_position_sE6updateEv($p182);
    $exn := false;
    return;

  $bb184:
    assume {:partition} $i408 == 1;
    $p183 := arg;
    call _ZN4uORB12SubscriptionI14optical_flow_sED2Ev($p183);
    $exn := false;
    return;

  $bb185:
    assume {:partition} $i409 == 1;
    $p184 := arg;
    call _ZThn24_N4uORB12SubscriptionI14optical_flow_sED1Ev($p184);
    $exn := false;
    return;

  $bb186:
    assume {:partition} $i410 == 1;
    $p185 := arg;
    call _ZN4uORB12SubscriptionI14optical_flow_sED0Ev($p185);
    $exn := false;
    return;

  $bb187:
    assume {:partition} $i411 == 1;
    $p186 := arg;
    call _ZThn24_N4uORB12SubscriptionI14optical_flow_sED0Ev($p186);
    $exn := false;
    return;

  $bb188:
    assume {:partition} $i412 == 1;
    $p187 := arg;
    call _ZN4uORB12SubscriptionI14optical_flow_sE6updateEv($p187);
    $exn := false;
    return;

  $bb189:
    assume {:partition} $i413 == 1;
    $p188 := arg;
    call _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev($p188);
    $exn := false;
    return;

  $bb190:
    assume {:partition} $i414 == 1;
    $p189 := arg;
    call _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED1Ev($p189);
    $exn := false;
    return;

  $bb191:
    assume {:partition} $i415 == 1;
    $p190 := arg;
    call _ZN4uORB12SubscriptionI17distance_sensor_sED0Ev($p190);
    $exn := false;
    return;

  $bb192:
    assume {:partition} $i416 == 1;
    $p191 := arg;
    call _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED0Ev($p191);
    $exn := false;
    return;

  $bb193:
    assume {:partition} $i417 == 1;
    $p192 := arg;
    call _ZN4uORB12SubscriptionI17distance_sensor_sE6updateEv($p192);
    $exn := false;
    return;

  $bb194:
    assume {:partition} $i418 == 1;
    $p193 := arg;
    call _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev($p193);
    $exn := false;
    return;

  $bb195:
    assume {:partition} $i419 == 1;
    $p194 := arg;
    call _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED1Ev($p194);
    $exn := false;
    return;

  $bb196:
    assume {:partition} $i420 == 1;
    $p195 := arg;
    call _ZN4uORB12SubscriptionI15att_pos_mocap_sED0Ev($p195);
    $exn := false;
    return;

  $bb197:
    assume {:partition} $i421 == 1;
    $p196 := arg;
    call _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED0Ev($p196);
    $exn := false;
    return;

  $bb198:
    assume {:partition} $i422 == 1;
    $p197 := arg;
    call _ZN4uORB12SubscriptionI15att_pos_mocap_sE6updateEv($p197);
    $exn := false;
    return;

  $bb199:
    assume {:partition} $i423 == 1;
    $p198 := arg;
    call _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev($p198);
    $exn := false;
    return;

  $bb200:
    assume {:partition} $i424 == 1;
    $p199 := arg;
    call _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED1Ev($p199);
    $exn := false;
    return;

  $bb201:
    assume {:partition} $i425 == 1;
    $p200 := arg;
    call _ZN4uORB12SubscriptionI26vision_position_estimate_sED0Ev($p200);
    $exn := false;
    return;

  $bb202:
    assume {:partition} $i426 == 1;
    $p201 := arg;
    call _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED0Ev($p201);
    $exn := false;
    return;

  $bb203:
    assume {:partition} $i427 == 1;
    $p202 := arg;
    call _ZN4uORB12SubscriptionI26vision_position_estimate_sE6updateEv($p202);
    $exn := false;
    return;

  $bb204:
    assume {:partition} $i428 == 1;
    $p203 := arg;
    call _ZN4uORB12SubscriptionI15control_state_sED2Ev($p203);
    $exn := false;
    return;

  $bb205:
    assume {:partition} $i429 == 1;
    $p204 := arg;
    call _ZThn24_N4uORB12SubscriptionI15control_state_sED1Ev($p204);
    $exn := false;
    return;

  $bb206:
    assume {:partition} $i430 == 1;
    $p205 := arg;
    call _ZN4uORB12SubscriptionI15control_state_sED0Ev($p205);
    $exn := false;
    return;

  $bb207:
    assume {:partition} $i431 == 1;
    $p206 := arg;
    call _ZThn24_N4uORB12SubscriptionI15control_state_sED0Ev($p206);
    $exn := false;
    return;

  $bb208:
    assume {:partition} $i432 == 1;
    $p207 := arg;
    call _ZN4uORB12SubscriptionI15control_state_sE6updateEv($p207);
    $exn := false;
    return;

  $bb209:
    assume {:partition} $i433 == 1;
    $p208 := arg;
    call _ZN4uORB16SubscriptionBaseD2Ev($p208);
    $exn := false;
    return;

  $bb210:
    assume {:partition} $i434 == 1;
    $p209 := arg;
    call _ZN4uORB16SubscriptionBaseD0Ev($p209);
    $exn := false;
    return;

  $bb211:
    assume {:partition} $i435 == 1;
    call _ZN4uORB10DeviceNodeD2Ev(arg);
    $exn := false;
    return;

  $bb212:
    assume {:partition} $i436 == 1;
    call _ZN4uORB10DeviceNodeD0Ev(arg);
    $exn := false;
    return;

  $bb213:
    assume {:partition} $i437 == 1;
    $p210 := arg;
    call _ZN4uORB12DeviceMasterD2Ev($p210);
    $exn := false;
    return;

  $bb214:
    assume {:partition} $i438 == 1;
    $p211 := arg;
    call _ZN4uORB12DeviceMasterD0Ev($p211);
    $exn := false;
    return;

  $bb215:
    assume {:partition} $i439 == 1;
    $p212 := arg;
    call _ZN4uORB7ManagerC2Ev($p212);
    $exn := false;
    return;

  $bb216:
    assume {:partition} $i440 == 1;
    $p213 := arg;
    call _ZN4uORB15PublicationNodeD2Ev($p213);
    $exn := false;
    return;

  $bb217:
    assume {:partition} $i441 == 1;
    $p214 := arg;
    call _ZN4uORB16SubscriptionNodeD2Ev($p214);
    $exn := false;
    return;

  $bb218:
    assume {:partition} $i442 == 1;
    $p215 := arg;
    call _ZN4uORB15PublicationNodeD0Ev($p215);
    $exn := false;
    return;

  $bb219:
    assume {:partition} $i443 == 1;
    $p216 := arg;
    call _ZThn32_N4uORB15PublicationNodeD0Ev($p216);
    $exn := false;
    return;

  $bb220:
    assume {:partition} $i444 == 1;
    $p217 := arg;
    call _ZThn32_N4uORB15PublicationNodeD1Ev($p217);
    $exn := false;
    return;

  $bb221:
    assume {:partition} $i445 == 1;
    $p218 := arg;
    call _ZN8ListNodeIPN4uORB15PublicationNodeEED0Ev($p218);
    $exn := false;
    return;

  $bb222:
    assume {:partition} $i446 == 1;
    $p219 := arg;
    call _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev($p219);
    $exn := false;
    return;

  $bb223:
    assume {:partition} $i447 == 1;
    $p220 := arg;
    call _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev($p220);
    $exn := false;
    return;

  $bb224:
    assume {:partition} $i448 == 1;
    $p221 := arg;
    call _ZN4uORB16SubscriptionNodeD0Ev($p221);
    $exn := false;
    return;

  $bb225:
    assume {:partition} $i449 == 1;
    $p222 := arg;
    call _ZThn24_N4uORB16SubscriptionNodeD0Ev($p222);
    $exn := false;
    return;

  $bb226:
    assume {:partition} $i450 == 1;
    $p223 := arg;
    call _ZThn24_N4uORB16SubscriptionNodeD1Ev($p223);
    $exn := false;
    return;

  $bb227:
    assume {:partition} $i451 == 1;
    $p224 := arg;
    call _ZN8ListNodeIPN4uORB16SubscriptionNodeEED0Ev($p224);
    $exn := false;
    return;

  $bb228:
    assume {:partition} $i452 == 1;
    $p225 := arg;
    call _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEED2Ev($p225);
    $exn := false;
    return;

  $bb229:
    assume {:partition} !($i226 == 1);
    assume false;
    goto $bb230;

  $bb230:
    assume {:partition} !($i227 == 1);
    $i226 := (if _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i226} true;
    goto $bb2, $bb229;

  $bb231:
    assume {:partition} !($i228 == 1);
    $i227 := (if _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i227} true;
    goto $bb3, $bb230;

  $bb232:
    assume {:partition} !($i229 == 1);
    $i228 := (if _ZN4uORB11PublicationI18vehicle_attitude_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i228} true;
    goto $bb4, $bb231;

  $bb233:
    assume {:partition} !($i230 == 1);
    $i229 := (if _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i229} true;
    goto $bb5, $bb232;

  $bb234:
    assume {:partition} !($i231 == 1);
    $i230 := (if _ZN4uORB11PublicationI18vehicle_attitude_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i230} true;
    goto $bb6, $bb233;

  $bb235:
    assume {:partition} !($i232 == 1);
    $i231 := (if _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i231} true;
    goto $bb7, $bb234;

  $bb236:
    assume {:partition} !($i233 == 1);
    $i232 := (if _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i232} true;
    goto $bb8, $bb235;

  $bb237:
    assume {:partition} !($i234 == 1);
    $i233 := (if _ZN4uORB11PublicationI24vehicle_local_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i233} true;
    goto $bb9, $bb236;

  $bb238:
    assume {:partition} !($i235 == 1);
    $i234 := (if _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i234} true;
    goto $bb10, $bb237;

  $bb239:
    assume {:partition} !($i236 == 1);
    $i235 := (if _ZN4uORB11PublicationI24vehicle_local_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i235} true;
    goto $bb11, $bb238;

  $bb240:
    assume {:partition} !($i237 == 1);
    $i236 := (if _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i236} true;
    goto $bb12, $bb239;

  $bb241:
    assume {:partition} !($i238 == 1);
    $i237 := (if _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i237} true;
    goto $bb13, $bb240;

  $bb242:
    assume {:partition} !($i239 == 1);
    $i238 := (if _ZN4uORB11PublicationI25vehicle_global_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i238} true;
    goto $bb14, $bb241;

  $bb243:
    assume {:partition} !($i240 == 1);
    $i239 := (if _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i239} true;
    goto $bb15, $bb242;

  $bb244:
    assume {:partition} !($i241 == 1);
    $i240 := (if _ZN4uORB11PublicationI25vehicle_global_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i240} true;
    goto $bb16, $bb243;

  $bb245:
    assume {:partition} !($i242 == 1);
    $i241 := (if _ZN4uORB11PublicationI17debug_key_value_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i241} true;
    goto $bb17, $bb244;

  $bb246:
    assume {:partition} !($i243 == 1);
    $i242 := (if _ZThn32_N4uORB11PublicationI17debug_key_value_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i242} true;
    goto $bb18, $bb245;

  $bb247:
    assume {:partition} !($i244 == 1);
    $i243 := (if _ZN4uORB11PublicationI17debug_key_value_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i243} true;
    goto $bb19, $bb246;

  $bb248:
    assume {:partition} !($i245 == 1);
    $i244 := (if _ZThn32_N4uORB11PublicationI17debug_key_value_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i244} true;
    goto $bb20, $bb247;

  $bb249:
    assume {:partition} !($i246 == 1);
    $i245 := (if _ZN4uORB11PublicationI17debug_key_value_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i245} true;
    goto $bb21, $bb248;

  $bb250:
    assume {:partition} !($i247 == 1);
    $i246 := (if _ZN4uORB11PublicationI19actuator_controls_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i246} true;
    goto $bb22, $bb249;

  $bb251:
    assume {:partition} !($i248 == 1);
    $i247 := (if _ZThn32_N4uORB11PublicationI19actuator_controls_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i247} true;
    goto $bb23, $bb250;

  $bb252:
    assume {:partition} !($i249 == 1);
    $i248 := (if _ZN4uORB11PublicationI19actuator_controls_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i248} true;
    goto $bb24, $bb251;

  $bb253:
    assume {:partition} !($i250 == 1);
    $i249 := (if _ZThn32_N4uORB11PublicationI19actuator_controls_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i249} true;
    goto $bb25, $bb252;

  $bb254:
    assume {:partition} !($i251 == 1);
    $i250 := (if _ZN4uORB11PublicationI19actuator_controls_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i250} true;
    goto $bb26, $bb253;

  $bb255:
    assume {:partition} !($i252 == 1);
    $i251 := (if _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i251} true;
    goto $bb27, $bb254;

  $bb256:
    assume {:partition} !($i253 == 1);
    $i252 := (if _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i252} true;
    goto $bb28, $bb255;

  $bb257:
    assume {:partition} !($i254 == 1);
    $i253 := (if _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i253} true;
    goto $bb29, $bb256;

  $bb258:
    assume {:partition} !($i255 == 1);
    $i254 := (if _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i254} true;
    goto $bb30, $bb257;

  $bb259:
    assume {:partition} !($i256 == 1);
    $i255 := (if _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i255} true;
    goto $bb31, $bb258;

  $bb260:
    assume {:partition} !($i257 == 1);
    $i256 := (if _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i256} true;
    goto $bb32, $bb259;

  $bb261:
    assume {:partition} !($i258 == 1);
    $i257 := (if _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i257} true;
    goto $bb33, $bb260;

  $bb262:
    assume {:partition} !($i259 == 1);
    $i258 := (if _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i258} true;
    goto $bb34, $bb261;

  $bb263:
    assume {:partition} !($i260 == 1);
    $i259 := (if _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i259} true;
    goto $bb35, $bb262;

  $bb264:
    assume {:partition} !($i261 == 1);
    $i260 := (if _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i260} true;
    goto $bb36, $bb263;

  $bb265:
    assume {:partition} !($i262 == 1);
    $i261 := (if _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i261} true;
    goto $bb37, $bb264;

  $bb266:
    assume {:partition} !($i263 == 1);
    $i262 := (if _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i262} true;
    goto $bb38, $bb265;

  $bb267:
    assume {:partition} !($i264 == 1);
    $i263 := (if _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i263} true;
    goto $bb39, $bb266;

  $bb268:
    assume {:partition} !($i265 == 1);
    $i264 := (if _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i264} true;
    goto $bb40, $bb267;

  $bb269:
    assume {:partition} !($i266 == 1);
    $i265 := (if _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i265} true;
    goto $bb41, $bb268;

  $bb270:
    assume {:partition} !($i267 == 1);
    $i266 := (if _ZN4uORB11PublicationI18actuator_outputs_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i266} true;
    goto $bb42, $bb269;

  $bb271:
    assume {:partition} !($i268 == 1);
    $i267 := (if _ZThn32_N4uORB11PublicationI18actuator_outputs_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i267} true;
    goto $bb43, $bb270;

  $bb272:
    assume {:partition} !($i269 == 1);
    $i268 := (if _ZN4uORB11PublicationI18actuator_outputs_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i268} true;
    goto $bb44, $bb271;

  $bb273:
    assume {:partition} !($i270 == 1);
    $i269 := (if _ZThn32_N4uORB11PublicationI18actuator_outputs_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i269} true;
    goto $bb45, $bb272;

  $bb274:
    assume {:partition} !($i271 == 1);
    $i270 := (if _ZN4uORB11PublicationI18actuator_outputs_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i270} true;
    goto $bb46, $bb273;

  $bb275:
    assume {:partition} !($i272 == 1);
    $i271 := (if _ZN4uORB11PublicationI17actuator_direct_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i271} true;
    goto $bb47, $bb274;

  $bb276:
    assume {:partition} !($i273 == 1);
    $i272 := (if _ZThn32_N4uORB11PublicationI17actuator_direct_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i272} true;
    goto $bb48, $bb275;

  $bb277:
    assume {:partition} !($i274 == 1);
    $i273 := (if _ZN4uORB11PublicationI17actuator_direct_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i273} true;
    goto $bb49, $bb276;

  $bb278:
    assume {:partition} !($i275 == 1);
    $i274 := (if _ZThn32_N4uORB11PublicationI17actuator_direct_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i274} true;
    goto $bb50, $bb277;

  $bb279:
    assume {:partition} !($i276 == 1);
    $i275 := (if _ZN4uORB11PublicationI17actuator_direct_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i275} true;
    goto $bb51, $bb278;

  $bb280:
    assume {:partition} !($i277 == 1);
    $i276 := (if _ZN4uORB11PublicationI10encoders_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i276} true;
    goto $bb52, $bb279;

  $bb281:
    assume {:partition} !($i278 == 1);
    $i277 := (if _ZThn32_N4uORB11PublicationI10encoders_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i277} true;
    goto $bb53, $bb280;

  $bb282:
    assume {:partition} !($i279 == 1);
    $i278 := (if _ZN4uORB11PublicationI10encoders_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i278} true;
    goto $bb54, $bb281;

  $bb283:
    assume {:partition} !($i280 == 1);
    $i279 := (if _ZThn32_N4uORB11PublicationI10encoders_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i279} true;
    goto $bb55, $bb282;

  $bb284:
    assume {:partition} !($i281 == 1);
    $i280 := (if _ZN4uORB11PublicationI10encoders_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i280} true;
    goto $bb56, $bb283;

  $bb285:
    assume {:partition} !($i282 == 1);
    $i281 := (if _ZN4uORB11PublicationI13tecs_status_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i281} true;
    goto $bb57, $bb284;

  $bb286:
    assume {:partition} !($i283 == 1);
    $i282 := (if _ZThn32_N4uORB11PublicationI13tecs_status_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i282} true;
    goto $bb58, $bb285;

  $bb287:
    assume {:partition} !($i284 == 1);
    $i283 := (if _ZN4uORB11PublicationI13tecs_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i283} true;
    goto $bb59, $bb286;

  $bb288:
    assume {:partition} !($i285 == 1);
    $i284 := (if _ZThn32_N4uORB11PublicationI13tecs_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i284} true;
    goto $bb60, $bb287;

  $bb289:
    assume {:partition} !($i286 == 1);
    $i285 := (if _ZN4uORB11PublicationI13tecs_status_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i285} true;
    goto $bb61, $bb288;

  $bb290:
    assume {:partition} !($i287 == 1);
    $i286 := (if _ZN4uORB11PublicationI13rc_channels_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i286} true;
    goto $bb62, $bb289;

  $bb291:
    assume {:partition} !($i288 == 1);
    $i287 := (if _ZThn32_N4uORB11PublicationI13rc_channels_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i287} true;
    goto $bb63, $bb290;

  $bb292:
    assume {:partition} !($i289 == 1);
    $i288 := (if _ZN4uORB11PublicationI13rc_channels_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i288} true;
    goto $bb64, $bb291;

  $bb293:
    assume {:partition} !($i290 == 1);
    $i289 := (if _ZThn32_N4uORB11PublicationI13rc_channels_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i289} true;
    goto $bb65, $bb292;

  $bb294:
    assume {:partition} !($i291 == 1);
    $i290 := (if _ZN4uORB11PublicationI13rc_channels_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i290} true;
    goto $bb66, $bb293;

  $bb295:
    assume {:partition} !($i292 == 1);
    $i291 := (if _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i291} true;
    goto $bb67, $bb294;

  $bb296:
    assume {:partition} !($i293 == 1);
    $i292 := (if _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i292} true;
    goto $bb68, $bb295;

  $bb297:
    assume {:partition} !($i294 == 1);
    $i293 := (if _ZN4uORB11PublicationI22filtered_bottom_flow_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i293} true;
    goto $bb69, $bb296;

  $bb298:
    assume {:partition} !($i295 == 1);
    $i294 := (if _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i294} true;
    goto $bb70, $bb297;

  $bb299:
    assume {:partition} !($i296 == 1);
    $i295 := (if _ZN4uORB11PublicationI22filtered_bottom_flow_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i295} true;
    goto $bb71, $bb298;

  $bb300:
    assume {:partition} !($i297 == 1);
    $i296 := (if _ZN4uORB15PublicationBaseD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i296} true;
    goto $bb72, $bb299;

  $bb301:
    assume {:partition} !($i298 == 1);
    $i297 := (if _ZN4uORB15PublicationBaseD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i297} true;
    goto $bb73, $bb300;

  $bb302:
    assume {:partition} !($i299 == 1);
    $i298 := (if _ZN4uORB12SubscriptionI18parameter_update_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i298} true;
    goto $bb74, $bb301;

  $bb303:
    assume {:partition} !($i300 == 1);
    $i299 := (if _ZThn24_N4uORB12SubscriptionI18parameter_update_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i299} true;
    goto $bb75, $bb302;

  $bb304:
    assume {:partition} !($i301 == 1);
    $i300 := (if _ZN4uORB12SubscriptionI18parameter_update_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i300} true;
    goto $bb76, $bb303;

  $bb305:
    assume {:partition} !($i302 == 1);
    $i301 := (if _ZThn24_N4uORB12SubscriptionI18parameter_update_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i301} true;
    goto $bb77, $bb304;

  $bb306:
    assume {:partition} !($i303 == 1);
    $i302 := (if _ZN4uORB12SubscriptionI18parameter_update_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i302} true;
    goto $bb78, $bb305;

  $bb307:
    assume {:partition} !($i304 == 1);
    $i303 := (if _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i303} true;
    goto $bb79, $bb306;

  $bb308:
    assume {:partition} !($i305 == 1);
    $i304 := (if _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i304} true;
    goto $bb80, $bb307;

  $bb309:
    assume {:partition} !($i306 == 1);
    $i305 := (if _ZN4uORB12SubscriptionI19actuator_controls_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i305} true;
    goto $bb81, $bb308;

  $bb310:
    assume {:partition} !($i307 == 1);
    $i306 := (if _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i306} true;
    goto $bb82, $bb309;

  $bb311:
    assume {:partition} !($i308 == 1);
    $i307 := (if _ZN4uORB12SubscriptionI19actuator_controls_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i307} true;
    goto $bb83, $bb310;

  $bb312:
    assume {:partition} !($i309 == 1);
    $i308 := (if _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i308} true;
    goto $bb84, $bb311;

  $bb313:
    assume {:partition} !($i310 == 1);
    $i309 := (if _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i309} true;
    goto $bb85, $bb312;

  $bb314:
    assume {:partition} !($i311 == 1);
    $i310 := (if _ZN4uORB12SubscriptionI22vehicle_gps_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i310} true;
    goto $bb86, $bb313;

  $bb315:
    assume {:partition} !($i312 == 1);
    $i311 := (if _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i311} true;
    goto $bb87, $bb314;

  $bb316:
    assume {:partition} !($i313 == 1);
    $i312 := (if _ZN4uORB12SubscriptionI22vehicle_gps_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i312} true;
    goto $bb88, $bb315;

  $bb317:
    assume {:partition} !($i314 == 1);
    $i313 := (if _ZN4uORB12SubscriptionI16satellite_info_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i313} true;
    goto $bb89, $bb316;

  $bb318:
    assume {:partition} !($i315 == 1);
    $i314 := (if _ZThn24_N4uORB12SubscriptionI16satellite_info_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i314} true;
    goto $bb90, $bb317;

  $bb319:
    assume {:partition} !($i316 == 1);
    $i315 := (if _ZN4uORB12SubscriptionI16satellite_info_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i315} true;
    goto $bb91, $bb318;

  $bb320:
    assume {:partition} !($i317 == 1);
    $i316 := (if _ZThn24_N4uORB12SubscriptionI16satellite_info_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i316} true;
    goto $bb92, $bb319;

  $bb321:
    assume {:partition} !($i318 == 1);
    $i317 := (if _ZN4uORB12SubscriptionI16satellite_info_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i317} true;
    goto $bb93, $bb320;

  $bb322:
    assume {:partition} !($i319 == 1);
    $i318 := (if _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i318} true;
    goto $bb94, $bb321;

  $bb323:
    assume {:partition} !($i320 == 1);
    $i319 := (if _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i319} true;
    goto $bb95, $bb322;

  $bb324:
    assume {:partition} !($i321 == 1);
    $i320 := (if _ZN4uORB12SubscriptionI17sensor_combined_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i320} true;
    goto $bb96, $bb323;

  $bb325:
    assume {:partition} !($i322 == 1);
    $i321 := (if _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i321} true;
    goto $bb97, $bb324;

  $bb326:
    assume {:partition} !($i323 == 1);
    $i322 := (if _ZN4uORB12SubscriptionI17sensor_combined_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i322} true;
    goto $bb98, $bb325;

  $bb327:
    assume {:partition} !($i324 == 1);
    $i323 := (if _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i323} true;
    goto $bb99, $bb326;

  $bb328:
    assume {:partition} !($i325 == 1);
    $i324 := (if _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i324} true;
    goto $bb100, $bb327;

  $bb329:
    assume {:partition} !($i326 == 1);
    $i325 := (if _ZN4uORB12SubscriptionI12hil_sensor_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i325} true;
    goto $bb101, $bb328;

  $bb330:
    assume {:partition} !($i327 == 1);
    $i326 := (if _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i326} true;
    goto $bb102, $bb329;

  $bb331:
    assume {:partition} !($i328 == 1);
    $i327 := (if _ZN4uORB12SubscriptionI12hil_sensor_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i327} true;
    goto $bb103, $bb330;

  $bb332:
    assume {:partition} !($i329 == 1);
    $i328 := (if _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i328} true;
    goto $bb104, $bb331;

  $bb333:
    assume {:partition} !($i330 == 1);
    $i329 := (if _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i329} true;
    goto $bb105, $bb332;

  $bb334:
    assume {:partition} !($i331 == 1);
    $i330 := (if _ZN4uORB12SubscriptionI18vehicle_attitude_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i330} true;
    goto $bb106, $bb333;

  $bb335:
    assume {:partition} !($i332 == 1);
    $i331 := (if _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i331} true;
    goto $bb107, $bb334;

  $bb336:
    assume {:partition} !($i333 == 1);
    $i332 := (if _ZN4uORB12SubscriptionI18vehicle_attitude_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i332} true;
    goto $bb108, $bb335;

  $bb337:
    assume {:partition} !($i334 == 1);
    $i333 := (if _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i333} true;
    goto $bb109, $bb336;

  $bb338:
    assume {:partition} !($i335 == 1);
    $i334 := (if _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i334} true;
    goto $bb110, $bb337;

  $bb339:
    assume {:partition} !($i336 == 1);
    $i335 := (if _ZN4uORB12SubscriptionI25vehicle_global_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i335} true;
    goto $bb111, $bb338;

  $bb340:
    assume {:partition} !($i337 == 1);
    $i336 := (if _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i336} true;
    goto $bb112, $bb339;

  $bb341:
    assume {:partition} !($i338 == 1);
    $i337 := (if _ZN4uORB12SubscriptionI25vehicle_global_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i337} true;
    goto $bb113, $bb340;

  $bb342:
    assume {:partition} !($i339 == 1);
    $i338 := (if _ZN4uORB12SubscriptionI10encoders_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i338} true;
    goto $bb114, $bb341;

  $bb343:
    assume {:partition} !($i340 == 1);
    $i339 := (if _ZThn24_N4uORB12SubscriptionI10encoders_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i339} true;
    goto $bb115, $bb342;

  $bb344:
    assume {:partition} !($i341 == 1);
    $i340 := (if _ZN4uORB12SubscriptionI10encoders_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i340} true;
    goto $bb116, $bb343;

  $bb345:
    assume {:partition} !($i342 == 1);
    $i341 := (if _ZThn24_N4uORB12SubscriptionI10encoders_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i341} true;
    goto $bb117, $bb344;

  $bb346:
    assume {:partition} !($i343 == 1);
    $i342 := (if _ZN4uORB12SubscriptionI10encoders_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i342} true;
    goto $bb118, $bb345;

  $bb347:
    assume {:partition} !($i344 == 1);
    $i343 := (if _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i343} true;
    goto $bb119, $bb346;

  $bb348:
    assume {:partition} !($i345 == 1);
    $i344 := (if _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i344} true;
    goto $bb120, $bb347;

  $bb349:
    assume {:partition} !($i346 == 1);
    $i345 := (if _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i345} true;
    goto $bb121, $bb348;

  $bb350:
    assume {:partition} !($i347 == 1);
    $i346 := (if _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i346} true;
    goto $bb122, $bb349;

  $bb351:
    assume {:partition} !($i348 == 1);
    $i347 := (if _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i347} true;
    goto $bb123, $bb350;

  $bb352:
    assume {:partition} !($i349 == 1);
    $i348 := (if _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i348} true;
    goto $bb124, $bb351;

  $bb353:
    assume {:partition} !($i350 == 1);
    $i349 := (if _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i349} true;
    goto $bb125, $bb352;

  $bb354:
    assume {:partition} !($i351 == 1);
    $i350 := (if _ZN4uORB12SubscriptionI16vehicle_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i350} true;
    goto $bb126, $bb353;

  $bb355:
    assume {:partition} !($i352 == 1);
    $i351 := (if _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i351} true;
    goto $bb127, $bb354;

  $bb356:
    assume {:partition} !($i353 == 1);
    $i352 := (if _ZN4uORB12SubscriptionI16vehicle_status_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i352} true;
    goto $bb128, $bb355;

  $bb357:
    assume {:partition} !($i354 == 1);
    $i353 := (if _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i353} true;
    goto $bb129, $bb356;

  $bb358:
    assume {:partition} !($i355 == 1);
    $i354 := (if _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i354} true;
    goto $bb130, $bb357;

  $bb359:
    assume {:partition} !($i356 == 1);
    $i355 := (if _ZN4uORB12SubscriptionI25manual_control_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i355} true;
    goto $bb131, $bb358;

  $bb360:
    assume {:partition} !($i357 == 1);
    $i356 := (if _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i356} true;
    goto $bb132, $bb359;

  $bb361:
    assume {:partition} !($i358 == 1);
    $i357 := (if _ZN4uORB12SubscriptionI25manual_control_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i357} true;
    goto $bb133, $bb360;

  $bb362:
    assume {:partition} !($i359 == 1);
    $i358 := (if _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i358} true;
    goto $bb134, $bb361;

  $bb363:
    assume {:partition} !($i360 == 1);
    $i359 := (if _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i359} true;
    goto $bb135, $bb362;

  $bb364:
    assume {:partition} !($i361 == 1);
    $i360 := (if _ZN4uORB12SubscriptionI13mavlink_log_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i360} true;
    goto $bb136, $bb363;

  $bb365:
    assume {:partition} !($i362 == 1);
    $i361 := (if _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i361} true;
    goto $bb137, $bb364;

  $bb366:
    assume {:partition} !($i363 == 1);
    $i362 := (if _ZN4uORB12SubscriptionI13mavlink_log_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i362} true;
    goto $bb138, $bb365;

  $bb367:
    assume {:partition} !($i364 == 1);
    $i363 := (if _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i363} true;
    goto $bb139, $bb366;

  $bb368:
    assume {:partition} !($i365 == 1);
    $i364 := (if _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i364} true;
    goto $bb140, $bb367;

  $bb369:
    assume {:partition} !($i366 == 1);
    $i365 := (if _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i365} true;
    goto $bb141, $bb368;

  $bb370:
    assume {:partition} !($i367 == 1);
    $i366 := (if _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i366} true;
    goto $bb142, $bb369;

  $bb371:
    assume {:partition} !($i368 == 1);
    $i367 := (if _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i367} true;
    goto $bb143, $bb370;

  $bb372:
    assume {:partition} !($i369 == 1);
    $i368 := (if _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i368} true;
    goto $bb144, $bb371;

  $bb373:
    assume {:partition} !($i370 == 1);
    $i369 := (if _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i369} true;
    goto $bb145, $bb372;

  $bb374:
    assume {:partition} !($i371 == 1);
    $i370 := (if _ZN4uORB12SubscriptionI24vehicle_local_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i370} true;
    goto $bb146, $bb373;

  $bb375:
    assume {:partition} !($i372 == 1);
    $i371 := (if _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i371} true;
    goto $bb147, $bb374;

  $bb376:
    assume {:partition} !($i373 == 1);
    $i372 := (if _ZN4uORB12SubscriptionI24vehicle_local_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i372} true;
    goto $bb148, $bb375;

  $bb377:
    assume {:partition} !($i374 == 1);
    $i373 := (if _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i373} true;
    goto $bb149, $bb376;

  $bb378:
    assume {:partition} !($i375 == 1);
    $i374 := (if _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i374} true;
    goto $bb150, $bb377;

  $bb379:
    assume {:partition} !($i376 == 1);
    $i375 := (if _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i375} true;
    goto $bb151, $bb378;

  $bb380:
    assume {:partition} !($i377 == 1);
    $i376 := (if _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i376} true;
    goto $bb152, $bb379;

  $bb381:
    assume {:partition} !($i378 == 1);
    $i377 := (if _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i377} true;
    goto $bb153, $bb380;

  $bb382:
    assume {:partition} !($i379 == 1);
    $i378 := (if _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i378} true;
    goto $bb154, $bb381;

  $bb383:
    assume {:partition} !($i380 == 1);
    $i379 := (if _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i379} true;
    goto $bb155, $bb382;

  $bb384:
    assume {:partition} !($i381 == 1);
    $i380 := (if _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i380} true;
    goto $bb156, $bb383;

  $bb385:
    assume {:partition} !($i382 == 1);
    $i381 := (if _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i381} true;
    goto $bb157, $bb384;

  $bb386:
    assume {:partition} !($i383 == 1);
    $i382 := (if _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i382} true;
    goto $bb158, $bb385;

  $bb387:
    assume {:partition} !($i384 == 1);
    $i383 := (if _ZN4uORB12SubscriptionI13rc_channels_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i383} true;
    goto $bb159, $bb386;

  $bb388:
    assume {:partition} !($i385 == 1);
    $i384 := (if _ZThn24_N4uORB12SubscriptionI13rc_channels_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i384} true;
    goto $bb160, $bb387;

  $bb389:
    assume {:partition} !($i386 == 1);
    $i385 := (if _ZN4uORB12SubscriptionI13rc_channels_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i385} true;
    goto $bb161, $bb388;

  $bb390:
    assume {:partition} !($i387 == 1);
    $i386 := (if _ZThn24_N4uORB12SubscriptionI13rc_channels_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i386} true;
    goto $bb162, $bb389;

  $bb391:
    assume {:partition} !($i388 == 1);
    $i387 := (if _ZN4uORB12SubscriptionI13rc_channels_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i387} true;
    goto $bb163, $bb390;

  $bb392:
    assume {:partition} !($i389 == 1);
    $i388 := (if _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i388} true;
    goto $bb164, $bb391;

  $bb393:
    assume {:partition} !($i390 == 1);
    $i389 := (if _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i389} true;
    goto $bb165, $bb392;

  $bb394:
    assume {:partition} !($i391 == 1);
    $i390 := (if _ZN4uORB12SubscriptionI22vehicle_control_mode_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i390} true;
    goto $bb166, $bb393;

  $bb395:
    assume {:partition} !($i392 == 1);
    $i391 := (if _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i391} true;
    goto $bb167, $bb394;

  $bb396:
    assume {:partition} !($i393 == 1);
    $i392 := (if _ZN4uORB12SubscriptionI22vehicle_control_mode_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i392} true;
    goto $bb168, $bb395;

  $bb397:
    assume {:partition} !($i394 == 1);
    $i393 := (if _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i393} true;
    goto $bb169, $bb396;

  $bb398:
    assume {:partition} !($i395 == 1);
    $i394 := (if _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i394} true;
    goto $bb170, $bb397;

  $bb399:
    assume {:partition} !($i396 == 1);
    $i395 := (if _ZN4uORB12SubscriptionI16actuator_armed_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i395} true;
    goto $bb171, $bb398;

  $bb400:
    assume {:partition} !($i397 == 1);
    $i396 := (if _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i396} true;
    goto $bb172, $bb399;

  $bb401:
    assume {:partition} !($i398 == 1);
    $i397 := (if _ZN4uORB12SubscriptionI16actuator_armed_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i397} true;
    goto $bb173, $bb400;

  $bb402:
    assume {:partition} !($i399 == 1);
    $i398 := (if _ZN4uORB12SubscriptionI16battery_status_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i398} true;
    goto $bb174, $bb401;

  $bb403:
    assume {:partition} !($i400 == 1);
    $i399 := (if _ZThn24_N4uORB12SubscriptionI16battery_status_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i399} true;
    goto $bb175, $bb402;

  $bb404:
    assume {:partition} !($i401 == 1);
    $i400 := (if _ZN4uORB12SubscriptionI16battery_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i400} true;
    goto $bb176, $bb403;

  $bb405:
    assume {:partition} !($i402 == 1);
    $i401 := (if _ZThn24_N4uORB12SubscriptionI16battery_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i401} true;
    goto $bb177, $bb404;

  $bb406:
    assume {:partition} !($i403 == 1);
    $i402 := (if _ZN4uORB12SubscriptionI16battery_status_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i402} true;
    goto $bb178, $bb405;

  $bb407:
    assume {:partition} !($i404 == 1);
    $i403 := (if _ZN4uORB12SubscriptionI15home_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i403} true;
    goto $bb179, $bb406;

  $bb408:
    assume {:partition} !($i405 == 1);
    $i404 := (if _ZThn24_N4uORB12SubscriptionI15home_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i404} true;
    goto $bb180, $bb407;

  $bb409:
    assume {:partition} !($i406 == 1);
    $i405 := (if _ZN4uORB12SubscriptionI15home_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i405} true;
    goto $bb181, $bb408;

  $bb410:
    assume {:partition} !($i407 == 1);
    $i406 := (if _ZThn24_N4uORB12SubscriptionI15home_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i406} true;
    goto $bb182, $bb409;

  $bb411:
    assume {:partition} !($i408 == 1);
    $i407 := (if _ZN4uORB12SubscriptionI15home_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i407} true;
    goto $bb183, $bb410;

  $bb412:
    assume {:partition} !($i409 == 1);
    $i408 := (if _ZN4uORB12SubscriptionI14optical_flow_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i408} true;
    goto $bb184, $bb411;

  $bb413:
    assume {:partition} !($i410 == 1);
    $i409 := (if _ZThn24_N4uORB12SubscriptionI14optical_flow_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i409} true;
    goto $bb185, $bb412;

  $bb414:
    assume {:partition} !($i411 == 1);
    $i410 := (if _ZN4uORB12SubscriptionI14optical_flow_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i410} true;
    goto $bb186, $bb413;

  $bb415:
    assume {:partition} !($i412 == 1);
    $i411 := (if _ZThn24_N4uORB12SubscriptionI14optical_flow_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i411} true;
    goto $bb187, $bb414;

  $bb416:
    assume {:partition} !($i413 == 1);
    $i412 := (if _ZN4uORB12SubscriptionI14optical_flow_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i412} true;
    goto $bb188, $bb415;

  $bb417:
    assume {:partition} !($i414 == 1);
    $i413 := (if _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i413} true;
    goto $bb189, $bb416;

  $bb418:
    assume {:partition} !($i415 == 1);
    $i414 := (if _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i414} true;
    goto $bb190, $bb417;

  $bb419:
    assume {:partition} !($i416 == 1);
    $i415 := (if _ZN4uORB12SubscriptionI17distance_sensor_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i415} true;
    goto $bb191, $bb418;

  $bb420:
    assume {:partition} !($i417 == 1);
    $i416 := (if _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i416} true;
    goto $bb192, $bb419;

  $bb421:
    assume {:partition} !($i418 == 1);
    $i417 := (if _ZN4uORB12SubscriptionI17distance_sensor_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i417} true;
    goto $bb193, $bb420;

  $bb422:
    assume {:partition} !($i419 == 1);
    $i418 := (if _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i418} true;
    goto $bb194, $bb421;

  $bb423:
    assume {:partition} !($i420 == 1);
    $i419 := (if _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i419} true;
    goto $bb195, $bb422;

  $bb424:
    assume {:partition} !($i421 == 1);
    $i420 := (if _ZN4uORB12SubscriptionI15att_pos_mocap_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i420} true;
    goto $bb196, $bb423;

  $bb425:
    assume {:partition} !($i422 == 1);
    $i421 := (if _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i421} true;
    goto $bb197, $bb424;

  $bb426:
    assume {:partition} !($i423 == 1);
    $i422 := (if _ZN4uORB12SubscriptionI15att_pos_mocap_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i422} true;
    goto $bb198, $bb425;

  $bb427:
    assume {:partition} !($i424 == 1);
    $i423 := (if _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i423} true;
    goto $bb199, $bb426;

  $bb428:
    assume {:partition} !($i425 == 1);
    $i424 := (if _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i424} true;
    goto $bb200, $bb427;

  $bb429:
    assume {:partition} !($i426 == 1);
    $i425 := (if _ZN4uORB12SubscriptionI26vision_position_estimate_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i425} true;
    goto $bb201, $bb428;

  $bb430:
    assume {:partition} !($i427 == 1);
    $i426 := (if _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i426} true;
    goto $bb202, $bb429;

  $bb431:
    assume {:partition} !($i428 == 1);
    $i427 := (if _ZN4uORB12SubscriptionI26vision_position_estimate_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i427} true;
    goto $bb203, $bb430;

  $bb432:
    assume {:partition} !($i429 == 1);
    $i428 := (if _ZN4uORB12SubscriptionI15control_state_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i428} true;
    goto $bb204, $bb431;

  $bb433:
    assume {:partition} !($i430 == 1);
    $i429 := (if _ZThn24_N4uORB12SubscriptionI15control_state_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i429} true;
    goto $bb205, $bb432;

  $bb434:
    assume {:partition} !($i431 == 1);
    $i430 := (if _ZN4uORB12SubscriptionI15control_state_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i430} true;
    goto $bb206, $bb433;

  $bb435:
    assume {:partition} !($i432 == 1);
    $i431 := (if _ZThn24_N4uORB12SubscriptionI15control_state_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i431} true;
    goto $bb207, $bb434;

  $bb436:
    assume {:partition} !($i433 == 1);
    $i432 := (if _ZN4uORB12SubscriptionI15control_state_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i432} true;
    goto $bb208, $bb435;

  $bb437:
    assume {:partition} !($i434 == 1);
    $i433 := (if _ZN4uORB16SubscriptionBaseD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i433} true;
    goto $bb209, $bb436;

  $bb438:
    assume {:partition} !($i435 == 1);
    $i434 := (if _ZN4uORB16SubscriptionBaseD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i434} true;
    goto $bb210, $bb437;

  $bb439:
    assume {:partition} !($i436 == 1);
    $i435 := (if _ZN4uORB10DeviceNodeD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i435} true;
    goto $bb211, $bb438;

  $bb440:
    assume {:partition} !($i437 == 1);
    $i436 := (if _ZN4uORB10DeviceNodeD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i436} true;
    goto $bb212, $bb439;

  $bb441:
    assume {:partition} !($i438 == 1);
    $i437 := (if _ZN4uORB12DeviceMasterD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i437} true;
    goto $bb213, $bb440;

  $bb442:
    assume {:partition} !($i439 == 1);
    $i438 := (if _ZN4uORB12DeviceMasterD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i438} true;
    goto $bb214, $bb441;

  $bb443:
    assume {:partition} !($i440 == 1);
    $i439 := (if _ZN4uORB7ManagerC2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i439} true;
    goto $bb215, $bb442;

  $bb444:
    assume {:partition} !($i441 == 1);
    $i440 := (if _ZN4uORB15PublicationNodeD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i440} true;
    goto $bb216, $bb443;

  $bb445:
    assume {:partition} !($i442 == 1);
    $i441 := (if _ZN4uORB16SubscriptionNodeD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i441} true;
    goto $bb217, $bb444;

  $bb446:
    assume {:partition} !($i443 == 1);
    $i442 := (if _ZN4uORB15PublicationNodeD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i442} true;
    goto $bb218, $bb445;

  $bb447:
    assume {:partition} !($i444 == 1);
    $i443 := (if _ZThn32_N4uORB15PublicationNodeD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i443} true;
    goto $bb219, $bb446;

  $bb448:
    assume {:partition} !($i445 == 1);
    $i444 := (if _ZThn32_N4uORB15PublicationNodeD1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i444} true;
    goto $bb220, $bb447;

  $bb449:
    assume {:partition} !($i446 == 1);
    $i445 := (if _ZN8ListNodeIPN4uORB15PublicationNodeEED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i445} true;
    goto $bb221, $bb448;

  $bb450:
    assume {:partition} !($i447 == 1);
    $i446 := (if _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i446} true;
    goto $bb222, $bb449;

  $bb451:
    assume {:partition} !($i448 == 1);
    $i447 := (if _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i447} true;
    goto $bb223, $bb450;

  $bb452:
    assume {:partition} !($i449 == 1);
    $i448 := (if _ZN4uORB16SubscriptionNodeD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i448} true;
    goto $bb224, $bb451;

  $bb453:
    assume {:partition} !($i450 == 1);
    $i449 := (if _ZThn24_N4uORB16SubscriptionNodeD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i449} true;
    goto $bb225, $bb452;

  $bb454:
    assume {:partition} !($i451 == 1);
    $i450 := (if _ZThn24_N4uORB16SubscriptionNodeD1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i450} true;
    goto $bb226, $bb453;

  $bb455:
    assume {:partition} !($i452 == 1);
    $i451 := (if _ZN8ListNodeIPN4uORB16SubscriptionNodeEED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i451} true;
    goto $bb227, $bb454;
}



const devirtbounce13: int;

axiom devirtbounce13 == NULL - 10656;

procedure devirtbounce13(funcPtr: int, arg: int);



implementation devirtbounce13(funcPtr: int, arg: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var $p3: int;
  var $p4: int;
  var $p5: int;
  var $p6: int;
  var $p7: int;
  var $p8: int;
  var $p9: int;
  var $p10: int;
  var $p11: int;
  var $p12: int;
  var $p13: int;
  var $p14: int;
  var $p15: int;
  var $p16: int;
  var $p17: int;
  var $p18: int;
  var $p19: int;
  var $p20: int;
  var $p21: int;
  var $p22: int;
  var $p23: int;
  var $p24: int;
  var $p25: int;
  var $p26: int;
  var $p27: int;
  var $p28: int;
  var $p29: int;
  var $p30: int;
  var $p31: int;
  var $p32: int;
  var $p33: int;
  var $p34: int;
  var $p35: int;
  var $p36: int;
  var $p37: int;
  var $p38: int;
  var $p39: int;
  var $p40: int;
  var $p41: int;
  var $p42: int;
  var $p43: int;
  var $p44: int;
  var $p45: int;
  var $p46: int;
  var $p47: int;
  var $p48: int;
  var $p49: int;
  var $p50: int;
  var $p51: int;
  var $p52: int;
  var $p53: int;
  var $p54: int;
  var $p55: int;
  var $p56: int;
  var $p57: int;
  var $p58: int;
  var $p59: int;
  var $p60: int;
  var $p61: int;
  var $p62: int;
  var $p63: int;
  var $p64: int;
  var $p65: int;
  var $p66: int;
  var $p67: int;
  var $p68: int;
  var $p69: int;
  var $p70: int;
  var $p71: int;
  var $p72: int;
  var $p73: int;
  var $p74: int;
  var $p75: int;
  var $p76: int;
  var $p77: int;
  var $p78: int;
  var $p79: int;
  var $p80: int;
  var $p81: int;
  var $p82: int;
  var $p83: int;
  var $p84: int;
  var $p85: int;
  var $p86: int;
  var $p87: int;
  var $p88: int;
  var $p89: int;
  var $p90: int;
  var $p91: int;
  var $p92: int;
  var $p93: int;
  var $p94: int;
  var $p95: int;
  var $p96: int;
  var $p97: int;
  var $p98: int;
  var $p99: int;
  var $p100: int;
  var $p101: int;
  var $p102: int;
  var $p103: int;
  var $p104: int;
  var $p105: int;
  var $p106: int;
  var $p107: int;
  var $p108: int;
  var $p109: int;
  var $p110: int;
  var $p111: int;
  var $p112: int;
  var $p113: int;
  var $p114: int;
  var $p115: int;
  var $p116: int;
  var $p117: int;
  var $p118: int;
  var $p119: int;
  var $p120: int;
  var $p121: int;
  var $p122: int;
  var $p123: int;
  var $p124: int;
  var $p125: int;
  var $p126: int;
  var $p127: int;
  var $p128: int;
  var $p129: int;
  var $p130: int;
  var $p131: int;
  var $p132: int;
  var $p133: int;
  var $p134: int;
  var $p135: int;
  var $p136: int;
  var $p137: int;
  var $p138: int;
  var $p139: int;
  var $p140: int;
  var $p141: int;
  var $p142: int;
  var $p143: int;
  var $p144: int;
  var $p145: int;
  var $p146: int;
  var $p147: int;
  var $p148: int;
  var $p149: int;
  var $p150: int;
  var $p151: int;
  var $p152: int;
  var $p153: int;
  var $p154: int;
  var $p155: int;
  var $p156: int;
  var $p157: int;
  var $p158: int;
  var $p159: int;
  var $p160: int;
  var $p161: int;
  var $p162: int;
  var $p163: int;
  var $p164: int;
  var $p165: int;
  var $p166: int;
  var $p167: int;
  var $p168: int;
  var $p169: int;
  var $p170: int;
  var $p171: int;
  var $p172: int;
  var $p173: int;
  var $p174: int;
  var $p175: int;
  var $p176: int;
  var $p177: int;
  var $p178: int;
  var $p179: int;
  var $p180: int;
  var $p181: int;
  var $p182: int;
  var $p183: int;
  var $p184: int;
  var $p185: int;
  var $p186: int;
  var $p187: int;
  var $p188: int;
  var $p189: int;
  var $p190: int;
  var $p191: int;
  var $p192: int;
  var $p193: int;
  var $p194: int;
  var $p195: int;
  var $p196: int;
  var $p197: int;
  var $p198: int;
  var $p199: int;
  var $p200: int;
  var $p201: int;
  var $p202: int;
  var $p203: int;
  var $p204: int;
  var $p205: int;
  var $p206: int;
  var $p207: int;
  var $p208: int;
  var $p209: int;
  var $p210: int;
  var $p211: int;
  var $p212: int;
  var $p213: int;
  var $p214: int;
  var $p215: int;
  var $p216: int;
  var $p217: int;
  var $p218: int;
  var $p219: int;
  var $p220: int;
  var $p221: int;
  var $p222: int;
  var $p223: int;
  var $p224: int;
  var $p225: int;
  var {:scalar} $i226: int;
  var {:scalar} $i227: int;
  var {:scalar} $i228: int;
  var {:scalar} $i229: int;
  var {:scalar} $i230: int;
  var {:scalar} $i231: int;
  var {:scalar} $i232: int;
  var {:scalar} $i233: int;
  var {:scalar} $i234: int;
  var {:scalar} $i235: int;
  var {:scalar} $i236: int;
  var {:scalar} $i237: int;
  var {:scalar} $i238: int;
  var {:scalar} $i239: int;
  var {:scalar} $i240: int;
  var {:scalar} $i241: int;
  var {:scalar} $i242: int;
  var {:scalar} $i243: int;
  var {:scalar} $i244: int;
  var {:scalar} $i245: int;
  var {:scalar} $i246: int;
  var {:scalar} $i247: int;
  var {:scalar} $i248: int;
  var {:scalar} $i249: int;
  var {:scalar} $i250: int;
  var {:scalar} $i251: int;
  var {:scalar} $i252: int;
  var {:scalar} $i253: int;
  var {:scalar} $i254: int;
  var {:scalar} $i255: int;
  var {:scalar} $i256: int;
  var {:scalar} $i257: int;
  var {:scalar} $i258: int;
  var {:scalar} $i259: int;
  var {:scalar} $i260: int;
  var {:scalar} $i261: int;
  var {:scalar} $i262: int;
  var {:scalar} $i263: int;
  var {:scalar} $i264: int;
  var {:scalar} $i265: int;
  var {:scalar} $i266: int;
  var {:scalar} $i267: int;
  var {:scalar} $i268: int;
  var {:scalar} $i269: int;
  var {:scalar} $i270: int;
  var {:scalar} $i271: int;
  var {:scalar} $i272: int;
  var {:scalar} $i273: int;
  var {:scalar} $i274: int;
  var {:scalar} $i275: int;
  var {:scalar} $i276: int;
  var {:scalar} $i277: int;
  var {:scalar} $i278: int;
  var {:scalar} $i279: int;
  var {:scalar} $i280: int;
  var {:scalar} $i281: int;
  var {:scalar} $i282: int;
  var {:scalar} $i283: int;
  var {:scalar} $i284: int;
  var {:scalar} $i285: int;
  var {:scalar} $i286: int;
  var {:scalar} $i287: int;
  var {:scalar} $i288: int;
  var {:scalar} $i289: int;
  var {:scalar} $i290: int;
  var {:scalar} $i291: int;
  var {:scalar} $i292: int;
  var {:scalar} $i293: int;
  var {:scalar} $i294: int;
  var {:scalar} $i295: int;
  var {:scalar} $i296: int;
  var {:scalar} $i297: int;
  var {:scalar} $i298: int;
  var {:scalar} $i299: int;
  var {:scalar} $i300: int;
  var {:scalar} $i301: int;
  var {:scalar} $i302: int;
  var {:scalar} $i303: int;
  var {:scalar} $i304: int;
  var {:scalar} $i305: int;
  var {:scalar} $i306: int;
  var {:scalar} $i307: int;
  var {:scalar} $i308: int;
  var {:scalar} $i309: int;
  var {:scalar} $i310: int;
  var {:scalar} $i311: int;
  var {:scalar} $i312: int;
  var {:scalar} $i313: int;
  var {:scalar} $i314: int;
  var {:scalar} $i315: int;
  var {:scalar} $i316: int;
  var {:scalar} $i317: int;
  var {:scalar} $i318: int;
  var {:scalar} $i319: int;
  var {:scalar} $i320: int;
  var {:scalar} $i321: int;
  var {:scalar} $i322: int;
  var {:scalar} $i323: int;
  var {:scalar} $i324: int;
  var {:scalar} $i325: int;
  var {:scalar} $i326: int;
  var {:scalar} $i327: int;
  var {:scalar} $i328: int;
  var {:scalar} $i329: int;
  var {:scalar} $i330: int;
  var {:scalar} $i331: int;
  var {:scalar} $i332: int;
  var {:scalar} $i333: int;
  var {:scalar} $i334: int;
  var {:scalar} $i335: int;
  var {:scalar} $i336: int;
  var {:scalar} $i337: int;
  var {:scalar} $i338: int;
  var {:scalar} $i339: int;
  var {:scalar} $i340: int;
  var {:scalar} $i341: int;
  var {:scalar} $i342: int;
  var {:scalar} $i343: int;
  var {:scalar} $i344: int;
  var {:scalar} $i345: int;
  var {:scalar} $i346: int;
  var {:scalar} $i347: int;
  var {:scalar} $i348: int;
  var {:scalar} $i349: int;
  var {:scalar} $i350: int;
  var {:scalar} $i351: int;
  var {:scalar} $i352: int;
  var {:scalar} $i353: int;
  var {:scalar} $i354: int;
  var {:scalar} $i355: int;
  var {:scalar} $i356: int;
  var {:scalar} $i357: int;
  var {:scalar} $i358: int;
  var {:scalar} $i359: int;
  var {:scalar} $i360: int;
  var {:scalar} $i361: int;
  var {:scalar} $i362: int;
  var {:scalar} $i363: int;
  var {:scalar} $i364: int;
  var {:scalar} $i365: int;
  var {:scalar} $i366: int;
  var {:scalar} $i367: int;
  var {:scalar} $i368: int;
  var {:scalar} $i369: int;
  var {:scalar} $i370: int;
  var {:scalar} $i371: int;
  var {:scalar} $i372: int;
  var {:scalar} $i373: int;
  var {:scalar} $i374: int;
  var {:scalar} $i375: int;
  var {:scalar} $i376: int;
  var {:scalar} $i377: int;
  var {:scalar} $i378: int;
  var {:scalar} $i379: int;
  var {:scalar} $i380: int;
  var {:scalar} $i381: int;
  var {:scalar} $i382: int;
  var {:scalar} $i383: int;
  var {:scalar} $i384: int;
  var {:scalar} $i385: int;
  var {:scalar} $i386: int;
  var {:scalar} $i387: int;
  var {:scalar} $i388: int;
  var {:scalar} $i389: int;
  var {:scalar} $i390: int;
  var {:scalar} $i391: int;
  var {:scalar} $i392: int;
  var {:scalar} $i393: int;
  var {:scalar} $i394: int;
  var {:scalar} $i395: int;
  var {:scalar} $i396: int;
  var {:scalar} $i397: int;
  var {:scalar} $i398: int;
  var {:scalar} $i399: int;
  var {:scalar} $i400: int;
  var {:scalar} $i401: int;
  var {:scalar} $i402: int;
  var {:scalar} $i403: int;
  var {:scalar} $i404: int;
  var {:scalar} $i405: int;
  var {:scalar} $i406: int;
  var {:scalar} $i407: int;
  var {:scalar} $i408: int;
  var {:scalar} $i409: int;
  var {:scalar} $i410: int;
  var {:scalar} $i411: int;
  var {:scalar} $i412: int;
  var {:scalar} $i413: int;
  var {:scalar} $i414: int;
  var {:scalar} $i415: int;
  var {:scalar} $i416: int;
  var {:scalar} $i417: int;
  var {:scalar} $i418: int;
  var {:scalar} $i419: int;
  var {:scalar} $i420: int;
  var {:scalar} $i421: int;
  var {:scalar} $i422: int;
  var {:scalar} $i423: int;
  var {:scalar} $i424: int;
  var {:scalar} $i425: int;
  var {:scalar} $i426: int;
  var {:scalar} $i427: int;
  var {:scalar} $i428: int;
  var {:scalar} $i429: int;
  var {:scalar} $i430: int;
  var {:scalar} $i431: int;
  var {:scalar} $i432: int;
  var {:scalar} $i433: int;
  var {:scalar} $i434: int;
  var {:scalar} $i435: int;
  var {:scalar} $i436: int;
  var {:scalar} $i437: int;
  var {:scalar} $i438: int;
  var {:scalar} $i439: int;
  var {:scalar} $i440: int;
  var {:scalar} $i441: int;
  var {:scalar} $i442: int;
  var {:scalar} $i443: int;
  var {:scalar} $i444: int;
  var {:scalar} $i445: int;
  var {:scalar} $i446: int;
  var {:scalar} $i447: int;
  var {:scalar} $i448: int;
  var {:scalar} $i449: int;
  var {:scalar} $i450: int;
  var {:scalar} $i451: int;
  var {:scalar} $i452: int;

  $bb0:
    $p0 := funcPtr;
    goto $bb1;

  $bb1:
    $i452 := (if _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i452} true;
    goto $bb228, $bb455;

  $bb2:
    assume {:partition} $i226 == 1;
    $p1 := arg;
    call _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev($p1);
    $exn := false;
    return;

  $bb3:
    assume {:partition} $i227 == 1;
    $p2 := arg;
    call _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED1Ev($p2);
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i228 == 1;
    $p3 := arg;
    call _ZN4uORB11PublicationI18vehicle_attitude_sED0Ev($p3);
    $exn := false;
    return;

  $bb5:
    assume {:partition} $i229 == 1;
    $p4 := arg;
    call _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED0Ev($p4);
    $exn := false;
    return;

  $bb6:
    assume {:partition} $i230 == 1;
    $p5 := arg;
    call _ZN4uORB11PublicationI18vehicle_attitude_sE6updateEv($p5);
    $exn := false;
    return;

  $bb7:
    assume {:partition} $i231 == 1;
    $p6 := arg;
    call _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev($p6);
    $exn := false;
    return;

  $bb8:
    assume {:partition} $i232 == 1;
    $p7 := arg;
    call _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED1Ev($p7);
    $exn := false;
    return;

  $bb9:
    assume {:partition} $i233 == 1;
    $p8 := arg;
    call _ZN4uORB11PublicationI24vehicle_local_position_sED0Ev($p8);
    $exn := false;
    return;

  $bb10:
    assume {:partition} $i234 == 1;
    $p9 := arg;
    call _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED0Ev($p9);
    $exn := false;
    return;

  $bb11:
    assume {:partition} $i235 == 1;
    $p10 := arg;
    call _ZN4uORB11PublicationI24vehicle_local_position_sE6updateEv($p10);
    $exn := false;
    return;

  $bb12:
    assume {:partition} $i236 == 1;
    $p11 := arg;
    call _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev($p11);
    $exn := false;
    return;

  $bb13:
    assume {:partition} $i237 == 1;
    $p12 := arg;
    call _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED1Ev($p12);
    $exn := false;
    return;

  $bb14:
    assume {:partition} $i238 == 1;
    $p13 := arg;
    call _ZN4uORB11PublicationI25vehicle_global_position_sED0Ev($p13);
    $exn := false;
    return;

  $bb15:
    assume {:partition} $i239 == 1;
    $p14 := arg;
    call _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED0Ev($p14);
    $exn := false;
    return;

  $bb16:
    assume {:partition} $i240 == 1;
    $p15 := arg;
    call _ZN4uORB11PublicationI25vehicle_global_position_sE6updateEv($p15);
    $exn := false;
    return;

  $bb17:
    assume {:partition} $i241 == 1;
    $p16 := arg;
    call _ZN4uORB11PublicationI17debug_key_value_sED2Ev($p16);
    $exn := false;
    return;

  $bb18:
    assume {:partition} $i242 == 1;
    $p17 := arg;
    call _ZThn32_N4uORB11PublicationI17debug_key_value_sED1Ev($p17);
    $exn := false;
    return;

  $bb19:
    assume {:partition} $i243 == 1;
    $p18 := arg;
    call _ZN4uORB11PublicationI17debug_key_value_sED0Ev($p18);
    $exn := false;
    return;

  $bb20:
    assume {:partition} $i244 == 1;
    $p19 := arg;
    call _ZThn32_N4uORB11PublicationI17debug_key_value_sED0Ev($p19);
    $exn := false;
    return;

  $bb21:
    assume {:partition} $i245 == 1;
    $p20 := arg;
    call _ZN4uORB11PublicationI17debug_key_value_sE6updateEv($p20);
    $exn := false;
    return;

  $bb22:
    assume {:partition} $i246 == 1;
    $p21 := arg;
    call _ZN4uORB11PublicationI19actuator_controls_sED2Ev($p21);
    $exn := false;
    return;

  $bb23:
    assume {:partition} $i247 == 1;
    $p22 := arg;
    call _ZThn32_N4uORB11PublicationI19actuator_controls_sED1Ev($p22);
    $exn := false;
    return;

  $bb24:
    assume {:partition} $i248 == 1;
    $p23 := arg;
    call _ZN4uORB11PublicationI19actuator_controls_sED0Ev($p23);
    $exn := false;
    return;

  $bb25:
    assume {:partition} $i249 == 1;
    $p24 := arg;
    call _ZThn32_N4uORB11PublicationI19actuator_controls_sED0Ev($p24);
    $exn := false;
    return;

  $bb26:
    assume {:partition} $i250 == 1;
    $p25 := arg;
    call _ZN4uORB11PublicationI19actuator_controls_sE6updateEv($p25);
    $exn := false;
    return;

  $bb27:
    assume {:partition} $i251 == 1;
    $p26 := arg;
    call _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev($p26);
    $exn := false;
    return;

  $bb28:
    assume {:partition} $i252 == 1;
    $p27 := arg;
    call _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED1Ev($p27);
    $exn := false;
    return;

  $bb29:
    assume {:partition} $i253 == 1;
    $p28 := arg;
    call _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev($p28);
    $exn := false;
    return;

  $bb30:
    assume {:partition} $i254 == 1;
    $p29 := arg;
    call _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev($p29);
    $exn := false;
    return;

  $bb31:
    assume {:partition} $i255 == 1;
    $p30 := arg;
    call _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE6updateEv($p30);
    $exn := false;
    return;

  $bb32:
    assume {:partition} $i256 == 1;
    $p31 := arg;
    call _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev($p31);
    $exn := false;
    return;

  $bb33:
    assume {:partition} $i257 == 1;
    $p32 := arg;
    call _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED1Ev($p32);
    $exn := false;
    return;

  $bb34:
    assume {:partition} $i258 == 1;
    $p33 := arg;
    call _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev($p33);
    $exn := false;
    return;

  $bb35:
    assume {:partition} $i259 == 1;
    $p34 := arg;
    call _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev($p34);
    $exn := false;
    return;

  $bb36:
    assume {:partition} $i260 == 1;
    $p35 := arg;
    call _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE6updateEv($p35);
    $exn := false;
    return;

  $bb37:
    assume {:partition} $i261 == 1;
    $p36 := arg;
    call _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev($p36);
    $exn := false;
    return;

  $bb38:
    assume {:partition} $i262 == 1;
    $p37 := arg;
    call _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED1Ev($p37);
    $exn := false;
    return;

  $bb39:
    assume {:partition} $i263 == 1;
    $p38 := arg;
    call _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev($p38);
    $exn := false;
    return;

  $bb40:
    assume {:partition} $i264 == 1;
    $p39 := arg;
    call _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev($p39);
    $exn := false;
    return;

  $bb41:
    assume {:partition} $i265 == 1;
    $p40 := arg;
    call _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE6updateEv($p40);
    $exn := false;
    return;

  $bb42:
    assume {:partition} $i266 == 1;
    $p41 := arg;
    call _ZN4uORB11PublicationI18actuator_outputs_sED2Ev($p41);
    $exn := false;
    return;

  $bb43:
    assume {:partition} $i267 == 1;
    $p42 := arg;
    call _ZThn32_N4uORB11PublicationI18actuator_outputs_sED1Ev($p42);
    $exn := false;
    return;

  $bb44:
    assume {:partition} $i268 == 1;
    $p43 := arg;
    call _ZN4uORB11PublicationI18actuator_outputs_sED0Ev($p43);
    $exn := false;
    return;

  $bb45:
    assume {:partition} $i269 == 1;
    $p44 := arg;
    call _ZThn32_N4uORB11PublicationI18actuator_outputs_sED0Ev($p44);
    $exn := false;
    return;

  $bb46:
    assume {:partition} $i270 == 1;
    $p45 := arg;
    call _ZN4uORB11PublicationI18actuator_outputs_sE6updateEv($p45);
    $exn := false;
    return;

  $bb47:
    assume {:partition} $i271 == 1;
    $p46 := arg;
    call _ZN4uORB11PublicationI17actuator_direct_sED2Ev($p46);
    $exn := false;
    return;

  $bb48:
    assume {:partition} $i272 == 1;
    $p47 := arg;
    call _ZThn32_N4uORB11PublicationI17actuator_direct_sED1Ev($p47);
    $exn := false;
    return;

  $bb49:
    assume {:partition} $i273 == 1;
    $p48 := arg;
    call _ZN4uORB11PublicationI17actuator_direct_sED0Ev($p48);
    $exn := false;
    return;

  $bb50:
    assume {:partition} $i274 == 1;
    $p49 := arg;
    call _ZThn32_N4uORB11PublicationI17actuator_direct_sED0Ev($p49);
    $exn := false;
    return;

  $bb51:
    assume {:partition} $i275 == 1;
    $p50 := arg;
    call _ZN4uORB11PublicationI17actuator_direct_sE6updateEv($p50);
    $exn := false;
    return;

  $bb52:
    assume {:partition} $i276 == 1;
    $p51 := arg;
    call _ZN4uORB11PublicationI10encoders_sED2Ev($p51);
    $exn := false;
    return;

  $bb53:
    assume {:partition} $i277 == 1;
    $p52 := arg;
    call _ZThn32_N4uORB11PublicationI10encoders_sED1Ev($p52);
    $exn := false;
    return;

  $bb54:
    assume {:partition} $i278 == 1;
    $p53 := arg;
    call _ZN4uORB11PublicationI10encoders_sED0Ev($p53);
    $exn := false;
    return;

  $bb55:
    assume {:partition} $i279 == 1;
    $p54 := arg;
    call _ZThn32_N4uORB11PublicationI10encoders_sED0Ev($p54);
    $exn := false;
    return;

  $bb56:
    assume {:partition} $i280 == 1;
    $p55 := arg;
    call _ZN4uORB11PublicationI10encoders_sE6updateEv($p55);
    $exn := false;
    return;

  $bb57:
    assume {:partition} $i281 == 1;
    $p56 := arg;
    call _ZN4uORB11PublicationI13tecs_status_sED2Ev($p56);
    $exn := false;
    return;

  $bb58:
    assume {:partition} $i282 == 1;
    $p57 := arg;
    call _ZThn32_N4uORB11PublicationI13tecs_status_sED1Ev($p57);
    $exn := false;
    return;

  $bb59:
    assume {:partition} $i283 == 1;
    $p58 := arg;
    call _ZN4uORB11PublicationI13tecs_status_sED0Ev($p58);
    $exn := false;
    return;

  $bb60:
    assume {:partition} $i284 == 1;
    $p59 := arg;
    call _ZThn32_N4uORB11PublicationI13tecs_status_sED0Ev($p59);
    $exn := false;
    return;

  $bb61:
    assume {:partition} $i285 == 1;
    $p60 := arg;
    call _ZN4uORB11PublicationI13tecs_status_sE6updateEv($p60);
    $exn := false;
    return;

  $bb62:
    assume {:partition} $i286 == 1;
    $p61 := arg;
    call _ZN4uORB11PublicationI13rc_channels_sED2Ev($p61);
    $exn := false;
    return;

  $bb63:
    assume {:partition} $i287 == 1;
    $p62 := arg;
    call _ZThn32_N4uORB11PublicationI13rc_channels_sED1Ev($p62);
    $exn := false;
    return;

  $bb64:
    assume {:partition} $i288 == 1;
    $p63 := arg;
    call _ZN4uORB11PublicationI13rc_channels_sED0Ev($p63);
    $exn := false;
    return;

  $bb65:
    assume {:partition} $i289 == 1;
    $p64 := arg;
    call _ZThn32_N4uORB11PublicationI13rc_channels_sED0Ev($p64);
    $exn := false;
    return;

  $bb66:
    assume {:partition} $i290 == 1;
    $p65 := arg;
    call _ZN4uORB11PublicationI13rc_channels_sE6updateEv($p65);
    $exn := false;
    return;

  $bb67:
    assume {:partition} $i291 == 1;
    $p66 := arg;
    call _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev($p66);
    $exn := false;
    return;

  $bb68:
    assume {:partition} $i292 == 1;
    $p67 := arg;
    call _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED1Ev($p67);
    $exn := false;
    return;

  $bb69:
    assume {:partition} $i293 == 1;
    $p68 := arg;
    call _ZN4uORB11PublicationI22filtered_bottom_flow_sED0Ev($p68);
    $exn := false;
    return;

  $bb70:
    assume {:partition} $i294 == 1;
    $p69 := arg;
    call _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED0Ev($p69);
    $exn := false;
    return;

  $bb71:
    assume {:partition} $i295 == 1;
    $p70 := arg;
    call _ZN4uORB11PublicationI22filtered_bottom_flow_sE6updateEv($p70);
    $exn := false;
    return;

  $bb72:
    assume {:partition} $i296 == 1;
    $p71 := arg;
    call _ZN4uORB15PublicationBaseD2Ev($p71);
    $exn := false;
    return;

  $bb73:
    assume {:partition} $i297 == 1;
    $p72 := arg;
    call _ZN4uORB15PublicationBaseD0Ev($p72);
    $exn := false;
    return;

  $bb74:
    assume {:partition} $i298 == 1;
    $p73 := arg;
    call _ZN4uORB12SubscriptionI18parameter_update_sED2Ev($p73);
    $exn := false;
    return;

  $bb75:
    assume {:partition} $i299 == 1;
    $p74 := arg;
    call _ZThn24_N4uORB12SubscriptionI18parameter_update_sED1Ev($p74);
    $exn := false;
    return;

  $bb76:
    assume {:partition} $i300 == 1;
    $p75 := arg;
    call _ZN4uORB12SubscriptionI18parameter_update_sED0Ev($p75);
    $exn := false;
    return;

  $bb77:
    assume {:partition} $i301 == 1;
    $p76 := arg;
    call _ZThn24_N4uORB12SubscriptionI18parameter_update_sED0Ev($p76);
    $exn := false;
    return;

  $bb78:
    assume {:partition} $i302 == 1;
    $p77 := arg;
    call _ZN4uORB12SubscriptionI18parameter_update_sE6updateEv($p77);
    $exn := false;
    return;

  $bb79:
    assume {:partition} $i303 == 1;
    $p78 := arg;
    call _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev($p78);
    $exn := false;
    return;

  $bb80:
    assume {:partition} $i304 == 1;
    $p79 := arg;
    call _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED1Ev($p79);
    $exn := false;
    return;

  $bb81:
    assume {:partition} $i305 == 1;
    $p80 := arg;
    call _ZN4uORB12SubscriptionI19actuator_controls_sED0Ev($p80);
    $exn := false;
    return;

  $bb82:
    assume {:partition} $i306 == 1;
    $p81 := arg;
    call _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED0Ev($p81);
    $exn := false;
    return;

  $bb83:
    assume {:partition} $i307 == 1;
    $p82 := arg;
    call _ZN4uORB12SubscriptionI19actuator_controls_sE6updateEv($p82);
    $exn := false;
    return;

  $bb84:
    assume {:partition} $i308 == 1;
    $p83 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev($p83);
    $exn := false;
    return;

  $bb85:
    assume {:partition} $i309 == 1;
    $p84 := arg;
    call _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED1Ev($p84);
    $exn := false;
    return;

  $bb86:
    assume {:partition} $i310 == 1;
    $p85 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_gps_position_sED0Ev($p85);
    $exn := false;
    return;

  $bb87:
    assume {:partition} $i311 == 1;
    $p86 := arg;
    call _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED0Ev($p86);
    $exn := false;
    return;

  $bb88:
    assume {:partition} $i312 == 1;
    $p87 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_gps_position_sE6updateEv($p87);
    $exn := false;
    return;

  $bb89:
    assume {:partition} $i313 == 1;
    $p88 := arg;
    call _ZN4uORB12SubscriptionI16satellite_info_sED2Ev($p88);
    $exn := false;
    return;

  $bb90:
    assume {:partition} $i314 == 1;
    $p89 := arg;
    call _ZThn24_N4uORB12SubscriptionI16satellite_info_sED1Ev($p89);
    $exn := false;
    return;

  $bb91:
    assume {:partition} $i315 == 1;
    $p90 := arg;
    call _ZN4uORB12SubscriptionI16satellite_info_sED0Ev($p90);
    $exn := false;
    return;

  $bb92:
    assume {:partition} $i316 == 1;
    $p91 := arg;
    call _ZThn24_N4uORB12SubscriptionI16satellite_info_sED0Ev($p91);
    $exn := false;
    return;

  $bb93:
    assume {:partition} $i317 == 1;
    $p92 := arg;
    call _ZN4uORB12SubscriptionI16satellite_info_sE6updateEv($p92);
    $exn := false;
    return;

  $bb94:
    assume {:partition} $i318 == 1;
    $p93 := arg;
    call _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev($p93);
    $exn := false;
    return;

  $bb95:
    assume {:partition} $i319 == 1;
    $p94 := arg;
    call _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED1Ev($p94);
    $exn := false;
    return;

  $bb96:
    assume {:partition} $i320 == 1;
    $p95 := arg;
    call _ZN4uORB12SubscriptionI17sensor_combined_sED0Ev($p95);
    $exn := false;
    return;

  $bb97:
    assume {:partition} $i321 == 1;
    $p96 := arg;
    call _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED0Ev($p96);
    $exn := false;
    return;

  $bb98:
    assume {:partition} $i322 == 1;
    $p97 := arg;
    call _ZN4uORB12SubscriptionI17sensor_combined_sE6updateEv($p97);
    $exn := false;
    return;

  $bb99:
    assume {:partition} $i323 == 1;
    $p98 := arg;
    call _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev($p98);
    $exn := false;
    return;

  $bb100:
    assume {:partition} $i324 == 1;
    $p99 := arg;
    call _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED1Ev($p99);
    $exn := false;
    return;

  $bb101:
    assume {:partition} $i325 == 1;
    $p100 := arg;
    call _ZN4uORB12SubscriptionI12hil_sensor_sED0Ev($p100);
    $exn := false;
    return;

  $bb102:
    assume {:partition} $i326 == 1;
    $p101 := arg;
    call _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED0Ev($p101);
    $exn := false;
    return;

  $bb103:
    assume {:partition} $i327 == 1;
    $p102 := arg;
    call _ZN4uORB12SubscriptionI12hil_sensor_sE6updateEv($p102);
    $exn := false;
    return;

  $bb104:
    assume {:partition} $i328 == 1;
    $p103 := arg;
    call _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev($p103);
    $exn := false;
    return;

  $bb105:
    assume {:partition} $i329 == 1;
    $p104 := arg;
    call _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED1Ev($p104);
    $exn := false;
    return;

  $bb106:
    assume {:partition} $i330 == 1;
    $p105 := arg;
    call _ZN4uORB12SubscriptionI18vehicle_attitude_sED0Ev($p105);
    $exn := false;
    return;

  $bb107:
    assume {:partition} $i331 == 1;
    $p106 := arg;
    call _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED0Ev($p106);
    $exn := false;
    return;

  $bb108:
    assume {:partition} $i332 == 1;
    $p107 := arg;
    call _ZN4uORB12SubscriptionI18vehicle_attitude_sE6updateEv($p107);
    $exn := false;
    return;

  $bb109:
    assume {:partition} $i333 == 1;
    $p108 := arg;
    call _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev($p108);
    $exn := false;
    return;

  $bb110:
    assume {:partition} $i334 == 1;
    $p109 := arg;
    call _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED1Ev($p109);
    $exn := false;
    return;

  $bb111:
    assume {:partition} $i335 == 1;
    $p110 := arg;
    call _ZN4uORB12SubscriptionI25vehicle_global_position_sED0Ev($p110);
    $exn := false;
    return;

  $bb112:
    assume {:partition} $i336 == 1;
    $p111 := arg;
    call _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED0Ev($p111);
    $exn := false;
    return;

  $bb113:
    assume {:partition} $i337 == 1;
    $p112 := arg;
    call _ZN4uORB12SubscriptionI25vehicle_global_position_sE6updateEv($p112);
    $exn := false;
    return;

  $bb114:
    assume {:partition} $i338 == 1;
    $p113 := arg;
    call _ZN4uORB12SubscriptionI10encoders_sED2Ev($p113);
    $exn := false;
    return;

  $bb115:
    assume {:partition} $i339 == 1;
    $p114 := arg;
    call _ZThn24_N4uORB12SubscriptionI10encoders_sED1Ev($p114);
    $exn := false;
    return;

  $bb116:
    assume {:partition} $i340 == 1;
    $p115 := arg;
    call _ZN4uORB12SubscriptionI10encoders_sED0Ev($p115);
    $exn := false;
    return;

  $bb117:
    assume {:partition} $i341 == 1;
    $p116 := arg;
    call _ZThn24_N4uORB12SubscriptionI10encoders_sED0Ev($p116);
    $exn := false;
    return;

  $bb118:
    assume {:partition} $i342 == 1;
    $p117 := arg;
    call _ZN4uORB12SubscriptionI10encoders_sE6updateEv($p117);
    $exn := false;
    return;

  $bb119:
    assume {:partition} $i343 == 1;
    $p118 := arg;
    call _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev($p118);
    $exn := false;
    return;

  $bb120:
    assume {:partition} $i344 == 1;
    $p119 := arg;
    call _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED1Ev($p119);
    $exn := false;
    return;

  $bb121:
    assume {:partition} $i345 == 1;
    $p120 := arg;
    call _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev($p120);
    $exn := false;
    return;

  $bb122:
    assume {:partition} $i346 == 1;
    $p121 := arg;
    call _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev($p121);
    $exn := false;
    return;

  $bb123:
    assume {:partition} $i347 == 1;
    $p122 := arg;
    call _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE6updateEv($p122);
    $exn := false;
    return;

  $bb124:
    assume {:partition} $i348 == 1;
    $p123 := arg;
    call _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev($p123);
    $exn := false;
    return;

  $bb125:
    assume {:partition} $i349 == 1;
    $p124 := arg;
    call _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED1Ev($p124);
    $exn := false;
    return;

  $bb126:
    assume {:partition} $i350 == 1;
    $p125 := arg;
    call _ZN4uORB12SubscriptionI16vehicle_status_sED0Ev($p125);
    $exn := false;
    return;

  $bb127:
    assume {:partition} $i351 == 1;
    $p126 := arg;
    call _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED0Ev($p126);
    $exn := false;
    return;

  $bb128:
    assume {:partition} $i352 == 1;
    $p127 := arg;
    call _ZN4uORB12SubscriptionI16vehicle_status_sE6updateEv($p127);
    $exn := false;
    return;

  $bb129:
    assume {:partition} $i353 == 1;
    $p128 := arg;
    call _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev($p128);
    $exn := false;
    return;

  $bb130:
    assume {:partition} $i354 == 1;
    $p129 := arg;
    call _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED1Ev($p129);
    $exn := false;
    return;

  $bb131:
    assume {:partition} $i355 == 1;
    $p130 := arg;
    call _ZN4uORB12SubscriptionI25manual_control_setpoint_sED0Ev($p130);
    $exn := false;
    return;

  $bb132:
    assume {:partition} $i356 == 1;
    $p131 := arg;
    call _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED0Ev($p131);
    $exn := false;
    return;

  $bb133:
    assume {:partition} $i357 == 1;
    $p132 := arg;
    call _ZN4uORB12SubscriptionI25manual_control_setpoint_sE6updateEv($p132);
    $exn := false;
    return;

  $bb134:
    assume {:partition} $i358 == 1;
    $p133 := arg;
    call _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev($p133);
    $exn := false;
    return;

  $bb135:
    assume {:partition} $i359 == 1;
    $p134 := arg;
    call _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED1Ev($p134);
    $exn := false;
    return;

  $bb136:
    assume {:partition} $i360 == 1;
    $p135 := arg;
    call _ZN4uORB12SubscriptionI13mavlink_log_sED0Ev($p135);
    $exn := false;
    return;

  $bb137:
    assume {:partition} $i361 == 1;
    $p136 := arg;
    call _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED0Ev($p136);
    $exn := false;
    return;

  $bb138:
    assume {:partition} $i362 == 1;
    $p137 := arg;
    call _ZN4uORB12SubscriptionI13mavlink_log_sE6updateEv($p137);
    $exn := false;
    return;

  $bb139:
    assume {:partition} $i363 == 1;
    $p138 := arg;
    call _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev($p138);
    $exn := false;
    return;

  $bb140:
    assume {:partition} $i364 == 1;
    $p139 := arg;
    call _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED1Ev($p139);
    $exn := false;
    return;

  $bb141:
    assume {:partition} $i365 == 1;
    $p140 := arg;
    call _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev($p140);
    $exn := false;
    return;

  $bb142:
    assume {:partition} $i366 == 1;
    $p141 := arg;
    call _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev($p141);
    $exn := false;
    return;

  $bb143:
    assume {:partition} $i367 == 1;
    $p142 := arg;
    call _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE6updateEv($p142);
    $exn := false;
    return;

  $bb144:
    assume {:partition} $i368 == 1;
    $p143 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev($p143);
    $exn := false;
    return;

  $bb145:
    assume {:partition} $i369 == 1;
    $p144 := arg;
    call _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED1Ev($p144);
    $exn := false;
    return;

  $bb146:
    assume {:partition} $i370 == 1;
    $p145 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_local_position_sED0Ev($p145);
    $exn := false;
    return;

  $bb147:
    assume {:partition} $i371 == 1;
    $p146 := arg;
    call _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED0Ev($p146);
    $exn := false;
    return;

  $bb148:
    assume {:partition} $i372 == 1;
    $p147 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_local_position_sE6updateEv($p147);
    $exn := false;
    return;

  $bb149:
    assume {:partition} $i373 == 1;
    $p148 := arg;
    call _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev($p148);
    $exn := false;
    return;

  $bb150:
    assume {:partition} $i374 == 1;
    $p149 := arg;
    call _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED1Ev($p149);
    $exn := false;
    return;

  $bb151:
    assume {:partition} $i375 == 1;
    $p150 := arg;
    call _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev($p150);
    $exn := false;
    return;

  $bb152:
    assume {:partition} $i376 == 1;
    $p151 := arg;
    call _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev($p151);
    $exn := false;
    return;

  $bb153:
    assume {:partition} $i377 == 1;
    $p152 := arg;
    call _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE6updateEv($p152);
    $exn := false;
    return;

  $bb154:
    assume {:partition} $i378 == 1;
    $p153 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev($p153);
    $exn := false;
    return;

  $bb155:
    assume {:partition} $i379 == 1;
    $p154 := arg;
    call _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED1Ev($p154);
    $exn := false;
    return;

  $bb156:
    assume {:partition} $i380 == 1;
    $p155 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev($p155);
    $exn := false;
    return;

  $bb157:
    assume {:partition} $i381 == 1;
    $p156 := arg;
    call _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev($p156);
    $exn := false;
    return;

  $bb158:
    assume {:partition} $i382 == 1;
    $p157 := arg;
    call _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE6updateEv($p157);
    $exn := false;
    return;

  $bb159:
    assume {:partition} $i383 == 1;
    $p158 := arg;
    call _ZN4uORB12SubscriptionI13rc_channels_sED2Ev($p158);
    $exn := false;
    return;

  $bb160:
    assume {:partition} $i384 == 1;
    $p159 := arg;
    call _ZThn24_N4uORB12SubscriptionI13rc_channels_sED1Ev($p159);
    $exn := false;
    return;

  $bb161:
    assume {:partition} $i385 == 1;
    $p160 := arg;
    call _ZN4uORB12SubscriptionI13rc_channels_sED0Ev($p160);
    $exn := false;
    return;

  $bb162:
    assume {:partition} $i386 == 1;
    $p161 := arg;
    call _ZThn24_N4uORB12SubscriptionI13rc_channels_sED0Ev($p161);
    $exn := false;
    return;

  $bb163:
    assume {:partition} $i387 == 1;
    $p162 := arg;
    call _ZN4uORB12SubscriptionI13rc_channels_sE6updateEv($p162);
    $exn := false;
    return;

  $bb164:
    assume {:partition} $i388 == 1;
    $p163 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev($p163);
    $exn := false;
    return;

  $bb165:
    assume {:partition} $i389 == 1;
    $p164 := arg;
    call _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED1Ev($p164);
    $exn := false;
    return;

  $bb166:
    assume {:partition} $i390 == 1;
    $p165 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_control_mode_sED0Ev($p165);
    $exn := false;
    return;

  $bb167:
    assume {:partition} $i391 == 1;
    $p166 := arg;
    call _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED0Ev($p166);
    $exn := false;
    return;

  $bb168:
    assume {:partition} $i392 == 1;
    $p167 := arg;
    call _ZN4uORB12SubscriptionI22vehicle_control_mode_sE6updateEv($p167);
    $exn := false;
    return;

  $bb169:
    assume {:partition} $i393 == 1;
    $p168 := arg;
    call _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev($p168);
    $exn := false;
    return;

  $bb170:
    assume {:partition} $i394 == 1;
    $p169 := arg;
    call _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED1Ev($p169);
    $exn := false;
    return;

  $bb171:
    assume {:partition} $i395 == 1;
    $p170 := arg;
    call _ZN4uORB12SubscriptionI16actuator_armed_sED0Ev($p170);
    $exn := false;
    return;

  $bb172:
    assume {:partition} $i396 == 1;
    $p171 := arg;
    call _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED0Ev($p171);
    $exn := false;
    return;

  $bb173:
    assume {:partition} $i397 == 1;
    $p172 := arg;
    call _ZN4uORB12SubscriptionI16actuator_armed_sE6updateEv($p172);
    $exn := false;
    return;

  $bb174:
    assume {:partition} $i398 == 1;
    $p173 := arg;
    call _ZN4uORB12SubscriptionI16battery_status_sED2Ev($p173);
    $exn := false;
    return;

  $bb175:
    assume {:partition} $i399 == 1;
    $p174 := arg;
    call _ZThn24_N4uORB12SubscriptionI16battery_status_sED1Ev($p174);
    $exn := false;
    return;

  $bb176:
    assume {:partition} $i400 == 1;
    $p175 := arg;
    call _ZN4uORB12SubscriptionI16battery_status_sED0Ev($p175);
    $exn := false;
    return;

  $bb177:
    assume {:partition} $i401 == 1;
    $p176 := arg;
    call _ZThn24_N4uORB12SubscriptionI16battery_status_sED0Ev($p176);
    $exn := false;
    return;

  $bb178:
    assume {:partition} $i402 == 1;
    $p177 := arg;
    call _ZN4uORB12SubscriptionI16battery_status_sE6updateEv($p177);
    $exn := false;
    return;

  $bb179:
    assume {:partition} $i403 == 1;
    $p178 := arg;
    call _ZN4uORB12SubscriptionI15home_position_sED2Ev($p178);
    $exn := false;
    return;

  $bb180:
    assume {:partition} $i404 == 1;
    $p179 := arg;
    call _ZThn24_N4uORB12SubscriptionI15home_position_sED1Ev($p179);
    $exn := false;
    return;

  $bb181:
    assume {:partition} $i405 == 1;
    $p180 := arg;
    call _ZN4uORB12SubscriptionI15home_position_sED0Ev($p180);
    $exn := false;
    return;

  $bb182:
    assume {:partition} $i406 == 1;
    $p181 := arg;
    call _ZThn24_N4uORB12SubscriptionI15home_position_sED0Ev($p181);
    $exn := false;
    return;

  $bb183:
    assume {:partition} $i407 == 1;
    $p182 := arg;
    call _ZN4uORB12SubscriptionI15home_position_sE6updateEv($p182);
    $exn := false;
    return;

  $bb184:
    assume {:partition} $i408 == 1;
    $p183 := arg;
    call _ZN4uORB12SubscriptionI14optical_flow_sED2Ev($p183);
    $exn := false;
    return;

  $bb185:
    assume {:partition} $i409 == 1;
    $p184 := arg;
    call _ZThn24_N4uORB12SubscriptionI14optical_flow_sED1Ev($p184);
    $exn := false;
    return;

  $bb186:
    assume {:partition} $i410 == 1;
    $p185 := arg;
    call _ZN4uORB12SubscriptionI14optical_flow_sED0Ev($p185);
    $exn := false;
    return;

  $bb187:
    assume {:partition} $i411 == 1;
    $p186 := arg;
    call _ZThn24_N4uORB12SubscriptionI14optical_flow_sED0Ev($p186);
    $exn := false;
    return;

  $bb188:
    assume {:partition} $i412 == 1;
    $p187 := arg;
    call _ZN4uORB12SubscriptionI14optical_flow_sE6updateEv($p187);
    $exn := false;
    return;

  $bb189:
    assume {:partition} $i413 == 1;
    $p188 := arg;
    call _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev($p188);
    $exn := false;
    return;

  $bb190:
    assume {:partition} $i414 == 1;
    $p189 := arg;
    call _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED1Ev($p189);
    $exn := false;
    return;

  $bb191:
    assume {:partition} $i415 == 1;
    $p190 := arg;
    call _ZN4uORB12SubscriptionI17distance_sensor_sED0Ev($p190);
    $exn := false;
    return;

  $bb192:
    assume {:partition} $i416 == 1;
    $p191 := arg;
    call _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED0Ev($p191);
    $exn := false;
    return;

  $bb193:
    assume {:partition} $i417 == 1;
    $p192 := arg;
    call _ZN4uORB12SubscriptionI17distance_sensor_sE6updateEv($p192);
    $exn := false;
    return;

  $bb194:
    assume {:partition} $i418 == 1;
    $p193 := arg;
    call _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev($p193);
    $exn := false;
    return;

  $bb195:
    assume {:partition} $i419 == 1;
    $p194 := arg;
    call _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED1Ev($p194);
    $exn := false;
    return;

  $bb196:
    assume {:partition} $i420 == 1;
    $p195 := arg;
    call _ZN4uORB12SubscriptionI15att_pos_mocap_sED0Ev($p195);
    $exn := false;
    return;

  $bb197:
    assume {:partition} $i421 == 1;
    $p196 := arg;
    call _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED0Ev($p196);
    $exn := false;
    return;

  $bb198:
    assume {:partition} $i422 == 1;
    $p197 := arg;
    call _ZN4uORB12SubscriptionI15att_pos_mocap_sE6updateEv($p197);
    $exn := false;
    return;

  $bb199:
    assume {:partition} $i423 == 1;
    $p198 := arg;
    call _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev($p198);
    $exn := false;
    return;

  $bb200:
    assume {:partition} $i424 == 1;
    $p199 := arg;
    call _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED1Ev($p199);
    $exn := false;
    return;

  $bb201:
    assume {:partition} $i425 == 1;
    $p200 := arg;
    call _ZN4uORB12SubscriptionI26vision_position_estimate_sED0Ev($p200);
    $exn := false;
    return;

  $bb202:
    assume {:partition} $i426 == 1;
    $p201 := arg;
    call _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED0Ev($p201);
    $exn := false;
    return;

  $bb203:
    assume {:partition} $i427 == 1;
    $p202 := arg;
    call _ZN4uORB12SubscriptionI26vision_position_estimate_sE6updateEv($p202);
    $exn := false;
    return;

  $bb204:
    assume {:partition} $i428 == 1;
    $p203 := arg;
    call _ZN4uORB12SubscriptionI15control_state_sED2Ev($p203);
    $exn := false;
    return;

  $bb205:
    assume {:partition} $i429 == 1;
    $p204 := arg;
    call _ZThn24_N4uORB12SubscriptionI15control_state_sED1Ev($p204);
    $exn := false;
    return;

  $bb206:
    assume {:partition} $i430 == 1;
    $p205 := arg;
    call _ZN4uORB12SubscriptionI15control_state_sED0Ev($p205);
    $exn := false;
    return;

  $bb207:
    assume {:partition} $i431 == 1;
    $p206 := arg;
    call _ZThn24_N4uORB12SubscriptionI15control_state_sED0Ev($p206);
    $exn := false;
    return;

  $bb208:
    assume {:partition} $i432 == 1;
    $p207 := arg;
    call _ZN4uORB12SubscriptionI15control_state_sE6updateEv($p207);
    $exn := false;
    return;

  $bb209:
    assume {:partition} $i433 == 1;
    $p208 := arg;
    call _ZN4uORB16SubscriptionBaseD2Ev($p208);
    $exn := false;
    return;

  $bb210:
    assume {:partition} $i434 == 1;
    $p209 := arg;
    call _ZN4uORB16SubscriptionBaseD0Ev($p209);
    $exn := false;
    return;

  $bb211:
    assume {:partition} $i435 == 1;
    $p210 := arg;
    call _ZN4uORB10DeviceNodeD2Ev($p210);
    $exn := false;
    return;

  $bb212:
    assume {:partition} $i436 == 1;
    $p211 := arg;
    call _ZN4uORB10DeviceNodeD0Ev($p211);
    $exn := false;
    return;

  $bb213:
    assume {:partition} $i437 == 1;
    call _ZN4uORB12DeviceMasterD2Ev(arg);
    $exn := false;
    return;

  $bb214:
    assume {:partition} $i438 == 1;
    call _ZN4uORB12DeviceMasterD0Ev(arg);
    $exn := false;
    return;

  $bb215:
    assume {:partition} $i439 == 1;
    $p212 := arg;
    call _ZN4uORB7ManagerC2Ev($p212);
    $exn := false;
    return;

  $bb216:
    assume {:partition} $i440 == 1;
    $p213 := arg;
    call _ZN4uORB15PublicationNodeD2Ev($p213);
    $exn := false;
    return;

  $bb217:
    assume {:partition} $i441 == 1;
    $p214 := arg;
    call _ZN4uORB16SubscriptionNodeD2Ev($p214);
    $exn := false;
    return;

  $bb218:
    assume {:partition} $i442 == 1;
    $p215 := arg;
    call _ZN4uORB15PublicationNodeD0Ev($p215);
    $exn := false;
    return;

  $bb219:
    assume {:partition} $i443 == 1;
    $p216 := arg;
    call _ZThn32_N4uORB15PublicationNodeD0Ev($p216);
    $exn := false;
    return;

  $bb220:
    assume {:partition} $i444 == 1;
    $p217 := arg;
    call _ZThn32_N4uORB15PublicationNodeD1Ev($p217);
    $exn := false;
    return;

  $bb221:
    assume {:partition} $i445 == 1;
    $p218 := arg;
    call _ZN8ListNodeIPN4uORB15PublicationNodeEED0Ev($p218);
    $exn := false;
    return;

  $bb222:
    assume {:partition} $i446 == 1;
    $p219 := arg;
    call _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev($p219);
    $exn := false;
    return;

  $bb223:
    assume {:partition} $i447 == 1;
    $p220 := arg;
    call _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev($p220);
    $exn := false;
    return;

  $bb224:
    assume {:partition} $i448 == 1;
    $p221 := arg;
    call _ZN4uORB16SubscriptionNodeD0Ev($p221);
    $exn := false;
    return;

  $bb225:
    assume {:partition} $i449 == 1;
    $p222 := arg;
    call _ZThn24_N4uORB16SubscriptionNodeD0Ev($p222);
    $exn := false;
    return;

  $bb226:
    assume {:partition} $i450 == 1;
    $p223 := arg;
    call _ZThn24_N4uORB16SubscriptionNodeD1Ev($p223);
    $exn := false;
    return;

  $bb227:
    assume {:partition} $i451 == 1;
    $p224 := arg;
    call _ZN8ListNodeIPN4uORB16SubscriptionNodeEED0Ev($p224);
    $exn := false;
    return;

  $bb228:
    assume {:partition} $i452 == 1;
    $p225 := arg;
    call _ZNSt3mapISsPN4uORB10DeviceNodeESt4lessISsESaISt4pairIKSsS2_EEED2Ev($p225);
    $exn := false;
    return;

  $bb229:
    assume {:partition} !($i226 == 1);
    assume false;
    goto $bb230;

  $bb230:
    assume {:partition} !($i227 == 1);
    $i226 := (if _ZN4uORB11PublicationI18vehicle_attitude_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i226} true;
    goto $bb2, $bb229;

  $bb231:
    assume {:partition} !($i228 == 1);
    $i227 := (if _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i227} true;
    goto $bb3, $bb230;

  $bb232:
    assume {:partition} !($i229 == 1);
    $i228 := (if _ZN4uORB11PublicationI18vehicle_attitude_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i228} true;
    goto $bb4, $bb231;

  $bb233:
    assume {:partition} !($i230 == 1);
    $i229 := (if _ZThn32_N4uORB11PublicationI18vehicle_attitude_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i229} true;
    goto $bb5, $bb232;

  $bb234:
    assume {:partition} !($i231 == 1);
    $i230 := (if _ZN4uORB11PublicationI18vehicle_attitude_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i230} true;
    goto $bb6, $bb233;

  $bb235:
    assume {:partition} !($i232 == 1);
    $i231 := (if _ZN4uORB11PublicationI24vehicle_local_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i231} true;
    goto $bb7, $bb234;

  $bb236:
    assume {:partition} !($i233 == 1);
    $i232 := (if _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i232} true;
    goto $bb8, $bb235;

  $bb237:
    assume {:partition} !($i234 == 1);
    $i233 := (if _ZN4uORB11PublicationI24vehicle_local_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i233} true;
    goto $bb9, $bb236;

  $bb238:
    assume {:partition} !($i235 == 1);
    $i234 := (if _ZThn32_N4uORB11PublicationI24vehicle_local_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i234} true;
    goto $bb10, $bb237;

  $bb239:
    assume {:partition} !($i236 == 1);
    $i235 := (if _ZN4uORB11PublicationI24vehicle_local_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i235} true;
    goto $bb11, $bb238;

  $bb240:
    assume {:partition} !($i237 == 1);
    $i236 := (if _ZN4uORB11PublicationI25vehicle_global_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i236} true;
    goto $bb12, $bb239;

  $bb241:
    assume {:partition} !($i238 == 1);
    $i237 := (if _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i237} true;
    goto $bb13, $bb240;

  $bb242:
    assume {:partition} !($i239 == 1);
    $i238 := (if _ZN4uORB11PublicationI25vehicle_global_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i238} true;
    goto $bb14, $bb241;

  $bb243:
    assume {:partition} !($i240 == 1);
    $i239 := (if _ZThn32_N4uORB11PublicationI25vehicle_global_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i239} true;
    goto $bb15, $bb242;

  $bb244:
    assume {:partition} !($i241 == 1);
    $i240 := (if _ZN4uORB11PublicationI25vehicle_global_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i240} true;
    goto $bb16, $bb243;

  $bb245:
    assume {:partition} !($i242 == 1);
    $i241 := (if _ZN4uORB11PublicationI17debug_key_value_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i241} true;
    goto $bb17, $bb244;

  $bb246:
    assume {:partition} !($i243 == 1);
    $i242 := (if _ZThn32_N4uORB11PublicationI17debug_key_value_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i242} true;
    goto $bb18, $bb245;

  $bb247:
    assume {:partition} !($i244 == 1);
    $i243 := (if _ZN4uORB11PublicationI17debug_key_value_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i243} true;
    goto $bb19, $bb246;

  $bb248:
    assume {:partition} !($i245 == 1);
    $i244 := (if _ZThn32_N4uORB11PublicationI17debug_key_value_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i244} true;
    goto $bb20, $bb247;

  $bb249:
    assume {:partition} !($i246 == 1);
    $i245 := (if _ZN4uORB11PublicationI17debug_key_value_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i245} true;
    goto $bb21, $bb248;

  $bb250:
    assume {:partition} !($i247 == 1);
    $i246 := (if _ZN4uORB11PublicationI19actuator_controls_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i246} true;
    goto $bb22, $bb249;

  $bb251:
    assume {:partition} !($i248 == 1);
    $i247 := (if _ZThn32_N4uORB11PublicationI19actuator_controls_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i247} true;
    goto $bb23, $bb250;

  $bb252:
    assume {:partition} !($i249 == 1);
    $i248 := (if _ZN4uORB11PublicationI19actuator_controls_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i248} true;
    goto $bb24, $bb251;

  $bb253:
    assume {:partition} !($i250 == 1);
    $i249 := (if _ZThn32_N4uORB11PublicationI19actuator_controls_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i249} true;
    goto $bb25, $bb252;

  $bb254:
    assume {:partition} !($i251 == 1);
    $i250 := (if _ZN4uORB11PublicationI19actuator_controls_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i250} true;
    goto $bb26, $bb253;

  $bb255:
    assume {:partition} !($i252 == 1);
    $i251 := (if _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i251} true;
    goto $bb27, $bb254;

  $bb256:
    assume {:partition} !($i253 == 1);
    $i252 := (if _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i252} true;
    goto $bb28, $bb255;

  $bb257:
    assume {:partition} !($i254 == 1);
    $i253 := (if _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i253} true;
    goto $bb29, $bb256;

  $bb258:
    assume {:partition} !($i255 == 1);
    $i254 := (if _ZThn32_N4uORB11PublicationI34vehicle_global_velocity_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i254} true;
    goto $bb30, $bb257;

  $bb259:
    assume {:partition} !($i256 == 1);
    $i255 := (if _ZN4uORB11PublicationI34vehicle_global_velocity_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i255} true;
    goto $bb31, $bb258;

  $bb260:
    assume {:partition} !($i257 == 1);
    $i256 := (if _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i256} true;
    goto $bb32, $bb259;

  $bb261:
    assume {:partition} !($i258 == 1);
    $i257 := (if _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i257} true;
    goto $bb33, $bb260;

  $bb262:
    assume {:partition} !($i259 == 1);
    $i258 := (if _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i258} true;
    goto $bb34, $bb261;

  $bb263:
    assume {:partition} !($i260 == 1);
    $i259 := (if _ZThn32_N4uORB11PublicationI27vehicle_attitude_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i259} true;
    goto $bb35, $bb262;

  $bb264:
    assume {:partition} !($i261 == 1);
    $i260 := (if _ZN4uORB11PublicationI27vehicle_attitude_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i260} true;
    goto $bb36, $bb263;

  $bb265:
    assume {:partition} !($i262 == 1);
    $i261 := (if _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i261} true;
    goto $bb37, $bb264;

  $bb266:
    assume {:partition} !($i263 == 1);
    $i262 := (if _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i262} true;
    goto $bb38, $bb265;

  $bb267:
    assume {:partition} !($i264 == 1);
    $i263 := (if _ZN4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i263} true;
    goto $bb39, $bb266;

  $bb268:
    assume {:partition} !($i265 == 1);
    $i264 := (if _ZThn32_N4uORB11PublicationI24vehicle_rates_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i264} true;
    goto $bb40, $bb267;

  $bb269:
    assume {:partition} !($i266 == 1);
    $i265 := (if _ZN4uORB11PublicationI24vehicle_rates_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i265} true;
    goto $bb41, $bb268;

  $bb270:
    assume {:partition} !($i267 == 1);
    $i266 := (if _ZN4uORB11PublicationI18actuator_outputs_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i266} true;
    goto $bb42, $bb269;

  $bb271:
    assume {:partition} !($i268 == 1);
    $i267 := (if _ZThn32_N4uORB11PublicationI18actuator_outputs_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i267} true;
    goto $bb43, $bb270;

  $bb272:
    assume {:partition} !($i269 == 1);
    $i268 := (if _ZN4uORB11PublicationI18actuator_outputs_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i268} true;
    goto $bb44, $bb271;

  $bb273:
    assume {:partition} !($i270 == 1);
    $i269 := (if _ZThn32_N4uORB11PublicationI18actuator_outputs_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i269} true;
    goto $bb45, $bb272;

  $bb274:
    assume {:partition} !($i271 == 1);
    $i270 := (if _ZN4uORB11PublicationI18actuator_outputs_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i270} true;
    goto $bb46, $bb273;

  $bb275:
    assume {:partition} !($i272 == 1);
    $i271 := (if _ZN4uORB11PublicationI17actuator_direct_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i271} true;
    goto $bb47, $bb274;

  $bb276:
    assume {:partition} !($i273 == 1);
    $i272 := (if _ZThn32_N4uORB11PublicationI17actuator_direct_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i272} true;
    goto $bb48, $bb275;

  $bb277:
    assume {:partition} !($i274 == 1);
    $i273 := (if _ZN4uORB11PublicationI17actuator_direct_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i273} true;
    goto $bb49, $bb276;

  $bb278:
    assume {:partition} !($i275 == 1);
    $i274 := (if _ZThn32_N4uORB11PublicationI17actuator_direct_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i274} true;
    goto $bb50, $bb277;

  $bb279:
    assume {:partition} !($i276 == 1);
    $i275 := (if _ZN4uORB11PublicationI17actuator_direct_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i275} true;
    goto $bb51, $bb278;

  $bb280:
    assume {:partition} !($i277 == 1);
    $i276 := (if _ZN4uORB11PublicationI10encoders_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i276} true;
    goto $bb52, $bb279;

  $bb281:
    assume {:partition} !($i278 == 1);
    $i277 := (if _ZThn32_N4uORB11PublicationI10encoders_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i277} true;
    goto $bb53, $bb280;

  $bb282:
    assume {:partition} !($i279 == 1);
    $i278 := (if _ZN4uORB11PublicationI10encoders_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i278} true;
    goto $bb54, $bb281;

  $bb283:
    assume {:partition} !($i280 == 1);
    $i279 := (if _ZThn32_N4uORB11PublicationI10encoders_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i279} true;
    goto $bb55, $bb282;

  $bb284:
    assume {:partition} !($i281 == 1);
    $i280 := (if _ZN4uORB11PublicationI10encoders_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i280} true;
    goto $bb56, $bb283;

  $bb285:
    assume {:partition} !($i282 == 1);
    $i281 := (if _ZN4uORB11PublicationI13tecs_status_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i281} true;
    goto $bb57, $bb284;

  $bb286:
    assume {:partition} !($i283 == 1);
    $i282 := (if _ZThn32_N4uORB11PublicationI13tecs_status_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i282} true;
    goto $bb58, $bb285;

  $bb287:
    assume {:partition} !($i284 == 1);
    $i283 := (if _ZN4uORB11PublicationI13tecs_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i283} true;
    goto $bb59, $bb286;

  $bb288:
    assume {:partition} !($i285 == 1);
    $i284 := (if _ZThn32_N4uORB11PublicationI13tecs_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i284} true;
    goto $bb60, $bb287;

  $bb289:
    assume {:partition} !($i286 == 1);
    $i285 := (if _ZN4uORB11PublicationI13tecs_status_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i285} true;
    goto $bb61, $bb288;

  $bb290:
    assume {:partition} !($i287 == 1);
    $i286 := (if _ZN4uORB11PublicationI13rc_channels_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i286} true;
    goto $bb62, $bb289;

  $bb291:
    assume {:partition} !($i288 == 1);
    $i287 := (if _ZThn32_N4uORB11PublicationI13rc_channels_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i287} true;
    goto $bb63, $bb290;

  $bb292:
    assume {:partition} !($i289 == 1);
    $i288 := (if _ZN4uORB11PublicationI13rc_channels_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i288} true;
    goto $bb64, $bb291;

  $bb293:
    assume {:partition} !($i290 == 1);
    $i289 := (if _ZThn32_N4uORB11PublicationI13rc_channels_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i289} true;
    goto $bb65, $bb292;

  $bb294:
    assume {:partition} !($i291 == 1);
    $i290 := (if _ZN4uORB11PublicationI13rc_channels_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i290} true;
    goto $bb66, $bb293;

  $bb295:
    assume {:partition} !($i292 == 1);
    $i291 := (if _ZN4uORB11PublicationI22filtered_bottom_flow_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i291} true;
    goto $bb67, $bb294;

  $bb296:
    assume {:partition} !($i293 == 1);
    $i292 := (if _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i292} true;
    goto $bb68, $bb295;

  $bb297:
    assume {:partition} !($i294 == 1);
    $i293 := (if _ZN4uORB11PublicationI22filtered_bottom_flow_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i293} true;
    goto $bb69, $bb296;

  $bb298:
    assume {:partition} !($i295 == 1);
    $i294 := (if _ZThn32_N4uORB11PublicationI22filtered_bottom_flow_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i294} true;
    goto $bb70, $bb297;

  $bb299:
    assume {:partition} !($i296 == 1);
    $i295 := (if _ZN4uORB11PublicationI22filtered_bottom_flow_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i295} true;
    goto $bb71, $bb298;

  $bb300:
    assume {:partition} !($i297 == 1);
    $i296 := (if _ZN4uORB15PublicationBaseD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i296} true;
    goto $bb72, $bb299;

  $bb301:
    assume {:partition} !($i298 == 1);
    $i297 := (if _ZN4uORB15PublicationBaseD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i297} true;
    goto $bb73, $bb300;

  $bb302:
    assume {:partition} !($i299 == 1);
    $i298 := (if _ZN4uORB12SubscriptionI18parameter_update_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i298} true;
    goto $bb74, $bb301;

  $bb303:
    assume {:partition} !($i300 == 1);
    $i299 := (if _ZThn24_N4uORB12SubscriptionI18parameter_update_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i299} true;
    goto $bb75, $bb302;

  $bb304:
    assume {:partition} !($i301 == 1);
    $i300 := (if _ZN4uORB12SubscriptionI18parameter_update_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i300} true;
    goto $bb76, $bb303;

  $bb305:
    assume {:partition} !($i302 == 1);
    $i301 := (if _ZThn24_N4uORB12SubscriptionI18parameter_update_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i301} true;
    goto $bb77, $bb304;

  $bb306:
    assume {:partition} !($i303 == 1);
    $i302 := (if _ZN4uORB12SubscriptionI18parameter_update_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i302} true;
    goto $bb78, $bb305;

  $bb307:
    assume {:partition} !($i304 == 1);
    $i303 := (if _ZN4uORB12SubscriptionI19actuator_controls_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i303} true;
    goto $bb79, $bb306;

  $bb308:
    assume {:partition} !($i305 == 1);
    $i304 := (if _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i304} true;
    goto $bb80, $bb307;

  $bb309:
    assume {:partition} !($i306 == 1);
    $i305 := (if _ZN4uORB12SubscriptionI19actuator_controls_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i305} true;
    goto $bb81, $bb308;

  $bb310:
    assume {:partition} !($i307 == 1);
    $i306 := (if _ZThn24_N4uORB12SubscriptionI19actuator_controls_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i306} true;
    goto $bb82, $bb309;

  $bb311:
    assume {:partition} !($i308 == 1);
    $i307 := (if _ZN4uORB12SubscriptionI19actuator_controls_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i307} true;
    goto $bb83, $bb310;

  $bb312:
    assume {:partition} !($i309 == 1);
    $i308 := (if _ZN4uORB12SubscriptionI22vehicle_gps_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i308} true;
    goto $bb84, $bb311;

  $bb313:
    assume {:partition} !($i310 == 1);
    $i309 := (if _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i309} true;
    goto $bb85, $bb312;

  $bb314:
    assume {:partition} !($i311 == 1);
    $i310 := (if _ZN4uORB12SubscriptionI22vehicle_gps_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i310} true;
    goto $bb86, $bb313;

  $bb315:
    assume {:partition} !($i312 == 1);
    $i311 := (if _ZThn24_N4uORB12SubscriptionI22vehicle_gps_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i311} true;
    goto $bb87, $bb314;

  $bb316:
    assume {:partition} !($i313 == 1);
    $i312 := (if _ZN4uORB12SubscriptionI22vehicle_gps_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i312} true;
    goto $bb88, $bb315;

  $bb317:
    assume {:partition} !($i314 == 1);
    $i313 := (if _ZN4uORB12SubscriptionI16satellite_info_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i313} true;
    goto $bb89, $bb316;

  $bb318:
    assume {:partition} !($i315 == 1);
    $i314 := (if _ZThn24_N4uORB12SubscriptionI16satellite_info_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i314} true;
    goto $bb90, $bb317;

  $bb319:
    assume {:partition} !($i316 == 1);
    $i315 := (if _ZN4uORB12SubscriptionI16satellite_info_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i315} true;
    goto $bb91, $bb318;

  $bb320:
    assume {:partition} !($i317 == 1);
    $i316 := (if _ZThn24_N4uORB12SubscriptionI16satellite_info_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i316} true;
    goto $bb92, $bb319;

  $bb321:
    assume {:partition} !($i318 == 1);
    $i317 := (if _ZN4uORB12SubscriptionI16satellite_info_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i317} true;
    goto $bb93, $bb320;

  $bb322:
    assume {:partition} !($i319 == 1);
    $i318 := (if _ZN4uORB12SubscriptionI17sensor_combined_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i318} true;
    goto $bb94, $bb321;

  $bb323:
    assume {:partition} !($i320 == 1);
    $i319 := (if _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i319} true;
    goto $bb95, $bb322;

  $bb324:
    assume {:partition} !($i321 == 1);
    $i320 := (if _ZN4uORB12SubscriptionI17sensor_combined_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i320} true;
    goto $bb96, $bb323;

  $bb325:
    assume {:partition} !($i322 == 1);
    $i321 := (if _ZThn24_N4uORB12SubscriptionI17sensor_combined_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i321} true;
    goto $bb97, $bb324;

  $bb326:
    assume {:partition} !($i323 == 1);
    $i322 := (if _ZN4uORB12SubscriptionI17sensor_combined_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i322} true;
    goto $bb98, $bb325;

  $bb327:
    assume {:partition} !($i324 == 1);
    $i323 := (if _ZN4uORB12SubscriptionI12hil_sensor_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i323} true;
    goto $bb99, $bb326;

  $bb328:
    assume {:partition} !($i325 == 1);
    $i324 := (if _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i324} true;
    goto $bb100, $bb327;

  $bb329:
    assume {:partition} !($i326 == 1);
    $i325 := (if _ZN4uORB12SubscriptionI12hil_sensor_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i325} true;
    goto $bb101, $bb328;

  $bb330:
    assume {:partition} !($i327 == 1);
    $i326 := (if _ZThn24_N4uORB12SubscriptionI12hil_sensor_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i326} true;
    goto $bb102, $bb329;

  $bb331:
    assume {:partition} !($i328 == 1);
    $i327 := (if _ZN4uORB12SubscriptionI12hil_sensor_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i327} true;
    goto $bb103, $bb330;

  $bb332:
    assume {:partition} !($i329 == 1);
    $i328 := (if _ZN4uORB12SubscriptionI18vehicle_attitude_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i328} true;
    goto $bb104, $bb331;

  $bb333:
    assume {:partition} !($i330 == 1);
    $i329 := (if _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i329} true;
    goto $bb105, $bb332;

  $bb334:
    assume {:partition} !($i331 == 1);
    $i330 := (if _ZN4uORB12SubscriptionI18vehicle_attitude_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i330} true;
    goto $bb106, $bb333;

  $bb335:
    assume {:partition} !($i332 == 1);
    $i331 := (if _ZThn24_N4uORB12SubscriptionI18vehicle_attitude_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i331} true;
    goto $bb107, $bb334;

  $bb336:
    assume {:partition} !($i333 == 1);
    $i332 := (if _ZN4uORB12SubscriptionI18vehicle_attitude_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i332} true;
    goto $bb108, $bb335;

  $bb337:
    assume {:partition} !($i334 == 1);
    $i333 := (if _ZN4uORB12SubscriptionI25vehicle_global_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i333} true;
    goto $bb109, $bb336;

  $bb338:
    assume {:partition} !($i335 == 1);
    $i334 := (if _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i334} true;
    goto $bb110, $bb337;

  $bb339:
    assume {:partition} !($i336 == 1);
    $i335 := (if _ZN4uORB12SubscriptionI25vehicle_global_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i335} true;
    goto $bb111, $bb338;

  $bb340:
    assume {:partition} !($i337 == 1);
    $i336 := (if _ZThn24_N4uORB12SubscriptionI25vehicle_global_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i336} true;
    goto $bb112, $bb339;

  $bb341:
    assume {:partition} !($i338 == 1);
    $i337 := (if _ZN4uORB12SubscriptionI25vehicle_global_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i337} true;
    goto $bb113, $bb340;

  $bb342:
    assume {:partition} !($i339 == 1);
    $i338 := (if _ZN4uORB12SubscriptionI10encoders_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i338} true;
    goto $bb114, $bb341;

  $bb343:
    assume {:partition} !($i340 == 1);
    $i339 := (if _ZThn24_N4uORB12SubscriptionI10encoders_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i339} true;
    goto $bb115, $bb342;

  $bb344:
    assume {:partition} !($i341 == 1);
    $i340 := (if _ZN4uORB12SubscriptionI10encoders_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i340} true;
    goto $bb116, $bb343;

  $bb345:
    assume {:partition} !($i342 == 1);
    $i341 := (if _ZThn24_N4uORB12SubscriptionI10encoders_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i341} true;
    goto $bb117, $bb344;

  $bb346:
    assume {:partition} !($i343 == 1);
    $i342 := (if _ZN4uORB12SubscriptionI10encoders_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i342} true;
    goto $bb118, $bb345;

  $bb347:
    assume {:partition} !($i344 == 1);
    $i343 := (if _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i343} true;
    goto $bb119, $bb346;

  $bb348:
    assume {:partition} !($i345 == 1);
    $i344 := (if _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i344} true;
    goto $bb120, $bb347;

  $bb349:
    assume {:partition} !($i346 == 1);
    $i345 := (if _ZN4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i345} true;
    goto $bb121, $bb348;

  $bb350:
    assume {:partition} !($i347 == 1);
    $i346 := (if _ZThn24_N4uORB12SubscriptionI27position_setpoint_triplet_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i346} true;
    goto $bb122, $bb349;

  $bb351:
    assume {:partition} !($i348 == 1);
    $i347 := (if _ZN4uORB12SubscriptionI27position_setpoint_triplet_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i347} true;
    goto $bb123, $bb350;

  $bb352:
    assume {:partition} !($i349 == 1);
    $i348 := (if _ZN4uORB12SubscriptionI16vehicle_status_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i348} true;
    goto $bb124, $bb351;

  $bb353:
    assume {:partition} !($i350 == 1);
    $i349 := (if _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i349} true;
    goto $bb125, $bb352;

  $bb354:
    assume {:partition} !($i351 == 1);
    $i350 := (if _ZN4uORB12SubscriptionI16vehicle_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i350} true;
    goto $bb126, $bb353;

  $bb355:
    assume {:partition} !($i352 == 1);
    $i351 := (if _ZThn24_N4uORB12SubscriptionI16vehicle_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i351} true;
    goto $bb127, $bb354;

  $bb356:
    assume {:partition} !($i353 == 1);
    $i352 := (if _ZN4uORB12SubscriptionI16vehicle_status_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i352} true;
    goto $bb128, $bb355;

  $bb357:
    assume {:partition} !($i354 == 1);
    $i353 := (if _ZN4uORB12SubscriptionI25manual_control_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i353} true;
    goto $bb129, $bb356;

  $bb358:
    assume {:partition} !($i355 == 1);
    $i354 := (if _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i354} true;
    goto $bb130, $bb357;

  $bb359:
    assume {:partition} !($i356 == 1);
    $i355 := (if _ZN4uORB12SubscriptionI25manual_control_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i355} true;
    goto $bb131, $bb358;

  $bb360:
    assume {:partition} !($i357 == 1);
    $i356 := (if _ZThn24_N4uORB12SubscriptionI25manual_control_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i356} true;
    goto $bb132, $bb359;

  $bb361:
    assume {:partition} !($i358 == 1);
    $i357 := (if _ZN4uORB12SubscriptionI25manual_control_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i357} true;
    goto $bb133, $bb360;

  $bb362:
    assume {:partition} !($i359 == 1);
    $i358 := (if _ZN4uORB12SubscriptionI13mavlink_log_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i358} true;
    goto $bb134, $bb361;

  $bb363:
    assume {:partition} !($i360 == 1);
    $i359 := (if _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i359} true;
    goto $bb135, $bb362;

  $bb364:
    assume {:partition} !($i361 == 1);
    $i360 := (if _ZN4uORB12SubscriptionI13mavlink_log_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i360} true;
    goto $bb136, $bb363;

  $bb365:
    assume {:partition} !($i362 == 1);
    $i361 := (if _ZThn24_N4uORB12SubscriptionI13mavlink_log_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i361} true;
    goto $bb137, $bb364;

  $bb366:
    assume {:partition} !($i363 == 1);
    $i362 := (if _ZN4uORB12SubscriptionI13mavlink_log_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i362} true;
    goto $bb138, $bb365;

  $bb367:
    assume {:partition} !($i364 == 1);
    $i363 := (if _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i363} true;
    goto $bb139, $bb366;

  $bb368:
    assume {:partition} !($i365 == 1);
    $i364 := (if _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i364} true;
    goto $bb140, $bb367;

  $bb369:
    assume {:partition} !($i366 == 1);
    $i365 := (if _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i365} true;
    goto $bb141, $bb368;

  $bb370:
    assume {:partition} !($i367 == 1);
    $i366 := (if _ZThn24_N4uORB12SubscriptionI33vehicle_local_position_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i366} true;
    goto $bb142, $bb369;

  $bb371:
    assume {:partition} !($i368 == 1);
    $i367 := (if _ZN4uORB12SubscriptionI33vehicle_local_position_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i367} true;
    goto $bb143, $bb370;

  $bb372:
    assume {:partition} !($i369 == 1);
    $i368 := (if _ZN4uORB12SubscriptionI24vehicle_local_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i368} true;
    goto $bb144, $bb371;

  $bb373:
    assume {:partition} !($i370 == 1);
    $i369 := (if _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i369} true;
    goto $bb145, $bb372;

  $bb374:
    assume {:partition} !($i371 == 1);
    $i370 := (if _ZN4uORB12SubscriptionI24vehicle_local_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i370} true;
    goto $bb146, $bb373;

  $bb375:
    assume {:partition} !($i372 == 1);
    $i371 := (if _ZThn24_N4uORB12SubscriptionI24vehicle_local_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i371} true;
    goto $bb147, $bb374;

  $bb376:
    assume {:partition} !($i373 == 1);
    $i372 := (if _ZN4uORB12SubscriptionI24vehicle_local_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i372} true;
    goto $bb148, $bb375;

  $bb377:
    assume {:partition} !($i374 == 1);
    $i373 := (if _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i373} true;
    goto $bb149, $bb376;

  $bb378:
    assume {:partition} !($i375 == 1);
    $i374 := (if _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i374} true;
    goto $bb150, $bb377;

  $bb379:
    assume {:partition} !($i376 == 1);
    $i375 := (if _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i375} true;
    goto $bb151, $bb378;

  $bb380:
    assume {:partition} !($i377 == 1);
    $i376 := (if _ZThn24_N4uORB12SubscriptionI27vehicle_attitude_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i376} true;
    goto $bb152, $bb379;

  $bb381:
    assume {:partition} !($i378 == 1);
    $i377 := (if _ZN4uORB12SubscriptionI27vehicle_attitude_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i377} true;
    goto $bb153, $bb380;

  $bb382:
    assume {:partition} !($i379 == 1);
    $i378 := (if _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i378} true;
    goto $bb154, $bb381;

  $bb383:
    assume {:partition} !($i380 == 1);
    $i379 := (if _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i379} true;
    goto $bb155, $bb382;

  $bb384:
    assume {:partition} !($i381 == 1);
    $i380 := (if _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i380} true;
    goto $bb156, $bb383;

  $bb385:
    assume {:partition} !($i382 == 1);
    $i381 := (if _ZThn24_N4uORB12SubscriptionI24vehicle_rates_setpoint_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i381} true;
    goto $bb157, $bb384;

  $bb386:
    assume {:partition} !($i383 == 1);
    $i382 := (if _ZN4uORB12SubscriptionI24vehicle_rates_setpoint_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i382} true;
    goto $bb158, $bb385;

  $bb387:
    assume {:partition} !($i384 == 1);
    $i383 := (if _ZN4uORB12SubscriptionI13rc_channels_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i383} true;
    goto $bb159, $bb386;

  $bb388:
    assume {:partition} !($i385 == 1);
    $i384 := (if _ZThn24_N4uORB12SubscriptionI13rc_channels_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i384} true;
    goto $bb160, $bb387;

  $bb389:
    assume {:partition} !($i386 == 1);
    $i385 := (if _ZN4uORB12SubscriptionI13rc_channels_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i385} true;
    goto $bb161, $bb388;

  $bb390:
    assume {:partition} !($i387 == 1);
    $i386 := (if _ZThn24_N4uORB12SubscriptionI13rc_channels_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i386} true;
    goto $bb162, $bb389;

  $bb391:
    assume {:partition} !($i388 == 1);
    $i387 := (if _ZN4uORB12SubscriptionI13rc_channels_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i387} true;
    goto $bb163, $bb390;

  $bb392:
    assume {:partition} !($i389 == 1);
    $i388 := (if _ZN4uORB12SubscriptionI22vehicle_control_mode_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i388} true;
    goto $bb164, $bb391;

  $bb393:
    assume {:partition} !($i390 == 1);
    $i389 := (if _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i389} true;
    goto $bb165, $bb392;

  $bb394:
    assume {:partition} !($i391 == 1);
    $i390 := (if _ZN4uORB12SubscriptionI22vehicle_control_mode_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i390} true;
    goto $bb166, $bb393;

  $bb395:
    assume {:partition} !($i392 == 1);
    $i391 := (if _ZThn24_N4uORB12SubscriptionI22vehicle_control_mode_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i391} true;
    goto $bb167, $bb394;

  $bb396:
    assume {:partition} !($i393 == 1);
    $i392 := (if _ZN4uORB12SubscriptionI22vehicle_control_mode_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i392} true;
    goto $bb168, $bb395;

  $bb397:
    assume {:partition} !($i394 == 1);
    $i393 := (if _ZN4uORB12SubscriptionI16actuator_armed_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i393} true;
    goto $bb169, $bb396;

  $bb398:
    assume {:partition} !($i395 == 1);
    $i394 := (if _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i394} true;
    goto $bb170, $bb397;

  $bb399:
    assume {:partition} !($i396 == 1);
    $i395 := (if _ZN4uORB12SubscriptionI16actuator_armed_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i395} true;
    goto $bb171, $bb398;

  $bb400:
    assume {:partition} !($i397 == 1);
    $i396 := (if _ZThn24_N4uORB12SubscriptionI16actuator_armed_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i396} true;
    goto $bb172, $bb399;

  $bb401:
    assume {:partition} !($i398 == 1);
    $i397 := (if _ZN4uORB12SubscriptionI16actuator_armed_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i397} true;
    goto $bb173, $bb400;

  $bb402:
    assume {:partition} !($i399 == 1);
    $i398 := (if _ZN4uORB12SubscriptionI16battery_status_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i398} true;
    goto $bb174, $bb401;

  $bb403:
    assume {:partition} !($i400 == 1);
    $i399 := (if _ZThn24_N4uORB12SubscriptionI16battery_status_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i399} true;
    goto $bb175, $bb402;

  $bb404:
    assume {:partition} !($i401 == 1);
    $i400 := (if _ZN4uORB12SubscriptionI16battery_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i400} true;
    goto $bb176, $bb403;

  $bb405:
    assume {:partition} !($i402 == 1);
    $i401 := (if _ZThn24_N4uORB12SubscriptionI16battery_status_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i401} true;
    goto $bb177, $bb404;

  $bb406:
    assume {:partition} !($i403 == 1);
    $i402 := (if _ZN4uORB12SubscriptionI16battery_status_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i402} true;
    goto $bb178, $bb405;

  $bb407:
    assume {:partition} !($i404 == 1);
    $i403 := (if _ZN4uORB12SubscriptionI15home_position_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i403} true;
    goto $bb179, $bb406;

  $bb408:
    assume {:partition} !($i405 == 1);
    $i404 := (if _ZThn24_N4uORB12SubscriptionI15home_position_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i404} true;
    goto $bb180, $bb407;

  $bb409:
    assume {:partition} !($i406 == 1);
    $i405 := (if _ZN4uORB12SubscriptionI15home_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i405} true;
    goto $bb181, $bb408;

  $bb410:
    assume {:partition} !($i407 == 1);
    $i406 := (if _ZThn24_N4uORB12SubscriptionI15home_position_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i406} true;
    goto $bb182, $bb409;

  $bb411:
    assume {:partition} !($i408 == 1);
    $i407 := (if _ZN4uORB12SubscriptionI15home_position_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i407} true;
    goto $bb183, $bb410;

  $bb412:
    assume {:partition} !($i409 == 1);
    $i408 := (if _ZN4uORB12SubscriptionI14optical_flow_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i408} true;
    goto $bb184, $bb411;

  $bb413:
    assume {:partition} !($i410 == 1);
    $i409 := (if _ZThn24_N4uORB12SubscriptionI14optical_flow_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i409} true;
    goto $bb185, $bb412;

  $bb414:
    assume {:partition} !($i411 == 1);
    $i410 := (if _ZN4uORB12SubscriptionI14optical_flow_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i410} true;
    goto $bb186, $bb413;

  $bb415:
    assume {:partition} !($i412 == 1);
    $i411 := (if _ZThn24_N4uORB12SubscriptionI14optical_flow_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i411} true;
    goto $bb187, $bb414;

  $bb416:
    assume {:partition} !($i413 == 1);
    $i412 := (if _ZN4uORB12SubscriptionI14optical_flow_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i412} true;
    goto $bb188, $bb415;

  $bb417:
    assume {:partition} !($i414 == 1);
    $i413 := (if _ZN4uORB12SubscriptionI17distance_sensor_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i413} true;
    goto $bb189, $bb416;

  $bb418:
    assume {:partition} !($i415 == 1);
    $i414 := (if _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i414} true;
    goto $bb190, $bb417;

  $bb419:
    assume {:partition} !($i416 == 1);
    $i415 := (if _ZN4uORB12SubscriptionI17distance_sensor_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i415} true;
    goto $bb191, $bb418;

  $bb420:
    assume {:partition} !($i417 == 1);
    $i416 := (if _ZThn24_N4uORB12SubscriptionI17distance_sensor_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i416} true;
    goto $bb192, $bb419;

  $bb421:
    assume {:partition} !($i418 == 1);
    $i417 := (if _ZN4uORB12SubscriptionI17distance_sensor_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i417} true;
    goto $bb193, $bb420;

  $bb422:
    assume {:partition} !($i419 == 1);
    $i418 := (if _ZN4uORB12SubscriptionI15att_pos_mocap_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i418} true;
    goto $bb194, $bb421;

  $bb423:
    assume {:partition} !($i420 == 1);
    $i419 := (if _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i419} true;
    goto $bb195, $bb422;

  $bb424:
    assume {:partition} !($i421 == 1);
    $i420 := (if _ZN4uORB12SubscriptionI15att_pos_mocap_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i420} true;
    goto $bb196, $bb423;

  $bb425:
    assume {:partition} !($i422 == 1);
    $i421 := (if _ZThn24_N4uORB12SubscriptionI15att_pos_mocap_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i421} true;
    goto $bb197, $bb424;

  $bb426:
    assume {:partition} !($i423 == 1);
    $i422 := (if _ZN4uORB12SubscriptionI15att_pos_mocap_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i422} true;
    goto $bb198, $bb425;

  $bb427:
    assume {:partition} !($i424 == 1);
    $i423 := (if _ZN4uORB12SubscriptionI26vision_position_estimate_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i423} true;
    goto $bb199, $bb426;

  $bb428:
    assume {:partition} !($i425 == 1);
    $i424 := (if _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i424} true;
    goto $bb200, $bb427;

  $bb429:
    assume {:partition} !($i426 == 1);
    $i425 := (if _ZN4uORB12SubscriptionI26vision_position_estimate_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i425} true;
    goto $bb201, $bb428;

  $bb430:
    assume {:partition} !($i427 == 1);
    $i426 := (if _ZThn24_N4uORB12SubscriptionI26vision_position_estimate_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i426} true;
    goto $bb202, $bb429;

  $bb431:
    assume {:partition} !($i428 == 1);
    $i427 := (if _ZN4uORB12SubscriptionI26vision_position_estimate_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i427} true;
    goto $bb203, $bb430;

  $bb432:
    assume {:partition} !($i429 == 1);
    $i428 := (if _ZN4uORB12SubscriptionI15control_state_sED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i428} true;
    goto $bb204, $bb431;

  $bb433:
    assume {:partition} !($i430 == 1);
    $i429 := (if _ZThn24_N4uORB12SubscriptionI15control_state_sED1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i429} true;
    goto $bb205, $bb432;

  $bb434:
    assume {:partition} !($i431 == 1);
    $i430 := (if _ZN4uORB12SubscriptionI15control_state_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i430} true;
    goto $bb206, $bb433;

  $bb435:
    assume {:partition} !($i432 == 1);
    $i431 := (if _ZThn24_N4uORB12SubscriptionI15control_state_sED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i431} true;
    goto $bb207, $bb434;

  $bb436:
    assume {:partition} !($i433 == 1);
    $i432 := (if _ZN4uORB12SubscriptionI15control_state_sE6updateEv == $p0 then 1 else NULL);
    assume {:branchcond $i432} true;
    goto $bb208, $bb435;

  $bb437:
    assume {:partition} !($i434 == 1);
    $i433 := (if _ZN4uORB16SubscriptionBaseD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i433} true;
    goto $bb209, $bb436;

  $bb438:
    assume {:partition} !($i435 == 1);
    $i434 := (if _ZN4uORB16SubscriptionBaseD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i434} true;
    goto $bb210, $bb437;

  $bb439:
    assume {:partition} !($i436 == 1);
    $i435 := (if _ZN4uORB10DeviceNodeD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i435} true;
    goto $bb211, $bb438;

  $bb440:
    assume {:partition} !($i437 == 1);
    $i436 := (if _ZN4uORB10DeviceNodeD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i436} true;
    goto $bb212, $bb439;

  $bb441:
    assume {:partition} !($i438 == 1);
    $i437 := (if _ZN4uORB12DeviceMasterD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i437} true;
    goto $bb213, $bb440;

  $bb442:
    assume {:partition} !($i439 == 1);
    $i438 := (if _ZN4uORB12DeviceMasterD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i438} true;
    goto $bb214, $bb441;

  $bb443:
    assume {:partition} !($i440 == 1);
    $i439 := (if _ZN4uORB7ManagerC2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i439} true;
    goto $bb215, $bb442;

  $bb444:
    assume {:partition} !($i441 == 1);
    $i440 := (if _ZN4uORB15PublicationNodeD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i440} true;
    goto $bb216, $bb443;

  $bb445:
    assume {:partition} !($i442 == 1);
    $i441 := (if _ZN4uORB16SubscriptionNodeD2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i441} true;
    goto $bb217, $bb444;

  $bb446:
    assume {:partition} !($i443 == 1);
    $i442 := (if _ZN4uORB15PublicationNodeD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i442} true;
    goto $bb218, $bb445;

  $bb447:
    assume {:partition} !($i444 == 1);
    $i443 := (if _ZThn32_N4uORB15PublicationNodeD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i443} true;
    goto $bb219, $bb446;

  $bb448:
    assume {:partition} !($i445 == 1);
    $i444 := (if _ZThn32_N4uORB15PublicationNodeD1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i444} true;
    goto $bb220, $bb447;

  $bb449:
    assume {:partition} !($i446 == 1);
    $i445 := (if _ZN8ListNodeIPN4uORB15PublicationNodeEED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i445} true;
    goto $bb221, $bb448;

  $bb450:
    assume {:partition} !($i447 == 1);
    $i446 := (if _ZN8ListNodeIPN4uORB15PublicationNodeEED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i446} true;
    goto $bb222, $bb449;

  $bb451:
    assume {:partition} !($i448 == 1);
    $i447 := (if _ZN8ListNodeIPN4uORB16SubscriptionNodeEED2Ev == $p0 then 1 else NULL);
    assume {:branchcond $i447} true;
    goto $bb223, $bb450;

  $bb452:
    assume {:partition} !($i449 == 1);
    $i448 := (if _ZN4uORB16SubscriptionNodeD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i448} true;
    goto $bb224, $bb451;

  $bb453:
    assume {:partition} !($i450 == 1);
    $i449 := (if _ZThn24_N4uORB16SubscriptionNodeD0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i449} true;
    goto $bb225, $bb452;

  $bb454:
    assume {:partition} !($i451 == 1);
    $i450 := (if _ZThn24_N4uORB16SubscriptionNodeD1Ev == $p0 then 1 else NULL);
    assume {:branchcond $i450} true;
    goto $bb226, $bb453;

  $bb455:
    assume {:partition} !($i452 == 1);
    $i451 := (if _ZN8ListNodeIPN4uORB16SubscriptionNodeEED0Ev == $p0 then 1 else NULL);
    assume {:branchcond $i451} true;
    goto $bb227, $bb454;
}



const devirtbounce14: int;

axiom devirtbounce14 == NULL - 10664;

procedure devirtbounce14(funcPtr: int, arg: int, arg1: int) returns ({:scalar} $r: int);



implementation devirtbounce14(funcPtr: int, arg: int, arg1: int) returns ($r: int)
{
  var $p0: int;
  var $p1: int;
  var $p2: int;
  var {:scalar} $i3: int;
  var $p4: int;
  var $p5: int;
  var {:scalar} $i6: int;
  var $p7: int;
  var $p8: int;
  var {:scalar} $i9: int;
  var {:scalar} $i10: int;
  var {:scalar} $i11: int;
  var {:scalar} $i12: int;

  $bb0:
    $p0 := funcPtr;
    goto $bb1;

  $bb1:
    $i12 := (if _ZN4uORB7Manager27process_remove_subscriptionEPKc == $p0 then 1 else NULL);
    assume {:branchcond $i12} true;
    goto $bb4, $bb7;

  $bb2:
    assume {:partition} $i10 == 1;
    $p1 := arg;
    $p2 := arg1;
    call $i3 := _ZN4uORB10DeviceNode10poll_stateEPN6device6file_tE($p1, $p2);
    $r := $i3;
    $exn := false;
    return;

  $bb3:
    assume {:partition} $i11 == 1;
    $p4 := arg;
    $p5 := arg1;
    call $i6 := _ZN6device4VDev10poll_stateEPNS_6file_tE($p4, $p5);
    $r := $i6;
    $exn := false;
    return;

  $bb4:
    assume {:partition} $i12 == 1;
    $p7 := arg;
    $p8 := arg1;
    call $i9 := _ZN4uORB7Manager27process_remove_subscriptionEPKc($p7, $p8);
    $r := $i9;
    $exn := false;
    return;

  $bb5:
    assume {:partition} !($i10 == 1);
    assume false;
    goto $bb6;

  $bb6:
    assume {:partition} !($i11 == 1);
    $i10 := (if _ZN4uORB10DeviceNode10poll_stateEPN6device6file_tE == $p0 then 1 else NULL);
    assume {:branchcond $i10} true;
    goto $bb2, $bb5;

  $bb7:
    assume {:partition} !($i12 == 1);
    $i11 := (if _ZN6device4VDev10poll_stateEPNS_6file_tE == $p0 then 1 else NULL);
    assume {:branchcond $i11} true;
    goto $bb3, $bb6;
}



procedure {:inline 1} $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: int, src: int, len: int, align: int, isvolatile: bool) returns (M.ret: [ref]i8);



implementation {:inline 1} $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: int, src: int, len: int, align: int, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: int :: dst <= x && x < dst + len ==> M.ret[x] == M.src[src - dst + x]);
    assume (forall x: int :: x < dst ==> M.ret[x] == M.dst[x]);
    assume (forall x: int :: dst + len <= x ==> M.ret[x] == M.dst[x]);
    return;
}



const $u0: int;

procedure $initialize();



implementation $initialize()
{

  anon0:
    call __SMACK_static_init();
    call __SMACK_init_func_memory_model();
    return;
}



const {:allocated} NULL: int;

axiom NULL == 0;

function {:inline} {:aliasingQuery} aliasQ0(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ4(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ5(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ6(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ7(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ8(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ9(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ10(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ11(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ12(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ13(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ14(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ15(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ16(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ17(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ18(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ19(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ20(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ21(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ22(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ23(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ24(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ25(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ26(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ27(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ28(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ29(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ30(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ31(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ32(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ33(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ34(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ35(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ36(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ37(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ38(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ39(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ40(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ41(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ42(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ43(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ44(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ45(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ46(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ47(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ48(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ49(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ50(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ51(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ52(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ53(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ54(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ55(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ56(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ57(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ58(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ59(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ60(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ61(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ62(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ63(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ64(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ65(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ66(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ67(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ68(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ69(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ70(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ71(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ72(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ73(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ74(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ75(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ76(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ77(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ78(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ79(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ80(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ81(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ82(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ83(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ84(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ85(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ86(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ87(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ88(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ89(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ90(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ91(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ92(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ93(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ94(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ95(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ96(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ97(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ98(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ99(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ100(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ101(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ102(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ103(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ104(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ105(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ106(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ107(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ108(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ109(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ110(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ111(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ112(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ113(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ114(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ115(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ116(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ117(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ118(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ119(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ120(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ121(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ122(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ123(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ124(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ125(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ126(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ127(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ128(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ129(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ130(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ131(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ132(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ133(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ134(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ135(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ136(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ137(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ138(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ139(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ140(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ141(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ142(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ143(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ144(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ145(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ146(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ147(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ148(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ149(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ150(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ151(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ152(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ153(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ154(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ155(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ156(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ157(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ158(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ159(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ160(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ161(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ162(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ163(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ164(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ165(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ166(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ167(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ168(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ169(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ170(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ171(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ172(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ173(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ174(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ175(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ176(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ177(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ178(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ179(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ180(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ181(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ182(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ183(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ184(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ185(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ186(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ187(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ188(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ189(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ190(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ191(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ192(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ193(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ194(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ195(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ196(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ197(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ198(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ199(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ200(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ201(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ202(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ203(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ204(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ205(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ206(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ207(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ208(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ209(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ210(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ211(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ212(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ213(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ214(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ215(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ216(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ217(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ218(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ219(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ220(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ221(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ222(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ223(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ224(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ225(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ226(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ227(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ228(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ229(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ230(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ231(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ232(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ233(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ234(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ235(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ236(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ237(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ238(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ239(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ240(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ241(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ242(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ243(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ244(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ245(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ246(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ247(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ248(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ249(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ250(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ251(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ252(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ253(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ254(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ255(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ256(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ257(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ258(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ259(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ260(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ261(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ262(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ263(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ264(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ265(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ266(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ267(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ268(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ269(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ270(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ271(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ272(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ273(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ274(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ275(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ276(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ277(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ278(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ279(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ280(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ281(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ282(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ283(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ284(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ285(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ286(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ287(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ288(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ289(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ290(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ291(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ292(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ293(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ294(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ295(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ296(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ297(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ298(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ299(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ300(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ301(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ302(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ303(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ304(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ305(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ306(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ307(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ308(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ309(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ310(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ311(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ312(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ313(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ314(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ315(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ316(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ317(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ318(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ319(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ320(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ321(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ322(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ323(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ324(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ325(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ326(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ327(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ328(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ329(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ330(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ331(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ332(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ333(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ334(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ335(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ336(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ337(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ338(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ339(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ340(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ341(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ342(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ343(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ344(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ345(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ346(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ347(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ348(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ349(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ350(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ351(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ352(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ353(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ354(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ355(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ356(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ357(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ358(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ359(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ360(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ361(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ362(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ363(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ364(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ365(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ366(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ367(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ368(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ369(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ370(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ371(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ372(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ373(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ374(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ375(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ376(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ377(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ378(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ379(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ380(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ381(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ382(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ383(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ384(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ385(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ386(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ387(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ388(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ389(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ390(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ391(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ392(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ393(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ394(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ395(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ396(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ397(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ398(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ399(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ400(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ401(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ402(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ403(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ404(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ405(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ406(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ407(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ408(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ409(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ410(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ411(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ412(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ413(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ414(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ415(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ416(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ417(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ418(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ419(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ420(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ421(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ422(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ423(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ424(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ425(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ426(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ427(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ428(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ429(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ430(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ431(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ432(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ433(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ434(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ435(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ436(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ437(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ438(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ439(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ440(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ441(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ442(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ443(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ444(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ445(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ446(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ447(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ448(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ449(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ450(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ451(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ452(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ453(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ454(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ455(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ456(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ457(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ458(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ459(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ460(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ461(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ462(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ463(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ464(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ465(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ466(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ467(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ468(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ469(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ470(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ471(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ472(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ473(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ474(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ475(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ476(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ477(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ478(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ479(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ480(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ481(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ482(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ483(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ484(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ485(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ486(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ487(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ488(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ489(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ490(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ491(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ492(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ493(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ494(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ495(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ496(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ497(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ498(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ499(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ500(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ501(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ502(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ503(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ504(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ505(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ506(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ507(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ508(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ509(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ510(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ511(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ512(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ513(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ514(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ515(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ516(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ517(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ518(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ519(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ520(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ521(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ522(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ523(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ524(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ525(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ526(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ527(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ528(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ529(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ530(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ531(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ532(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ533(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ534(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ535(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ536(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ537(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ538(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ539(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ540(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ541(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ542(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ543(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ544(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ545(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ546(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ547(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ548(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ549(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ550(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ551(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ552(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ553(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ554(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ555(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ556(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ557(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ558(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ559(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ560(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ561(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ562(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ563(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ564(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ565(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ566(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ567(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ568(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ569(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ570(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ571(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ572(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ573(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ574(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ575(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ576(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ577(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ578(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ579(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ580(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ581(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ582(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ583(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ584(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ585(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ586(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ587(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ588(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ589(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ590(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ591(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ592(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ593(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ594(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ595(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ596(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ597(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ598(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ599(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ600(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ601(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ602(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ603(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ604(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ605(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ606(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ607(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ608(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ609(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ610(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ611(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ612(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ613(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ614(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ615(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ616(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ617(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ618(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ619(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ620(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ621(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ622(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ623(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ624(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ625(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ626(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ627(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ628(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ629(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ630(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ631(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ632(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ633(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ634(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ635(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ636(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ637(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ638(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ639(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ640(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ641(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ642(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ643(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ644(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ645(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ646(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ647(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ648(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ649(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ650(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ651(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ652(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ653(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ654(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ655(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ656(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ657(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ658(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ659(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ660(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ661(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ662(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ663(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ664(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ665(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ666(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ667(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ668(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ669(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ670(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ671(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ672(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ673(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ674(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ675(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ676(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ677(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ678(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ679(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ680(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ681(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ682(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ683(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ684(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ685(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ686(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ687(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ688(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ689(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ690(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ691(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ692(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ693(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ694(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ695(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ696(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ697(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ698(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ699(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ700(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ701(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ702(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ703(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ704(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ705(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ706(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ707(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ708(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ709(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ710(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ711(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ712(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ713(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ714(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ715(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ716(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ717(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ718(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ719(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ720(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ721(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ722(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ723(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ724(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ725(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ726(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ727(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ728(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ729(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ730(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ731(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ732(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ733(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ734(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ735(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ736(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ737(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ738(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ739(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ740(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ741(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ742(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ743(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ744(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ745(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ746(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ747(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ748(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ749(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ750(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ751(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ752(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ753(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ754(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ755(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ756(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ757(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ758(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ759(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ760(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ761(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ762(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ763(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ764(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ765(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ766(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ767(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ768(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ769(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ770(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ771(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ772(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ773(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ774(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ775(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ776(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ777(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ778(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ779(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ780(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ781(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ782(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ783(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ784(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ785(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ786(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ787(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ788(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ789(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ790(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ791(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ792(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ793(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ794(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ795(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ796(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ797(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ798(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ799(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ800(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ801(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ802(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ803(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ804(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ805(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ806(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ807(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ808(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ809(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ810(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ811(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ812(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ813(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ814(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ815(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ816(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ817(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ818(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ819(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ820(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ821(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ822(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ823(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ824(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ825(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ826(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ827(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ828(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ829(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ830(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ831(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ832(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ833(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ834(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ835(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ836(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ837(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ838(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ839(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ840(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ841(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ842(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ843(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ844(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ845(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ846(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ847(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ848(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ849(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ850(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ851(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ852(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ853(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ854(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ855(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ856(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ857(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ858(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ859(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ860(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ861(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ862(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ863(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ864(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ865(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ866(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ867(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ868(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ869(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ870(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ871(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ872(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ873(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ874(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ875(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ876(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ877(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ878(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ879(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ880(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ881(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ882(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ883(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ884(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ885(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ886(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ887(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ888(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ889(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ890(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ891(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ892(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ893(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ894(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ895(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ896(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ897(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ898(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ899(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ900(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ901(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ902(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ903(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ904(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ905(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ906(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ907(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ908(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ909(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ910(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ911(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ912(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ913(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ914(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ915(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ916(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ917(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ918(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ919(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ920(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ921(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ922(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ923(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ924(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ925(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ926(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ927(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ928(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ929(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ930(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ931(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ932(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ933(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ934(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ935(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ936(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ937(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ938(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ939(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ940(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ941(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ942(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ943(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ944(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ945(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ946(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ947(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ948(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ949(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ950(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ951(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ952(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ953(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ954(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ955(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ956(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ957(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ958(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ959(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ960(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ961(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ962(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ963(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ964(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ965(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ966(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ967(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ968(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ969(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ970(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ971(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ972(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ973(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ974(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ975(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ976(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ977(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ978(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ979(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ980(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ981(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ982(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ983(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ984(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ985(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ986(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ987(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ988(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ989(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ990(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ991(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ992(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ993(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ994(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ995(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ996(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ997(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ998(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ999(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1000(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1001(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1002(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1003(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1004(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1005(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1006(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1007(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1008(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1009(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1010(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1011(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1012(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1013(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1014(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1015(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1016(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1017(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1018(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1019(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1020(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1021(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1022(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1023(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1024(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1025(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1026(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1027(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1028(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1029(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1030(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1031(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1032(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1033(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1034(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1035(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1036(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1037(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1038(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1039(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1040(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1041(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1042(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1043(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1044(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1045(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1046(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1047(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1048(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1049(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1050(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1051(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1052(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1053(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1054(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1055(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1056(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1057(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1058(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1059(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1060(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1061(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1062(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1063(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1064(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1065(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1066(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1067(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1068(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1069(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1070(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1071(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1072(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1073(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1074(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1075(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1076(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1077(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1078(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1079(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1080(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1081(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1082(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1083(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1084(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1085(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1086(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1087(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1088(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1089(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1090(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1091(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1092(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1093(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1094(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1095(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1096(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1097(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1098(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1099(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1100(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1101(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1102(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1103(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1104(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1105(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1106(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1107(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1108(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1109(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1110(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1111(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1112(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1113(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1114(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1115(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1116(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1117(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1118(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1119(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1120(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1121(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1122(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1123(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1124(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1125(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1126(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1127(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1128(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1129(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1130(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1131(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1132(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1133(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1134(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1135(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1136(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1137(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1138(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1139(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1140(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1141(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1142(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1143(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1144(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1145(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1146(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1147(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1148(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1149(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1150(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1151(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1152(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1153(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1154(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1155(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1156(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1157(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1158(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1159(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1160(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1161(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1162(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1163(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1164(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1165(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1166(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1167(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1168(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1169(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1170(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1171(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1172(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1173(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1174(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1175(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1176(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1177(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1178(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1179(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1180(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1181(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1182(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1183(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1184(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1185(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1186(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1187(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1188(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1189(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1190(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1191(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1192(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1193(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1194(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1195(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1196(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1197(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1198(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1199(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1200(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1201(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1202(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1203(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1204(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1205(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1206(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1207(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1208(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1209(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1210(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1211(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1212(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1213(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1214(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1215(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1216(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1217(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1218(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1219(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1220(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1221(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1222(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1223(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1224(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1225(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1226(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1227(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1228(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1229(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1230(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1231(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1232(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1233(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1234(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1235(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1236(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1237(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1238(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1239(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1240(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1241(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1242(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1243(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1244(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1245(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1246(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1247(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1248(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1249(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1250(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1251(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1252(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1253(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1254(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1255(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1256(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1257(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1258(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1259(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1260(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1261(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1262(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1263(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1264(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1265(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1266(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1267(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1268(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1269(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1270(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1271(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1272(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1273(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1274(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1275(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1276(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1277(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1278(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1279(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1280(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1281(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1282(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1283(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1284(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1285(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1286(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1287(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1288(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1289(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1290(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1291(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1292(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1293(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1294(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1295(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1296(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1297(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1298(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1299(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1300(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1301(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1302(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1303(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1304(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1305(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1306(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1307(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1308(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1309(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1310(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1311(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1312(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1313(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1314(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1315(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1316(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1317(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1318(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1319(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1320(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1321(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1322(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1323(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1324(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1325(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1326(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1327(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1328(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1329(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1330(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1331(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1332(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1333(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1334(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1335(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1336(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1337(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1338(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1339(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1340(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1341(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1342(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1343(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1344(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1345(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1346(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1347(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1348(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1349(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1350(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1351(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1352(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1353(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1354(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1355(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1356(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1357(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1358(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1359(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1360(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1361(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1362(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1363(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1364(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1365(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1366(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1367(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1368(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1369(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1370(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1371(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1372(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1373(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1374(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1375(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1376(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1377(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1378(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1379(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1380(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1381(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1382(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1383(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1384(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1385(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1386(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1387(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1388(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1389(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1390(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1391(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1392(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1393(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1394(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1395(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1396(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1397(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1398(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1399(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1400(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1401(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1402(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1403(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1404(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1405(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1406(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1407(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1408(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1409(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1410(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1411(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1412(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1413(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1414(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1415(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1416(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1417(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1418(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1419(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1420(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1421(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1422(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1423(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1424(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1425(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1426(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1427(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1428(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1429(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1430(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1431(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1432(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1433(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1434(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1435(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1436(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1437(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1438(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1439(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1440(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1441(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1442(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1443(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1444(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1445(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1446(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1447(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1448(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1449(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1450(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1451(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1452(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1453(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1454(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1455(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1456(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1457(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1458(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1459(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1460(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1461(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1462(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1463(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1464(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1465(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1466(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1467(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1468(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1469(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1470(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1471(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1472(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1473(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1474(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1475(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1476(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1477(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1478(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1479(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1480(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1481(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1482(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1483(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1484(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1485(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1486(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1487(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1488(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1489(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1490(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1491(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1492(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1493(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1494(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1495(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1496(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1497(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1498(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1499(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1500(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1501(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1502(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1503(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1504(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1505(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1506(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1507(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1508(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1509(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1510(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1511(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1512(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1513(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1514(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1515(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1516(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1517(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1518(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1519(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1520(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1521(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1522(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1523(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1524(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1525(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1526(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1527(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1528(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1529(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1530(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1531(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1532(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1533(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1534(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1535(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1536(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1537(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1538(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1539(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1540(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1541(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1542(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1543(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1544(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1545(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1546(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1547(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1548(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1549(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1550(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1551(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1552(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1553(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1554(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1555(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1556(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1557(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1558(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1559(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1560(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1561(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1562(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1563(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1564(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1565(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1566(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1567(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1568(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1569(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1570(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1571(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1572(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1573(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1574(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1575(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1576(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1577(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1578(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1579(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1580(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1581(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1582(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1583(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1584(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1585(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1586(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1587(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1588(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1589(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1590(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1591(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1592(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1593(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1594(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1595(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1596(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1597(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1598(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1599(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1600(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1601(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1602(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1603(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1604(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1605(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1606(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1607(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1608(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1609(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1610(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1611(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1612(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1613(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1614(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1615(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1616(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1617(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1618(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1619(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1620(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1621(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1622(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1623(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1624(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1625(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1626(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1627(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1628(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1629(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1630(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1631(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1632(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1633(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1634(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1635(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1636(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1637(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1638(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1639(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1640(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1641(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1642(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1643(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1644(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1645(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1646(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1647(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1648(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1649(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1650(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1651(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1652(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1653(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1654(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1655(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1656(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1657(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1658(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1659(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1660(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1661(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1662(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1663(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1664(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1665(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1666(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1667(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1668(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1669(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1670(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1671(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1672(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1673(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1674(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1675(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1676(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1677(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1678(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1679(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1680(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1681(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1682(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1683(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1684(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1685(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1686(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1687(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1688(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1689(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1690(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1691(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1692(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1693(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1694(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1695(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1696(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1697(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1698(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1699(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1700(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1701(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1702(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1703(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1704(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1705(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1706(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1707(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1708(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1709(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1710(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1711(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1712(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1713(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1714(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1715(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1716(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1717(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1718(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1719(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1720(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1721(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1722(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1723(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1724(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1725(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1726(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1727(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1728(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1729(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1730(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1731(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1732(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1733(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1734(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1735(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1736(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1737(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1738(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1739(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1740(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1741(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1742(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1743(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1744(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1745(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1746(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1747(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1748(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1749(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1750(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1751(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1752(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1753(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1754(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1755(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1756(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1757(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1758(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1759(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1760(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1761(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1762(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1763(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1764(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1765(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1766(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1767(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1768(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1769(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1770(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1771(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1772(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1773(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1774(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1775(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1776(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1777(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1778(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1779(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1780(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1781(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1782(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1783(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1784(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1785(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1786(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1787(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1788(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1789(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1790(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1791(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1792(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1793(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1794(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1795(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1796(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1797(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1798(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1799(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1800(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1801(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1802(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1803(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1804(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1805(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1806(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1807(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1808(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1809(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1810(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1811(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1812(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1813(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1814(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1815(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1816(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1817(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1818(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1819(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1820(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1821(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1822(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1823(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1824(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1825(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1826(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1827(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1828(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1829(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1830(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1831(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1832(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1833(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1834(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1835(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1836(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1837(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1838(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1839(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1840(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1841(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1842(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1843(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1844(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1845(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1846(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1847(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1848(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1849(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1850(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1851(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1852(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1853(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1854(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1855(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1856(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1857(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1858(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1859(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1860(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1861(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1862(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1863(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1864(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1865(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1866(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1867(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1868(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1869(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1870(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1871(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1872(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1873(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1874(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1875(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1876(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1877(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1878(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1879(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1880(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1881(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1882(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1883(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1884(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1885(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1886(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1887(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1888(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1889(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1890(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1891(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1892(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1893(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1894(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1895(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1896(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1897(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1898(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1899(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1900(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1901(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1902(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1903(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1904(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1905(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1906(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1907(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1908(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1909(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1910(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1911(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1912(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1913(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1914(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1915(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1916(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1917(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1918(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1919(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1920(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1921(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1922(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1923(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1924(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1925(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1926(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1927(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1928(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1929(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1930(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1931(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1932(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1933(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1934(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1935(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1936(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1937(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1938(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1939(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1940(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1941(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1942(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1943(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1944(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1945(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1946(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1947(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1948(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1949(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1950(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1951(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1952(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1953(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1954(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1955(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1956(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1957(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1958(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1959(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1960(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1961(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1962(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1963(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1964(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1965(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1966(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1967(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1968(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1969(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1970(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1971(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1972(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1973(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1974(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1975(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1976(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1977(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1978(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1979(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1980(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1981(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1982(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1983(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1984(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1985(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1986(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1987(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1988(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1989(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1990(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1991(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1992(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1993(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1994(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1995(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1996(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1997(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1998(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ1999(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2000(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2001(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2002(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2003(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2004(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2005(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2006(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2007(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2008(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2009(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2010(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2011(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2012(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2013(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2014(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2015(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2016(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2017(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2018(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2019(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2020(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2021(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2022(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2023(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2024(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2025(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2026(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2027(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2028(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2029(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2030(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2031(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2032(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2033(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2034(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2035(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2036(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2037(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2038(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2039(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2040(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2041(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2042(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2043(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2044(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2045(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2046(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2047(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2048(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2049(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2050(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2051(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2052(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2053(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2054(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2055(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2056(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2057(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2058(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2059(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2060(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2061(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2062(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2063(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2064(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2065(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2066(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2067(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2068(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2069(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2070(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2071(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2072(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2073(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2074(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2075(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2076(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2077(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2078(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2079(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2080(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2081(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2082(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2083(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2084(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2085(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2086(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2087(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2088(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2089(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2090(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2091(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2092(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2093(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2094(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2095(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2096(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2097(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2098(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2099(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2100(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2101(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2102(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2103(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2104(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2105(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2106(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2107(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2108(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2109(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2110(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2111(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2112(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2113(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2114(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2115(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2116(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2117(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2118(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2119(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2120(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2121(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2122(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2123(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2124(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2125(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2126(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2127(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2128(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2129(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2130(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2131(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2132(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2133(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2134(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2135(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2136(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2137(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2138(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2139(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2140(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2141(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2142(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2143(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2144(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2145(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2146(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2147(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2148(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2149(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2150(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2151(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2152(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2153(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2154(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2155(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2156(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2157(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2158(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2159(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2160(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2161(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2162(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2163(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2164(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2165(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2166(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2167(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2168(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2169(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2170(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2171(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2172(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2173(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2174(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2175(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2176(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2177(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2178(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2179(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2180(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2181(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2182(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2183(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2184(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2185(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2186(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2187(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2188(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2189(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2190(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2191(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2192(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2193(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2194(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2195(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2196(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2197(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2198(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2199(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2200(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2201(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2202(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2203(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2204(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2205(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2206(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2207(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2208(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2209(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2210(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2211(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2212(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2213(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2214(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2215(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2216(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2217(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2218(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2219(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2220(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2221(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2222(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2223(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2224(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2225(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2226(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2227(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2228(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2229(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2230(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2231(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2232(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2233(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2234(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2235(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2236(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2237(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2238(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2239(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2240(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2241(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2242(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2243(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2244(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2245(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2246(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2247(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2248(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2249(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2250(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2251(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2252(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2253(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2254(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2255(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2256(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2257(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2258(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2259(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2260(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2261(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2262(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2263(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2264(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2265(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2266(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2267(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2268(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2269(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2270(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2271(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2272(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2273(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2274(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2275(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2276(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2277(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2278(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2279(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2280(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2281(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2282(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2283(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2284(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2285(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2286(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2287(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2288(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2289(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2290(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2291(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2292(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2293(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2294(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2295(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2296(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2297(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2298(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2299(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2300(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2301(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2302(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2303(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2304(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2305(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2306(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2307(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2308(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2309(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2310(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2311(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2312(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2313(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2314(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2315(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2316(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2317(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2318(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2319(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2320(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2321(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2322(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2323(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2324(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2325(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2326(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2327(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2328(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2329(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2330(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2331(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2332(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2333(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2334(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2335(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2336(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2337(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2338(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2339(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2340(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2341(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2342(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2343(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2344(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2345(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2346(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2347(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2348(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2349(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2350(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2351(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2352(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2353(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2354(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2355(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2356(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2357(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2358(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2359(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2360(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2361(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2362(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2363(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2364(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2365(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2366(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2367(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2368(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2369(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2370(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2371(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2372(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2373(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2374(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2375(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2376(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2377(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2378(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2379(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2380(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2381(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2382(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2383(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2384(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2385(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2386(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2387(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2388(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2389(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2390(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2391(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2392(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2393(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2394(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2395(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2396(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2397(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2398(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2399(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2400(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2401(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2402(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2403(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2404(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2405(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2406(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2407(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2408(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2409(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2410(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2411(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2412(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2413(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2414(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2415(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2416(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2417(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2418(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2419(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2420(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2421(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2422(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2423(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2424(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2425(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2426(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2427(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2428(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2429(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2430(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2431(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2432(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2433(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2434(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2435(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2436(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2437(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2438(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2439(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2440(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2441(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2442(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2443(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2444(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2445(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2446(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2447(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2448(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2449(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2450(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2451(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2452(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2453(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2454(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2455(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2456(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2457(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2458(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2459(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2460(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2461(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2462(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2463(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2464(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2465(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2466(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2467(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2468(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2469(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2470(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2471(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2472(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2473(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2474(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2475(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2476(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2477(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2478(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2479(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2480(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2481(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2482(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2483(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2484(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2485(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2486(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2487(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2488(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2489(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2490(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2491(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2492(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2493(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2494(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2495(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2496(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2497(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2498(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2499(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2500(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2501(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2502(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2503(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2504(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2505(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2506(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2507(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2508(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2509(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2510(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2511(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2512(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2513(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2514(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2515(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2516(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2517(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2518(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2519(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2520(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2521(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2522(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2523(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2524(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2525(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2526(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2527(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2528(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2529(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2530(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2531(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2532(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2533(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2534(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2535(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2536(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2537(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2538(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2539(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2540(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2541(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2542(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2543(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2544(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2545(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2546(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2547(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2548(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2549(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2550(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2551(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2552(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2553(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2554(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2555(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2556(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2557(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2558(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2559(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2560(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2561(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2562(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2563(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2564(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2565(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2566(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2567(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2568(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2569(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2570(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2571(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2572(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2573(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2574(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2575(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2576(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2577(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2578(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2579(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2580(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2581(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2582(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2583(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2584(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2585(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2586(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2587(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2588(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2589(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2590(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2591(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2592(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2593(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2594(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2595(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2596(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2597(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2598(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2599(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2600(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2601(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2602(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2603(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2604(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2605(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2606(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2607(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2608(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2609(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2610(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2611(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2612(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2613(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2614(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2615(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2616(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2617(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2618(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2619(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2620(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2621(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2622(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2623(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2624(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2625(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2626(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2627(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2628(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2629(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2630(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2631(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2632(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2633(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2634(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2635(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2636(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2637(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2638(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2639(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2640(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2641(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2642(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2643(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2644(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2645(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2646(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2647(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2648(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2649(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2650(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2651(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2652(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2653(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2654(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2655(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2656(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2657(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2658(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2659(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2660(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2661(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2662(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2663(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2664(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2665(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2666(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2667(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2668(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2669(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2670(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2671(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2672(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2673(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2674(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2675(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2676(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2677(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2678(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2679(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2680(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2681(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2682(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2683(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2684(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2685(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2686(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2687(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2688(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2689(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2690(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2691(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2692(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2693(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2694(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2695(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2696(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2697(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2698(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2699(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2700(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2701(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2702(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2703(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2704(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2705(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2706(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2707(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2708(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2709(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2710(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2711(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2712(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2713(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2714(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2715(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2716(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2717(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2718(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2719(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2720(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2721(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2722(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2723(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2724(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2725(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2726(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2727(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2728(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2729(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2730(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2731(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2732(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2733(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2734(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2735(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2736(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2737(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2738(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2739(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2740(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2741(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2742(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2743(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2744(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2745(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2746(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2747(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2748(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2749(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2750(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2751(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2752(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2753(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2754(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2755(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2756(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2757(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2758(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2759(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2760(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2761(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2762(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2763(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2764(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2765(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2766(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2767(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2768(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2769(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2770(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2771(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2772(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2773(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2774(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2775(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2776(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2777(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2778(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2779(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2780(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2781(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2782(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2783(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2784(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2785(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2786(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2787(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2788(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2789(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2790(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2791(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2792(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2793(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2794(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2795(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2796(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2797(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2798(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2799(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2800(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2801(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2802(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2803(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2804(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2805(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2806(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2807(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2808(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2809(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2810(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2811(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2812(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2813(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2814(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2815(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2816(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2817(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2818(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2819(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2820(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2821(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2822(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2823(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2824(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2825(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2826(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2827(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2828(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2829(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2830(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2831(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2832(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2833(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2834(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2835(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2836(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2837(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2838(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2839(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2840(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2841(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2842(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2843(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2844(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2845(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2846(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2847(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2848(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2849(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2850(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2851(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2852(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2853(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2854(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2855(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2856(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2857(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2858(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2859(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2860(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2861(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2862(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2863(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2864(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2865(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2866(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2867(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2868(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2869(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2870(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2871(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2872(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2873(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2874(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2875(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2876(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2877(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2878(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2879(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2880(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2881(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2882(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2883(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2884(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2885(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2886(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2887(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2888(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2889(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2890(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2891(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2892(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2893(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2894(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2895(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2896(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2897(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2898(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2899(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2900(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2901(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2902(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2903(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2904(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2905(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2906(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2907(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2908(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2909(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2910(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2911(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2912(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2913(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2914(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2915(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2916(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2917(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2918(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2919(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2920(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2921(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2922(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2923(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2924(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2925(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2926(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2927(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2928(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2929(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2930(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2931(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2932(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2933(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2934(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2935(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2936(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2937(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2938(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2939(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2940(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2941(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2942(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2943(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2944(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2945(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2946(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2947(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2948(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2949(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2950(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2951(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2952(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2953(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2954(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2955(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2956(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2957(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2958(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2959(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2960(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2961(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2962(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2963(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2964(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2965(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2966(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2967(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2968(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2969(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2970(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2971(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2972(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2973(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2974(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2975(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2976(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2977(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2978(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2979(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2980(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2981(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2982(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2983(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2984(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2985(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2986(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2987(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2988(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2989(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2990(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2991(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2992(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2993(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2994(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2995(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2996(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2997(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2998(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ2999(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3000(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3001(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3002(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3003(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3004(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3005(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3006(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3007(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3008(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3009(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3010(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3011(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3012(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3013(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3014(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3015(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3016(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3017(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3018(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3019(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3020(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3021(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3022(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3023(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3024(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3025(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3026(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3027(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3028(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3029(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3030(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3031(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3032(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3033(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3034(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3035(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3036(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3037(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3038(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3039(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3040(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3041(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3042(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3043(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3044(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3045(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3046(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3047(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3048(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3049(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3050(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3051(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3052(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3053(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3054(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3055(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3056(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3057(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3058(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3059(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3060(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3061(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3062(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3063(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3064(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3065(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3066(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3067(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3068(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3069(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3070(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3071(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3072(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3073(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3074(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3075(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3076(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3077(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3078(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3079(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3080(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3081(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3082(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3083(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3084(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3085(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3086(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3087(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3088(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3089(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3090(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3091(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3092(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3093(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3094(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3095(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3096(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3097(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3098(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3099(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3100(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3101(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3102(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3103(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3104(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3105(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3106(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3107(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3108(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3109(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3110(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3111(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3112(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3113(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3114(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3115(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3116(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3117(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3118(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3119(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3120(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3121(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3122(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3123(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3124(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3125(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3126(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3127(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3128(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3129(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3130(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3131(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3132(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3133(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3134(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3135(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3136(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3137(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3138(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3139(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3140(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3141(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3142(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3143(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3144(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3145(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3146(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3147(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3148(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3149(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3150(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3151(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3152(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3153(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3154(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3155(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3156(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3157(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3158(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3159(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3160(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3161(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3162(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3163(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3164(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3165(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3166(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3167(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3168(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3169(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3170(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3171(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3172(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3173(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3174(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3175(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3176(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3177(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3178(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3179(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3180(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3181(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3182(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3183(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3184(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3185(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3186(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3187(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3188(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3189(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3190(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3191(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3192(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3193(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3194(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3195(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3196(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3197(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3198(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3199(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3200(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3201(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3202(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3203(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3204(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3205(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3206(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3207(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3208(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3209(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3210(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3211(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3212(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3213(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3214(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3215(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3216(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3217(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3218(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3219(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3220(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3221(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3222(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3223(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3224(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3225(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3226(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3227(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3228(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3229(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3230(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3231(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3232(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3233(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3234(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3235(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3236(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3237(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3238(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3239(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3240(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3241(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3242(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3243(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3244(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3245(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3246(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3247(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3248(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3249(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3250(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3251(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3252(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3253(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3254(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3255(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3256(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3257(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3258(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3259(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3260(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3261(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3262(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3263(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3264(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3265(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3266(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3267(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3268(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3269(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3270(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3271(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3272(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3273(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3274(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3275(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3276(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3277(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3278(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3279(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3280(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3281(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3282(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3283(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3284(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3285(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3286(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3287(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3288(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3289(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3290(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3291(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3292(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3293(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3294(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3295(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3296(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3297(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3298(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3299(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3300(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3301(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3302(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3303(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3304(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3305(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3306(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3307(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3308(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3309(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3310(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3311(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3312(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3313(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3314(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3315(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3316(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3317(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3318(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3319(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3320(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3321(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3322(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3323(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3324(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3325(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3326(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3327(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3328(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3329(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3330(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3331(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3332(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3333(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3334(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3335(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3336(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3337(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3338(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3339(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3340(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3341(a: int, b: int) : bool
{
  a == b
}

function {:inline} {:aliasingQuery} aliasQ3342(a: int, b: int) : bool
{
  a == b
}
