GlobalDeclarations
{
  var irql_current: int;
}

TemplateVariables
{
var n : int;
}

CmdRule
{
assume MaxIrqlFn(n);
}
-->
{
assert irql_current <= n; 
}

CmdRule
{
assume MinIrqlFn(n);
}
-->
{
assert irql_current >= n; 
}

ProcedureRule
{
	procedure {:#ReplaceImplementation} {:#MatchPtrs} strnlen({:pointer} {:ptr "Mem_T.VOID"} x0: int, {:scalar} x1: int) returns ({:scalar} r: int);
}
-->
{
	assert irql_current <= 1;
	return;
}

ProcedureRule
{
	procedure {:#ReplaceImplementation} {:#MatchPtrs} strnlen({:pointer} {:ptr "Mem_T.PINT"} x0: int, {:scalar} x1: int) returns ({:scalar} r: int);
}
-->
{
	assert irql_current <= 2;
	return;
}


ProcedureRule
{
	procedure {:#ReplaceImplementation} {:#MatchPtrs} foo({:pointer} {:ptr "Mem_T.INT"} x0: int, {:pointer} {:ptr "Mem_T.VOID"} x1: int);
}
-->
{
	assert irql_current <= x0;
	return;
}

ProcedureRule
{
	procedure {:#ReplaceImplementation} {:#MatchPtrs} foo({:pointer} {:ptr "Mem_T.VOID"} x0: int, {:pointer} {:ptr "Mem_T.INT"} x1: int);
}
-->
{
	assert irql_current <= x1;
	return;
}
