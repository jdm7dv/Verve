////////////
// double fetch property
// idea: if memory array is pointed to by a user pointer, then accessing some memory cell in it twice is a bug.
// a user pointer is a pointer that is probed somewhere
// refinement: we only assert the property for pointers that are aliased with a user pointer
////////////

GlobalDeclarations
{
var {:propertyMap} hasBeenRead : [int] bool;
var {:propertyMap} isUserPtr : [int] bool;
function {:ReachableStates} MustReach(x: bool) : bool;

var {:AllocatorVar} userp: int; //aliases every probed pointer
var userNondet: bool;
procedure  userNondetFn() returns (r:bool);

function {:inline} {:aliasingQuery} {:mkUniqueFn} aliasesWithUser(p:int, q:int) returns (bool) {true}

procedure aliases(p1:int) {
    call userNondet := userNondetFn();
    goto L1, L2;
L1:
   assume p1 != NULL;
   userp := if (userNondet) then p1 else userp;
   return;
L2: 
   return;
}
}

TemplateVariables
{
var {:#IdentifierExpr} base : int;
var e1, off, c1 : int;
procedure {:#AnyArguments} prc(a : int) returns (r : int);
var Mem : [int] int;
function f(int) : int;
function g(int) : int;

var p1, p2, p3 : int;
}


// when a pointer is probed sometime, that means it is a user pointer (at least the programmer thought so..)
// the mustReach ensures that we cannot block with the statement !isUserPtr(p1) for some other path (violating the double fetch but not visiting the probe) as that would make the mustReach condition unreachable. (roughly, the effect of the must reach is that p1 is a userPtr "anywhere" in the program, from the perspective of the blocking mechanism..)
CmdRule
{
 call ProbeForRead(p1, p2, p3);
 call ProbeForWrite(p1, p2, p3);
}
-->
{
call aliases(p1);
//assume MustReach(isUserPtr[p1]);
//isUserPtr[p1] := true;
#this;
}

//////////
// CmdRules for different memory access patterns
//////////
CmdRule
{
e1 := Mem[f(g(base))];
call e1 := prc(Mem[f(g(base))]);
}
-->
{
// assert !aliasesWithUser(base, userp) || !isUserPtr[base] || !hasBeenRead[f(g(base))];
assert !aliasesWithUser(base, userp)  || !hasBeenRead[f(g(base))];
hasBeenRead[f(g(base))] := true;
#this;
}

CmdRule
{
e1 := Mem[f(base + off * c1)];
call e1 := prc(Mem[f(base + off * c1)]);
}
-->
{
//assert !aliasesWithUser(base, userp) || !isUserPtr[base] || !hasBeenRead[f(base + off * c1)];
assert !aliasesWithUser(base, userp) || !hasBeenRead[f(base + off * c1)];
hasBeenRead[f(base + off * c1)] := true;
#this;
}

CmdRule
{
e1 := Mem[f(base + c1)];
call e1 := prc(Mem[f(base + c1)]);
}
-->
{
//assert !aliasesWithUser(base, userp) || !isUserPtr[base] || !hasBeenRead[f(base + c1)];
assert !aliasesWithUser(base, userp)  || !hasBeenRead[f(base + c1)];
hasBeenRead[f(base + c1)] := true;
#this;
}

CmdRule
{
e1 := Mem[f(base)];
call e1 := prc(Mem[f(base)]);
}
-->
{
//assert !aliasesWithUser(base, userp) || !isUserPtr[base] || !hasBeenRead[f(base)];
assert !aliasesWithUser(base, userp)  || !hasBeenRead[f(base)];
hasBeenRead[f(base)] := true;
#this;
}

//reads in conditionals are not captured
//However, each line is only matched once
CmdRule
{
assume (Mem[f(base)] <= e1);
assume (Mem[f(base)] > e1);
assume (Mem[f(base)] >= e1);
assume (Mem[f(base)] < e1);
assume (Mem[f(base)] == e1);
assume (Mem[f(base)] != e1);
}
-->
{
//assert !aliasesWithUser(base, userp) || !isUserPtr[base] || !hasBeenRead[f(base)];
assert !aliasesWithUser(base, userp)  || !hasBeenRead[f(base)];
hasBeenRead[f(base)] := true;
#this;
}

//reads in conditionals are not captured
//However, each line is only matched once
CmdRule
{
assume (e1 <= Mem[f(base)]);
assume (e1 > Mem[f(base)]);
assume (e1 < Mem[f(base)]);
assume (e1 >= Mem[f(base)]);
assume (e1 == Mem[f(base)]);
assume (e1 != Mem[f(base)]);
}
-->
{
//assert !aliasesWithUser(base, userp) || !isUserPtr[base] || !hasBeenRead[f(base)];
assert !aliasesWithUser(base, userp)  || !hasBeenRead[f(base)];
hasBeenRead[f(base)] := true;
#this;
}

