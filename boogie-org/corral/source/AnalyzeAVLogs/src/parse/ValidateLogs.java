package parse;

import java.io.File;

/**
 * Output: Goes through the logs generated by various stages of SMV/AV and
 * checks if there are any failures. Failures are currently identified as the
 * presence of the string "fail" in the output logs. For each occurrence of the
 * pattern, the program will display a message.
 * 
 * Validates the following files: makeBPL.txt, makeBPL.err, inst.txt, inst.err,
 * check.txt, check.err and the stdout.txt file for each entry point.
 * 
 * @author t-srg
 *
 */

public class ValidateLogs extends util.Utilities {

	protected void run() {

		readModules();

		validateLogs();

		System.out.println("Completed");

		return;
	}

	private void validateLogs() {

		int count = 1;
		for (String module : modules) {

			System.out.println("Processing module " + count + " in " + module);

			if (new File(sdxroot + module + "\\smv").exists() == false)
				System.out.println("smv folder not found!");
			else
				validateModule(module);

			System.out.println();

			count++;
		}

		return;
	}

	// Checks for the pattern "fail" in the logs generated by CreateBPL,
	// InstrumentChecks, Check and the log of each entry point
	private void validateModule(String module) {

		validateMakeBPLFile(module);

		validateInstFile(module);

		validateCheckFile(module);

		validateEntryPoints(module);

		return;
	}

	private void validateMakeBPLFile(String module) {

		validateFile(sdxroot + module + "\\smv\\makeBPL.txt", "fail");

		validateFile(sdxroot + module + "\\smv\\makeBPL.err", "fail");

		return;
	}

	private void validateInstFile(String module) {

		validateFile(sdxroot + module + "\\smv\\inst.txt", "fail");

		validateFile(sdxroot + module + "\\smv\\inst.err", "fail");

		return;
	}

	private void validateCheckFile(String module) {

		validateFile(sdxroot + module + "\\smv\\check.txt", "fail");

		validateFile(sdxroot + module + "\\smv\\check.err", "fail");

		return;
	}

	// Checks for "fail" pattern in the stdout.txt of each entry point
	private void validateEntryPoints(String module) {

		for (File file : new File(sdxroot + module + "\\smv").listFiles()) {

			if (file.isDirectory() == false)
				continue;

			if (file.getName().equals("Bugs") || file.getName().equals("build"))
				continue;

			validateFile(file.getPath() + "\\stdout.txt", "fail");
		}

		return;
	}

	// Validates the file against the given pattern. Displays a message if the
	// pattern is found in the file.
	private boolean validateFile(String file, String pattern) {

		File fileObj = new File(file);
		if (fileObj.exists() == false) {
			System.out.println(fileObj.getName() + ": File not found!");
			return false;
		}

		int count = grep(pattern, file, false);

		if (count == 0)
			return false;

		return true;
	}

	public static void main(String[] args) {
		new ValidateLogs().run();
		return;
	}

}